<?php
/**
 * ProjectSyncSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectSyncSetting Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectSyncSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectSyncSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'syncDay' => 'int',
        'syncHour' => 'int',
        'syncMinutes' => 'int',
        'status' => 'bool',
        'syncWiki' => 'bool',
        'syncBranchAndTag' => 'bool',
        'nextSyncTime' => 'string',
        'syncResult' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'syncDay' => 'int32',
        'syncHour' => 'int32',
        'syncMinutes' => 'int32',
        'status' => null,
        'syncWiki' => null,
        'syncBranchAndTag' => null,
        'nextSyncTime' => 'DateTime',
        'syncResult' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'syncDay' => 'sync_day',
        'syncHour' => 'sync_hour',
        'syncMinutes' => 'sync_minutes',
        'status' => 'status',
        'syncWiki' => 'sync_wiki',
        'syncBranchAndTag' => 'sync_branch_and_tag',
        'nextSyncTime' => 'next_sync_time',
        'syncResult' => 'sync_result'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'syncDay' => 'setSyncDay',
        'syncHour' => 'setSyncHour',
        'syncMinutes' => 'setSyncMinutes',
        'status' => 'setStatus',
        'syncWiki' => 'setSyncWiki',
        'syncBranchAndTag' => 'setSyncBranchAndTag',
        'nextSyncTime' => 'setNextSyncTime',
        'syncResult' => 'setSyncResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'syncDay' => 'getSyncDay',
        'syncHour' => 'getSyncHour',
        'syncMinutes' => 'getSyncMinutes',
        'status' => 'getStatus',
        'syncWiki' => 'getSyncWiki',
        'syncBranchAndTag' => 'getSyncBranchAndTag',
        'nextSyncTime' => 'getNextSyncTime',
        'syncResult' => 'getSyncResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['syncDay'] = isset($data['syncDay']) ? $data['syncDay'] : null;
        $this->container['syncHour'] = isset($data['syncHour']) ? $data['syncHour'] : null;
        $this->container['syncMinutes'] = isset($data['syncMinutes']) ? $data['syncMinutes'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['syncWiki'] = isset($data['syncWiki']) ? $data['syncWiki'] : null;
        $this->container['syncBranchAndTag'] = isset($data['syncBranchAndTag']) ? $data['syncBranchAndTag'] : null;
        $this->container['nextSyncTime'] = isset($data['nextSyncTime']) ? $data['nextSyncTime'] : null;
        $this->container['syncResult'] = isset($data['syncResult']) ? $data['syncResult'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets syncDay
     *
     * @return int
     */
    public function getSyncDay()
    {
        return $this->container['syncDay'];
    }

    /**
     * Sets syncDay
     *
     * @param int $syncDay 同步设置天数
     *
     * @return $this
     */
    public function setSyncDay($syncDay)
    {
        $this->container['syncDay'] = $syncDay;

        return $this;
    }

    /**
     * Gets syncHour
     *
     * @return int
     */
    public function getSyncHour()
    {
        return $this->container['syncHour'];
    }

    /**
     * Sets syncHour
     *
     * @param int $syncHour 同步设置小时
     *
     * @return $this
     */
    public function setSyncHour($syncHour)
    {
        $this->container['syncHour'] = $syncHour;

        return $this;
    }

    /**
     * Gets syncMinutes
     *
     * @return int
     */
    public function getSyncMinutes()
    {
        return $this->container['syncMinutes'];
    }

    /**
     * Sets syncMinutes
     *
     * @param int $syncMinutes 同步设置分钟
     *
     * @return $this
     */
    public function setSyncMinutes($syncMinutes)
    {
        $this->container['syncMinutes'] = $syncMinutes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return bool
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param bool $status 状态， 0： 关闭， 1：开启
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets syncWiki
     *
     * @return bool
     */
    public function getSyncWiki()
    {
        return $this->container['syncWiki'];
    }

    /**
     * Sets syncWiki
     *
     * @param bool $syncWiki 是否同步wiki
     *
     * @return $this
     */
    public function setSyncWiki($syncWiki)
    {
        $this->container['syncWiki'] = $syncWiki;

        return $this;
    }

    /**
     * Gets syncBranchAndTag
     *
     * @return bool
     */
    public function getSyncBranchAndTag()
    {
        return $this->container['syncBranchAndTag'];
    }

    /**
     * Sets syncBranchAndTag
     *
     * @param bool $syncBranchAndTag 是否同步branch 与 tag
     *
     * @return $this
     */
    public function setSyncBranchAndTag($syncBranchAndTag)
    {
        $this->container['syncBranchAndTag'] = $syncBranchAndTag;

        return $this;
    }

    /**
     * Gets nextSyncTime
     *
     * @return string
     */
    public function getNextSyncTime()
    {
        return $this->container['nextSyncTime'];
    }

    /**
     * Sets nextSyncTime
     *
     * @param string $nextSyncTime 下次同步时间
     *
     * @return $this
     */
    public function setNextSyncTime($nextSyncTime)
    {
        $this->container['nextSyncTime'] = $nextSyncTime;

        return $this;
    }

    /**
     * Gets syncResult
     *
     * @return object
     */
    public function getSyncResult()
    {
        return $this->container['syncResult'];
    }

    /**
     * Sets syncResult
     *
     * @param object $syncResult 上次同步结果
     *
     * @return $this
     */
    public function setSyncResult($syncResult)
    {
        $this->container['syncResult'] = $syncResult;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


