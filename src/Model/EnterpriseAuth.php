<?php
/**
 * EnterpriseAuth
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * EnterpriseAuth Class Doc Comment
 *
 * @category Class
 * @description 获取授权用户在企业拥有的权限
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseAuth implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnterpriseAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'readMember' => 'bool',
        'addMember' => 'bool',
        'readGroup' => 'bool',
        'addGroup' => 'bool',
        'readIssue' => 'bool',
        'createIssue' => 'bool',
        'readProgramConfig' => 'bool',
        'settingProgramConfig' => 'bool',
        'readProgram' => 'bool',
        'createProgram' => 'bool',
        'readProject' => 'bool',
        'readWeekReport' => 'bool',
        'readIssueType' => 'bool',
        'settingIssueType' => 'bool',
        'readLabel' => 'bool',
        'settingLabel' => 'bool',
        'adminEnterprise' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'readMember' => null,
        'addMember' => null,
        'readGroup' => null,
        'addGroup' => null,
        'readIssue' => null,
        'createIssue' => null,
        'readProgramConfig' => null,
        'settingProgramConfig' => null,
        'readProgram' => null,
        'createProgram' => null,
        'readProject' => null,
        'readWeekReport' => null,
        'readIssueType' => null,
        'settingIssueType' => null,
        'readLabel' => null,
        'settingLabel' => null,
        'adminEnterprise' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'readMember' => 'read_member',
        'addMember' => 'add_member',
        'readGroup' => 'read_group',
        'addGroup' => 'add_group',
        'readIssue' => 'read_issue',
        'createIssue' => 'create_issue',
        'readProgramConfig' => 'read_program_config',
        'settingProgramConfig' => 'setting_program_config',
        'readProgram' => 'read_program',
        'createProgram' => 'create_program',
        'readProject' => 'read_project',
        'readWeekReport' => 'read_week_report',
        'readIssueType' => 'read_issue_type',
        'settingIssueType' => 'setting_issue_type',
        'readLabel' => 'read_label',
        'settingLabel' => 'setting_label',
        'adminEnterprise' => 'admin_enterprise'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'readMember' => 'setReadMember',
        'addMember' => 'setAddMember',
        'readGroup' => 'setReadGroup',
        'addGroup' => 'setAddGroup',
        'readIssue' => 'setReadIssue',
        'createIssue' => 'setCreateIssue',
        'readProgramConfig' => 'setReadProgramConfig',
        'settingProgramConfig' => 'setSettingProgramConfig',
        'readProgram' => 'setReadProgram',
        'createProgram' => 'setCreateProgram',
        'readProject' => 'setReadProject',
        'readWeekReport' => 'setReadWeekReport',
        'readIssueType' => 'setReadIssueType',
        'settingIssueType' => 'setSettingIssueType',
        'readLabel' => 'setReadLabel',
        'settingLabel' => 'setSettingLabel',
        'adminEnterprise' => 'setAdminEnterprise'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'readMember' => 'getReadMember',
        'addMember' => 'getAddMember',
        'readGroup' => 'getReadGroup',
        'addGroup' => 'getAddGroup',
        'readIssue' => 'getReadIssue',
        'createIssue' => 'getCreateIssue',
        'readProgramConfig' => 'getReadProgramConfig',
        'settingProgramConfig' => 'getSettingProgramConfig',
        'readProgram' => 'getReadProgram',
        'createProgram' => 'getCreateProgram',
        'readProject' => 'getReadProject',
        'readWeekReport' => 'getReadWeekReport',
        'readIssueType' => 'getReadIssueType',
        'settingIssueType' => 'getSettingIssueType',
        'readLabel' => 'getReadLabel',
        'settingLabel' => 'getSettingLabel',
        'adminEnterprise' => 'getAdminEnterprise'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['readMember'] = isset($data['readMember']) ? $data['readMember'] : null;
        $this->container['addMember'] = isset($data['addMember']) ? $data['addMember'] : null;
        $this->container['readGroup'] = isset($data['readGroup']) ? $data['readGroup'] : null;
        $this->container['addGroup'] = isset($data['addGroup']) ? $data['addGroup'] : null;
        $this->container['readIssue'] = isset($data['readIssue']) ? $data['readIssue'] : null;
        $this->container['createIssue'] = isset($data['createIssue']) ? $data['createIssue'] : null;
        $this->container['readProgramConfig'] = isset($data['readProgramConfig']) ? $data['readProgramConfig'] : null;
        $this->container['settingProgramConfig'] = isset($data['settingProgramConfig']) ? $data['settingProgramConfig'] : null;
        $this->container['readProgram'] = isset($data['readProgram']) ? $data['readProgram'] : null;
        $this->container['createProgram'] = isset($data['createProgram']) ? $data['createProgram'] : null;
        $this->container['readProject'] = isset($data['readProject']) ? $data['readProject'] : null;
        $this->container['readWeekReport'] = isset($data['readWeekReport']) ? $data['readWeekReport'] : null;
        $this->container['readIssueType'] = isset($data['readIssueType']) ? $data['readIssueType'] : null;
        $this->container['settingIssueType'] = isset($data['settingIssueType']) ? $data['settingIssueType'] : null;
        $this->container['readLabel'] = isset($data['readLabel']) ? $data['readLabel'] : null;
        $this->container['settingLabel'] = isset($data['settingLabel']) ? $data['settingLabel'] : null;
        $this->container['adminEnterprise'] = isset($data['adminEnterprise']) ? $data['adminEnterprise'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets readMember
     *
     * @return bool
     */
    public function getReadMember()
    {
        return $this->container['readMember'];
    }

    /**
     * Sets readMember
     *
     * @param bool $readMember 是否可查看成员列表
     *
     * @return $this
     */
    public function setReadMember($readMember)
    {
        $this->container['readMember'] = $readMember;

        return $this;
    }

    /**
     * Gets addMember
     *
     * @return bool
     */
    public function getAddMember()
    {
        return $this->container['addMember'];
    }

    /**
     * Sets addMember
     *
     * @param bool $addMember 是否可添加企业成员
     *
     * @return $this
     */
    public function setAddMember($addMember)
    {
        $this->container['addMember'] = $addMember;

        return $this;
    }

    /**
     * Gets readGroup
     *
     * @return bool
     */
    public function getReadGroup()
    {
        return $this->container['readGroup'];
    }

    /**
     * Sets readGroup
     *
     * @param bool $readGroup 是否可查看授权用户参与的团队列表
     *
     * @return $this
     */
    public function setReadGroup($readGroup)
    {
        $this->container['readGroup'] = $readGroup;

        return $this;
    }

    /**
     * Gets addGroup
     *
     * @return bool
     */
    public function getAddGroup()
    {
        return $this->container['addGroup'];
    }

    /**
     * Sets addGroup
     *
     * @param bool $addGroup 是否可新增团队
     *
     * @return $this
     */
    public function setAddGroup($addGroup)
    {
        $this->container['addGroup'] = $addGroup;

        return $this;
    }

    /**
     * Gets readIssue
     *
     * @return bool
     */
    public function getReadIssue()
    {
        return $this->container['readIssue'];
    }

    /**
     * Sets readIssue
     *
     * @param bool $readIssue 是否可查看授权用户参与的任务列表
     *
     * @return $this
     */
    public function setReadIssue($readIssue)
    {
        $this->container['readIssue'] = $readIssue;

        return $this;
    }

    /**
     * Gets createIssue
     *
     * @return bool
     */
    public function getCreateIssue()
    {
        return $this->container['createIssue'];
    }

    /**
     * Sets createIssue
     *
     * @param bool $createIssue 是否可创建任务
     *
     * @return $this
     */
    public function setCreateIssue($createIssue)
    {
        $this->container['createIssue'] = $createIssue;

        return $this;
    }

    /**
     * Gets readProgramConfig
     *
     * @return bool
     */
    public function getReadProgramConfig()
    {
        return $this->container['readProgramConfig'];
    }

    /**
     * Sets readProgramConfig
     *
     * @param bool $readProgramConfig 是否可见用例设置
     *
     * @return $this
     */
    public function setReadProgramConfig($readProgramConfig)
    {
        $this->container['readProgramConfig'] = $readProgramConfig;

        return $this;
    }

    /**
     * Gets settingProgramConfig
     *
     * @return bool
     */
    public function getSettingProgramConfig()
    {
        return $this->container['settingProgramConfig'];
    }

    /**
     * Sets settingProgramConfig
     *
     * @param bool $settingProgramConfig 是否可配置用例设置
     *
     * @return $this
     */
    public function setSettingProgramConfig($settingProgramConfig)
    {
        $this->container['settingProgramConfig'] = $settingProgramConfig;

        return $this;
    }

    /**
     * Gets readProgram
     *
     * @return bool
     */
    public function getReadProgram()
    {
        return $this->container['readProgram'];
    }

    /**
     * Sets readProgram
     *
     * @param bool $readProgram 是否可查看授权用户参与的项目列表
     *
     * @return $this
     */
    public function setReadProgram($readProgram)
    {
        $this->container['readProgram'] = $readProgram;

        return $this;
    }

    /**
     * Gets createProgram
     *
     * @return bool
     */
    public function getCreateProgram()
    {
        return $this->container['createProgram'];
    }

    /**
     * Sets createProgram
     *
     * @param bool $createProgram 是否可创建项目
     *
     * @return $this
     */
    public function setCreateProgram($createProgram)
    {
        $this->container['createProgram'] = $createProgram;

        return $this;
    }

    /**
     * Gets readProject
     *
     * @return bool
     */
    public function getReadProject()
    {
        return $this->container['readProject'];
    }

    /**
     * Sets readProject
     *
     * @param bool $readProject 是否可查看授权用户参与的仓库列表
     *
     * @return $this
     */
    public function setReadProject($readProject)
    {
        $this->container['readProject'] = $readProject;

        return $this;
    }

    /**
     * Gets readWeekReport
     *
     * @return bool
     */
    public function getReadWeekReport()
    {
        return $this->container['readWeekReport'];
    }

    /**
     * Sets readWeekReport
     *
     * @param bool $readWeekReport 是否可读取周报
     *
     * @return $this
     */
    public function setReadWeekReport($readWeekReport)
    {
        $this->container['readWeekReport'] = $readWeekReport;

        return $this;
    }

    /**
     * Gets readIssueType
     *
     * @return bool
     */
    public function getReadIssueType()
    {
        return $this->container['readIssueType'];
    }

    /**
     * Sets readIssueType
     *
     * @param bool $readIssueType 是否可读取任务类型
     *
     * @return $this
     */
    public function setReadIssueType($readIssueType)
    {
        $this->container['readIssueType'] = $readIssueType;

        return $this;
    }

    /**
     * Gets settingIssueType
     *
     * @return bool
     */
    public function getSettingIssueType()
    {
        return $this->container['settingIssueType'];
    }

    /**
     * Sets settingIssueType
     *
     * @param bool $settingIssueType 是否可管理任务类型
     *
     * @return $this
     */
    public function setSettingIssueType($settingIssueType)
    {
        $this->container['settingIssueType'] = $settingIssueType;

        return $this;
    }

    /**
     * Gets readLabel
     *
     * @return bool
     */
    public function getReadLabel()
    {
        return $this->container['readLabel'];
    }

    /**
     * Sets readLabel
     *
     * @param bool $readLabel 是否可读取标签
     *
     * @return $this
     */
    public function setReadLabel($readLabel)
    {
        $this->container['readLabel'] = $readLabel;

        return $this;
    }

    /**
     * Gets settingLabel
     *
     * @return bool
     */
    public function getSettingLabel()
    {
        return $this->container['settingLabel'];
    }

    /**
     * Sets settingLabel
     *
     * @param bool $settingLabel 是否可管理标签
     *
     * @return $this
     */
    public function setSettingLabel($settingLabel)
    {
        $this->container['settingLabel'] = $settingLabel;

        return $this;
    }

    /**
     * Gets adminEnterprise
     *
     * @return bool
     */
    public function getAdminEnterprise()
    {
        return $this->container['adminEnterprise'];
    }

    /**
     * Sets adminEnterprise
     *
     * @param bool $adminEnterprise 是否可管理企业
     *
     * @return $this
     */
    public function setAdminEnterprise($adminEnterprise)
    {
        $this->container['adminEnterprise'] = $adminEnterprise;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


