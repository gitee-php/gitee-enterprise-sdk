<?php
/**
 * ProjectPushConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectPushConfig Class Doc Comment
 *
 * @category Class
 * @description 查看推送规则详情
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectPushConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectPushConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'restrictPushOwnCommit' => 'bool',
        'restrictAuthorEmailSuffix' => 'bool',
        'authorEmailSuffix' => 'string',
        'restrictCommitMessage' => 'bool',
        'commitMessageRegex' => 'string',
        'restrictFileSize' => 'bool',
        'maxFileSize' => 'int',
        'restrictBranch' => 'bool',
        'restrictSubmissionUsername' => 'bool',
        'restrictBranchCreate' => 'bool',
        'restrictBranchDelete' => 'bool',
        'branchCreateAllowed' => 'null[]',
        'branchDeleteAllowed' => 'null[]',
        'branchRules' => 'object',
        'exceptManager' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'restrictPushOwnCommit' => null,
        'restrictAuthorEmailSuffix' => null,
        'authorEmailSuffix' => null,
        'restrictCommitMessage' => null,
        'commitMessageRegex' => null,
        'restrictFileSize' => null,
        'maxFileSize' => 'int32',
        'restrictBranch' => null,
        'restrictSubmissionUsername' => null,
        'restrictBranchCreate' => null,
        'restrictBranchDelete' => null,
        'branchCreateAllowed' => null,
        'branchDeleteAllowed' => null,
        'branchRules' => null,
        'exceptManager' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'restrictPushOwnCommit' => 'restrict_push_own_commit',
        'restrictAuthorEmailSuffix' => 'restrict_author_email_suffix',
        'authorEmailSuffix' => 'author_email_suffix',
        'restrictCommitMessage' => 'restrict_commit_message',
        'commitMessageRegex' => 'commit_message_regex',
        'restrictFileSize' => 'restrict_file_size',
        'maxFileSize' => 'max_file_size',
        'restrictBranch' => 'restrict_branch',
        'restrictSubmissionUsername' => 'restrict_submission_username',
        'restrictBranchCreate' => 'restrict_branch_create',
        'restrictBranchDelete' => 'restrict_branch_delete',
        'branchCreateAllowed' => 'branch_create_allowed',
        'branchDeleteAllowed' => 'branch_delete_allowed',
        'branchRules' => 'branch_rules',
        'exceptManager' => 'except_manager'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'restrictPushOwnCommit' => 'setRestrictPushOwnCommit',
        'restrictAuthorEmailSuffix' => 'setRestrictAuthorEmailSuffix',
        'authorEmailSuffix' => 'setAuthorEmailSuffix',
        'restrictCommitMessage' => 'setRestrictCommitMessage',
        'commitMessageRegex' => 'setCommitMessageRegex',
        'restrictFileSize' => 'setRestrictFileSize',
        'maxFileSize' => 'setMaxFileSize',
        'restrictBranch' => 'setRestrictBranch',
        'restrictSubmissionUsername' => 'setRestrictSubmissionUsername',
        'restrictBranchCreate' => 'setRestrictBranchCreate',
        'restrictBranchDelete' => 'setRestrictBranchDelete',
        'branchCreateAllowed' => 'setBranchCreateAllowed',
        'branchDeleteAllowed' => 'setBranchDeleteAllowed',
        'branchRules' => 'setBranchRules',
        'exceptManager' => 'setExceptManager'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'restrictPushOwnCommit' => 'getRestrictPushOwnCommit',
        'restrictAuthorEmailSuffix' => 'getRestrictAuthorEmailSuffix',
        'authorEmailSuffix' => 'getAuthorEmailSuffix',
        'restrictCommitMessage' => 'getRestrictCommitMessage',
        'commitMessageRegex' => 'getCommitMessageRegex',
        'restrictFileSize' => 'getRestrictFileSize',
        'maxFileSize' => 'getMaxFileSize',
        'restrictBranch' => 'getRestrictBranch',
        'restrictSubmissionUsername' => 'getRestrictSubmissionUsername',
        'restrictBranchCreate' => 'getRestrictBranchCreate',
        'restrictBranchDelete' => 'getRestrictBranchDelete',
        'branchCreateAllowed' => 'getBranchCreateAllowed',
        'branchDeleteAllowed' => 'getBranchDeleteAllowed',
        'branchRules' => 'getBranchRules',
        'exceptManager' => 'getExceptManager'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['restrictPushOwnCommit'] = isset($data['restrictPushOwnCommit']) ? $data['restrictPushOwnCommit'] : null;
        $this->container['restrictAuthorEmailSuffix'] = isset($data['restrictAuthorEmailSuffix']) ? $data['restrictAuthorEmailSuffix'] : null;
        $this->container['authorEmailSuffix'] = isset($data['authorEmailSuffix']) ? $data['authorEmailSuffix'] : null;
        $this->container['restrictCommitMessage'] = isset($data['restrictCommitMessage']) ? $data['restrictCommitMessage'] : null;
        $this->container['commitMessageRegex'] = isset($data['commitMessageRegex']) ? $data['commitMessageRegex'] : null;
        $this->container['restrictFileSize'] = isset($data['restrictFileSize']) ? $data['restrictFileSize'] : null;
        $this->container['maxFileSize'] = isset($data['maxFileSize']) ? $data['maxFileSize'] : null;
        $this->container['restrictBranch'] = isset($data['restrictBranch']) ? $data['restrictBranch'] : null;
        $this->container['restrictSubmissionUsername'] = isset($data['restrictSubmissionUsername']) ? $data['restrictSubmissionUsername'] : null;
        $this->container['restrictBranchCreate'] = isset($data['restrictBranchCreate']) ? $data['restrictBranchCreate'] : null;
        $this->container['restrictBranchDelete'] = isset($data['restrictBranchDelete']) ? $data['restrictBranchDelete'] : null;
        $this->container['branchCreateAllowed'] = isset($data['branchCreateAllowed']) ? $data['branchCreateAllowed'] : null;
        $this->container['branchDeleteAllowed'] = isset($data['branchDeleteAllowed']) ? $data['branchDeleteAllowed'] : null;
        $this->container['branchRules'] = isset($data['branchRules']) ? $data['branchRules'] : null;
        $this->container['exceptManager'] = isset($data['exceptManager']) ? $data['exceptManager'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets restrictPushOwnCommit
     *
     * @return bool
     */
    public function getRestrictPushOwnCommit()
    {
        return $this->container['restrictPushOwnCommit'];
    }

    /**
     * Sets restrictPushOwnCommit
     *
     * @param bool $restrictPushOwnCommit 启用只能推送自己的提交（所推送提交中的邮箱必须与推送者所设置的提交邮箱一致）
     *
     * @return $this
     */
    public function setRestrictPushOwnCommit($restrictPushOwnCommit)
    {
        $this->container['restrictPushOwnCommit'] = $restrictPushOwnCommit;

        return $this;
    }

    /**
     * Gets restrictAuthorEmailSuffix
     *
     * @return bool
     */
    public function getRestrictAuthorEmailSuffix()
    {
        return $this->container['restrictAuthorEmailSuffix'];
    }

    /**
     * Sets restrictAuthorEmailSuffix
     *
     * @param bool $restrictAuthorEmailSuffix 启用只允许指定邮箱域名后缀的提交
     *
     * @return $this
     */
    public function setRestrictAuthorEmailSuffix($restrictAuthorEmailSuffix)
    {
        $this->container['restrictAuthorEmailSuffix'] = $restrictAuthorEmailSuffix;

        return $this;
    }

    /**
     * Gets authorEmailSuffix
     *
     * @return string
     */
    public function getAuthorEmailSuffix()
    {
        return $this->container['authorEmailSuffix'];
    }

    /**
     * Sets authorEmailSuffix
     *
     * @param string $authorEmailSuffix 指定邮箱域名的后缀
     *
     * @return $this
     */
    public function setAuthorEmailSuffix($authorEmailSuffix)
    {
        $this->container['authorEmailSuffix'] = $authorEmailSuffix;

        return $this;
    }

    /**
     * Gets restrictCommitMessage
     *
     * @return bool
     */
    public function getRestrictCommitMessage()
    {
        return $this->container['restrictCommitMessage'];
    }

    /**
     * Sets restrictCommitMessage
     *
     * @param bool $restrictCommitMessage 启用提交信息正则表达式校验
     *
     * @return $this
     */
    public function setRestrictCommitMessage($restrictCommitMessage)
    {
        $this->container['restrictCommitMessage'] = $restrictCommitMessage;

        return $this;
    }

    /**
     * Gets commitMessageRegex
     *
     * @return string
     */
    public function getCommitMessageRegex()
    {
        return $this->container['commitMessageRegex'];
    }

    /**
     * Sets commitMessageRegex
     *
     * @param string $commitMessageRegex 用于验证提交信息的正则表达式
     *
     * @return $this
     */
    public function setCommitMessageRegex($commitMessageRegex)
    {
        $this->container['commitMessageRegex'] = $commitMessageRegex;

        return $this;
    }

    /**
     * Gets restrictFileSize
     *
     * @return bool
     */
    public function getRestrictFileSize()
    {
        return $this->container['restrictFileSize'];
    }

    /**
     * Sets restrictFileSize
     *
     * @param bool $restrictFileSize 启用限制单文件大小
     *
     * @return $this
     */
    public function setRestrictFileSize($restrictFileSize)
    {
        $this->container['restrictFileSize'] = $restrictFileSize;

        return $this;
    }

    /**
     * Gets maxFileSize
     *
     * @return int
     */
    public function getMaxFileSize()
    {
        return $this->container['maxFileSize'];
    }

    /**
     * Sets maxFileSize
     *
     * @param int $maxFileSize 限制单文件大小（MB）
     *
     * @return $this
     */
    public function setMaxFileSize($maxFileSize)
    {
        $this->container['maxFileSize'] = $maxFileSize;

        return $this;
    }

    /**
     * Gets restrictBranch
     *
     * @return bool
     */
    public function getRestrictBranch()
    {
        return $this->container['restrictBranch'];
    }

    /**
     * Sets restrictBranch
     *
     * @param bool $restrictBranch 启用分支限制
     *
     * @return $this
     */
    public function setRestrictBranch($restrictBranch)
    {
        $this->container['restrictBranch'] = $restrictBranch;

        return $this;
    }

    /**
     * Gets restrictSubmissionUsername
     *
     * @return bool
     */
    public function getRestrictSubmissionUsername()
    {
        return $this->container['restrictSubmissionUsername'];
    }

    /**
     * Sets restrictSubmissionUsername
     *
     * @param bool $restrictSubmissionUsername 是否要求推送提交中的author名称必须与推送者的用户名一致:true：是，false: 否
     *
     * @return $this
     */
    public function setRestrictSubmissionUsername($restrictSubmissionUsername)
    {
        $this->container['restrictSubmissionUsername'] = $restrictSubmissionUsername;

        return $this;
    }

    /**
     * Gets restrictBranchCreate
     *
     * @return bool
     */
    public function getRestrictBranchCreate()
    {
        return $this->container['restrictBranchCreate'];
    }

    /**
     * Sets restrictBranchCreate
     *
     * @param bool $restrictBranchCreate 是否开启分支创建限制
     *
     * @return $this
     */
    public function setRestrictBranchCreate($restrictBranchCreate)
    {
        $this->container['restrictBranchCreate'] = $restrictBranchCreate;

        return $this;
    }

    /**
     * Gets restrictBranchDelete
     *
     * @return bool
     */
    public function getRestrictBranchDelete()
    {
        return $this->container['restrictBranchDelete'];
    }

    /**
     * Sets restrictBranchDelete
     *
     * @param bool $restrictBranchDelete 是否开启分支删除限制
     *
     * @return $this
     */
    public function setRestrictBranchDelete($restrictBranchDelete)
    {
        $this->container['restrictBranchDelete'] = $restrictBranchDelete;

        return $this;
    }

    /**
     * Gets branchCreateAllowed
     *
     * @return null[]
     */
    public function getBranchCreateAllowed()
    {
        return $this->container['branchCreateAllowed'];
    }

    /**
     * Sets branchCreateAllowed
     *
     * @param null[] $branchCreateAllowed 允许创建分支的用户名列表
     *
     * @return $this
     */
    public function setBranchCreateAllowed($branchCreateAllowed)
    {
        $this->container['branchCreateAllowed'] = $branchCreateAllowed;

        return $this;
    }

    /**
     * Gets branchDeleteAllowed
     *
     * @return null[]
     */
    public function getBranchDeleteAllowed()
    {
        return $this->container['branchDeleteAllowed'];
    }

    /**
     * Sets branchDeleteAllowed
     *
     * @param null[] $branchDeleteAllowed 允许删除分支的用户名列表
     *
     * @return $this
     */
    public function setBranchDeleteAllowed($branchDeleteAllowed)
    {
        $this->container['branchDeleteAllowed'] = $branchDeleteAllowed;

        return $this;
    }

    /**
     * Gets branchRules
     *
     * @return object
     */
    public function getBranchRules()
    {
        return $this->container['branchRules'];
    }

    /**
     * Sets branchRules
     *
     * @param object $branchRules 分支规则
     *
     * @return $this
     */
    public function setBranchRules($branchRules)
    {
        $this->container['branchRules'] = $branchRules;

        return $this;
    }

    /**
     * Gets exceptManager
     *
     * @return bool
     */
    public function getExceptManager()
    {
        return $this->container['exceptManager'];
    }

    /**
     * Sets exceptManager
     *
     * @param bool $exceptManager 仓库管理员不受上述规则限制
     *
     * @return $this
     */
    public function setExceptManager($exceptManager)
    {
        $this->container['exceptManager'] = $exceptManager;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


