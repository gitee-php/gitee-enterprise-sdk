<?php
/**
 * ProjectContributor
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectContributor Class Doc Comment
 *
 * @category Class
 * @description 获取仓库贡献者列表
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectContributor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectContributor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'committerName' => 'string',
        'email' => 'string',
        'username' => 'string',
        'isGiteeUser' => 'bool',
        'imagePath' => 'string',
        'commitsCount' => 'int',
        'enterpriseRemark' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'committerName' => null,
        'email' => null,
        'username' => null,
        'isGiteeUser' => null,
        'imagePath' => null,
        'commitsCount' => 'int32',
        'enterpriseRemark' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'committerName' => 'committer_name',
        'email' => 'email',
        'username' => 'username',
        'isGiteeUser' => 'is_gitee_user',
        'imagePath' => 'image_path',
        'commitsCount' => 'commits_count',
        'enterpriseRemark' => 'enterprise_remark'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'committerName' => 'setCommitterName',
        'email' => 'setEmail',
        'username' => 'setUsername',
        'isGiteeUser' => 'setIsGiteeUser',
        'imagePath' => 'setImagePath',
        'commitsCount' => 'setCommitsCount',
        'enterpriseRemark' => 'setEnterpriseRemark'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'committerName' => 'getCommitterName',
        'email' => 'getEmail',
        'username' => 'getUsername',
        'isGiteeUser' => 'getIsGiteeUser',
        'imagePath' => 'getImagePath',
        'commitsCount' => 'getCommitsCount',
        'enterpriseRemark' => 'getEnterpriseRemark'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['committerName'] = isset($data['committerName']) ? $data['committerName'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['isGiteeUser'] = isset($data['isGiteeUser']) ? $data['isGiteeUser'] : null;
        $this->container['imagePath'] = isset($data['imagePath']) ? $data['imagePath'] : null;
        $this->container['commitsCount'] = isset($data['commitsCount']) ? $data['commitsCount'] : null;
        $this->container['enterpriseRemark'] = isset($data['enterpriseRemark']) ? $data['enterpriseRemark'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 姓名
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets committerName
     *
     * @return string
     */
    public function getCommitterName()
    {
        return $this->container['committerName'];
    }

    /**
     * Sets committerName
     *
     * @param string $committerName 贡献者名称
     *
     * @return $this
     */
    public function setCommitterName($committerName)
    {
        $this->container['committerName'] = $committerName;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email 邮箱
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username 用户名
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets isGiteeUser
     *
     * @return bool
     */
    public function getIsGiteeUser()
    {
        return $this->container['isGiteeUser'];
    }

    /**
     * Sets isGiteeUser
     *
     * @param bool $isGiteeUser 是否为Gitee用户
     *
     * @return $this
     */
    public function setIsGiteeUser($isGiteeUser)
    {
        $this->container['isGiteeUser'] = $isGiteeUser;

        return $this;
    }

    /**
     * Gets imagePath
     *
     * @return string
     */
    public function getImagePath()
    {
        return $this->container['imagePath'];
    }

    /**
     * Sets imagePath
     *
     * @param string $imagePath 头像
     *
     * @return $this
     */
    public function setImagePath($imagePath)
    {
        $this->container['imagePath'] = $imagePath;

        return $this;
    }

    /**
     * Gets commitsCount
     *
     * @return int
     */
    public function getCommitsCount()
    {
        return $this->container['commitsCount'];
    }

    /**
     * Sets commitsCount
     *
     * @param int $commitsCount commit数
     *
     * @return $this
     */
    public function setCommitsCount($commitsCount)
    {
        $this->container['commitsCount'] = $commitsCount;

        return $this;
    }

    /**
     * Gets enterpriseRemark
     *
     * @return string
     */
    public function getEnterpriseRemark()
    {
        return $this->container['enterpriseRemark'];
    }

    /**
     * Sets enterpriseRemark
     *
     * @param string $enterpriseRemark 企业备注
     *
     * @return $this
     */
    public function setEnterpriseRemark($enterpriseRemark)
    {
        $this->container['enterpriseRemark'] = $enterpriseRemark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


