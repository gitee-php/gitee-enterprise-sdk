<?php
/**
 * ProjectMember
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectMember Class Doc Comment
 *
 * @category Class
 * @description 获取仓库成员和仓库团队成员
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectMember implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'nickname' => 'string',
        'username' => 'string',
        'target' => 'string',
        'avatarUrl' => 'string',
        'email' => 'string',
        'isEnterpriseMember' => 'bool',
        'isHistoryMember' => 'bool',
        'accessLevel' => 'string',
        'accessLevelIdent' => 'string',
        'isBlocked' => 'bool',
        'isMyself' => 'bool',
        'projectAccess' => 'string',
        'projectAccessName' => 'string',
        'projectCreator' => 'bool',
        'projectOwner' => 'bool',
        'joinAt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'nickname' => null,
        'username' => null,
        'target' => null,
        'avatarUrl' => null,
        'email' => null,
        'isEnterpriseMember' => null,
        'isHistoryMember' => null,
        'accessLevel' => null,
        'accessLevelIdent' => null,
        'isBlocked' => null,
        'isMyself' => null,
        'projectAccess' => null,
        'projectAccessName' => null,
        'projectCreator' => null,
        'projectOwner' => null,
        'joinAt' => 'DateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'nickname' => 'nickname',
        'username' => 'username',
        'target' => 'target',
        'avatarUrl' => 'avatar_url',
        'email' => 'email',
        'isEnterpriseMember' => 'is_enterprise_member',
        'isHistoryMember' => 'is_history_member',
        'accessLevel' => 'access_level',
        'accessLevelIdent' => 'access_level_ident',
        'isBlocked' => 'is_blocked',
        'isMyself' => 'is_myself',
        'projectAccess' => 'project_access',
        'projectAccessName' => 'project_access_name',
        'projectCreator' => 'project_creator',
        'projectOwner' => 'project_owner',
        'joinAt' => 'join_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'nickname' => 'setNickname',
        'username' => 'setUsername',
        'target' => 'setTarget',
        'avatarUrl' => 'setAvatarUrl',
        'email' => 'setEmail',
        'isEnterpriseMember' => 'setIsEnterpriseMember',
        'isHistoryMember' => 'setIsHistoryMember',
        'accessLevel' => 'setAccessLevel',
        'accessLevelIdent' => 'setAccessLevelIdent',
        'isBlocked' => 'setIsBlocked',
        'isMyself' => 'setIsMyself',
        'projectAccess' => 'setProjectAccess',
        'projectAccessName' => 'setProjectAccessName',
        'projectCreator' => 'setProjectCreator',
        'projectOwner' => 'setProjectOwner',
        'joinAt' => 'setJoinAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'nickname' => 'getNickname',
        'username' => 'getUsername',
        'target' => 'getTarget',
        'avatarUrl' => 'getAvatarUrl',
        'email' => 'getEmail',
        'isEnterpriseMember' => 'getIsEnterpriseMember',
        'isHistoryMember' => 'getIsHistoryMember',
        'accessLevel' => 'getAccessLevel',
        'accessLevelIdent' => 'getAccessLevelIdent',
        'isBlocked' => 'getIsBlocked',
        'isMyself' => 'getIsMyself',
        'projectAccess' => 'getProjectAccess',
        'projectAccessName' => 'getProjectAccessName',
        'projectCreator' => 'getProjectCreator',
        'projectOwner' => 'getProjectOwner',
        'joinAt' => 'getJoinAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['avatarUrl'] = isset($data['avatarUrl']) ? $data['avatarUrl'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['isEnterpriseMember'] = isset($data['isEnterpriseMember']) ? $data['isEnterpriseMember'] : null;
        $this->container['isHistoryMember'] = isset($data['isHistoryMember']) ? $data['isHistoryMember'] : null;
        $this->container['accessLevel'] = isset($data['accessLevel']) ? $data['accessLevel'] : null;
        $this->container['accessLevelIdent'] = isset($data['accessLevelIdent']) ? $data['accessLevelIdent'] : null;
        $this->container['isBlocked'] = isset($data['isBlocked']) ? $data['isBlocked'] : null;
        $this->container['isMyself'] = isset($data['isMyself']) ? $data['isMyself'] : null;
        $this->container['projectAccess'] = isset($data['projectAccess']) ? $data['projectAccess'] : null;
        $this->container['projectAccessName'] = isset($data['projectAccessName']) ? $data['projectAccessName'] : null;
        $this->container['projectCreator'] = isset($data['projectCreator']) ? $data['projectCreator'] : null;
        $this->container['projectOwner'] = isset($data['projectOwner']) ? $data['projectOwner'] : null;
        $this->container['joinAt'] = isset($data['joinAt']) ? $data['joinAt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 用户 id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 用户名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname 用户昵称
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username 用户个性域名
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string $target 跳转类型
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets avatarUrl
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatarUrl'];
    }

    /**
     * Sets avatarUrl
     *
     * @param string $avatarUrl 用户头像链接
     *
     * @return $this
     */
    public function setAvatarUrl($avatarUrl)
    {
        $this->container['avatarUrl'] = $avatarUrl;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email 用户邮箱
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets isEnterpriseMember
     *
     * @return bool
     */
    public function getIsEnterpriseMember()
    {
        return $this->container['isEnterpriseMember'];
    }

    /**
     * Sets isEnterpriseMember
     *
     * @param bool $isEnterpriseMember 是否是企业成员
     *
     * @return $this
     */
    public function setIsEnterpriseMember($isEnterpriseMember)
    {
        $this->container['isEnterpriseMember'] = $isEnterpriseMember;

        return $this;
    }

    /**
     * Gets isHistoryMember
     *
     * @return bool
     */
    public function getIsHistoryMember()
    {
        return $this->container['isHistoryMember'];
    }

    /**
     * Sets isHistoryMember
     *
     * @param bool $isHistoryMember 是否是已离职成员
     *
     * @return $this
     */
    public function setIsHistoryMember($isHistoryMember)
    {
        $this->container['isHistoryMember'] = $isHistoryMember;

        return $this;
    }

    /**
     * Gets accessLevel
     *
     * @return string
     */
    public function getAccessLevel()
    {
        return $this->container['accessLevel'];
    }

    /**
     * Sets accessLevel
     *
     * @param string $accessLevel 用户企业角色名称
     *
     * @return $this
     */
    public function setAccessLevel($accessLevel)
    {
        $this->container['accessLevel'] = $accessLevel;

        return $this;
    }

    /**
     * Gets accessLevelIdent
     *
     * @return string
     */
    public function getAccessLevelIdent()
    {
        return $this->container['accessLevelIdent'];
    }

    /**
     * Sets accessLevelIdent
     *
     * @param string $accessLevelIdent 用户企业角色ident
     *
     * @return $this
     */
    public function setAccessLevelIdent($accessLevelIdent)
    {
        $this->container['accessLevelIdent'] = $accessLevelIdent;

        return $this;
    }

    /**
     * Gets isBlocked
     *
     * @return bool
     */
    public function getIsBlocked()
    {
        return $this->container['isBlocked'];
    }

    /**
     * Sets isBlocked
     *
     * @param bool $isBlocked 是否被锁定
     *
     * @return $this
     */
    public function setIsBlocked($isBlocked)
    {
        $this->container['isBlocked'] = $isBlocked;

        return $this;
    }

    /**
     * Gets isMyself
     *
     * @return bool
     */
    public function getIsMyself()
    {
        return $this->container['isMyself'];
    }

    /**
     * Sets isMyself
     *
     * @param bool $isMyself 是否是自己
     *
     * @return $this
     */
    public function setIsMyself($isMyself)
    {
        $this->container['isMyself'] = $isMyself;

        return $this;
    }

    /**
     * Gets projectAccess
     *
     * @return string
     */
    public function getProjectAccess()
    {
        return $this->container['projectAccess'];
    }

    /**
     * Sets projectAccess
     *
     * @param string $projectAccess 用户在仓库中的级别
     *
     * @return $this
     */
    public function setProjectAccess($projectAccess)
    {
        $this->container['projectAccess'] = $projectAccess;

        return $this;
    }

    /**
     * Gets projectAccessName
     *
     * @return string
     */
    public function getProjectAccessName()
    {
        return $this->container['projectAccessName'];
    }

    /**
     * Sets projectAccessName
     *
     * @param string $projectAccessName 用户在仓库中的级别名称
     *
     * @return $this
     */
    public function setProjectAccessName($projectAccessName)
    {
        $this->container['projectAccessName'] = $projectAccessName;

        return $this;
    }

    /**
     * Gets projectCreator
     *
     * @return bool
     */
    public function getProjectCreator()
    {
        return $this->container['projectCreator'];
    }

    /**
     * Sets projectCreator
     *
     * @param bool $projectCreator 是否是仓库创建者
     *
     * @return $this
     */
    public function setProjectCreator($projectCreator)
    {
        $this->container['projectCreator'] = $projectCreator;

        return $this;
    }

    /**
     * Gets projectOwner
     *
     * @return bool
     */
    public function getProjectOwner()
    {
        return $this->container['projectOwner'];
    }

    /**
     * Sets projectOwner
     *
     * @param bool $projectOwner 是否是仓库拥有者
     *
     * @return $this
     */
    public function setProjectOwner($projectOwner)
    {
        $this->container['projectOwner'] = $projectOwner;

        return $this;
    }

    /**
     * Gets joinAt
     *
     * @return string
     */
    public function getJoinAt()
    {
        return $this->container['joinAt'];
    }

    /**
     * Sets joinAt
     *
     * @param string $joinAt 加入时间
     *
     * @return $this
     */
    public function setJoinAt($joinAt)
    {
        $this->container['joinAt'] = $joinAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


