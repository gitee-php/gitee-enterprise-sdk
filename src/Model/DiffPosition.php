<?php
/**
 * DiffPosition
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * DiffPosition Class Doc Comment
 *
 * @category Class
 * @description 获取 Pull Request 评论引用的代码片段
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiffPosition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiffPosition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diffPositionId' => 'int',
        'statistic' => 'string',
        'head' => 'string',
        'content' => 'string',
        'resolvedUser' => 'string',
        'author' => 'string',
        'resolvedState' => 'bool',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diffPositionId' => 'int32',
        'statistic' => null,
        'head' => null,
        'content' => null,
        'resolvedUser' => null,
        'author' => null,
        'resolvedState' => null,
        'updatedAt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diffPositionId' => 'diff_position_id',
        'statistic' => 'statistic',
        'head' => 'head',
        'content' => 'content',
        'resolvedUser' => 'resolved_user',
        'author' => 'author',
        'resolvedState' => 'resolved_state',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diffPositionId' => 'setDiffPositionId',
        'statistic' => 'setStatistic',
        'head' => 'setHead',
        'content' => 'setContent',
        'resolvedUser' => 'setResolvedUser',
        'author' => 'setAuthor',
        'resolvedState' => 'setResolvedState',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diffPositionId' => 'getDiffPositionId',
        'statistic' => 'getStatistic',
        'head' => 'getHead',
        'content' => 'getContent',
        'resolvedUser' => 'getResolvedUser',
        'author' => 'getAuthor',
        'resolvedState' => 'getResolvedState',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diffPositionId'] = isset($data['diffPositionId']) ? $data['diffPositionId'] : null;
        $this->container['statistic'] = isset($data['statistic']) ? $data['statistic'] : null;
        $this->container['head'] = isset($data['head']) ? $data['head'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['resolvedUser'] = isset($data['resolvedUser']) ? $data['resolvedUser'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['resolvedState'] = isset($data['resolvedState']) ? $data['resolvedState'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diffPositionId
     *
     * @return int
     */
    public function getDiffPositionId()
    {
        return $this->container['diffPositionId'];
    }

    /**
     * Sets diffPositionId
     *
     * @param int $diffPositionId 评论引用的代码块id
     *
     * @return $this
     */
    public function setDiffPositionId($diffPositionId)
    {
        $this->container['diffPositionId'] = $diffPositionId;

        return $this;
    }

    /**
     * Gets statistic
     *
     * @return string
     */
    public function getStatistic()
    {
        return $this->container['statistic'];
    }

    /**
     * Sets statistic
     *
     * @param string $statistic diff 统计
     *
     * @return $this
     */
    public function setStatistic($statistic)
    {
        $this->container['statistic'] = $statistic;

        return $this;
    }

    /**
     * Gets head
     *
     * @return string
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param string $head diff head
     *
     * @return $this
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content diff 内容
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets resolvedUser
     *
     * @return string
     */
    public function getResolvedUser()
    {
        return $this->container['resolvedUser'];
    }

    /**
     * Sets resolvedUser
     *
     * @param string $resolvedUser 解决人
     *
     * @return $this
     */
    public function setResolvedUser($resolvedUser)
    {
        $this->container['resolvedUser'] = $resolvedUser;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author 解决人
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets resolvedState
     *
     * @return bool
     */
    public function getResolvedState()
    {
        return $this->container['resolvedState'];
    }

    /**
     * Sets resolvedState
     *
     * @param bool $resolvedState 评论解决状态
     *
     * @return $this
     */
    public function setResolvedState($resolvedState)
    {
        $this->container['resolvedState'] = $resolvedState;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt 最近变动时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


