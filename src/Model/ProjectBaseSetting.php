<?php
/**
 * ProjectBaseSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectBaseSetting Class Doc Comment
 *
 * @category Class
 * @description 更新仓库设置
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectBaseSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectBaseSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'path' => 'string',
        'pathWithNamespace' => 'string',
        'public' => 'string',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'isGvp' => 'bool',
        'forkEnabled' => 'bool',
        'nameWithNamespace' => 'string',
        'description' => 'string',
        'homepage' => 'string',
        'langId' => 'string',
        'status' => 'string',
        'defaultBranch' => 'string',
        'outsourced' => 'bool',
        'creator' => '\GiteeEnterprise\Model\UserWithRemark',
        'programs' => '\GiteeEnterprise\Model\Program',
        'canComment' => 'bool',
        'issueComment' => 'bool',
        'issuesEnabled' => 'bool',
        'securityHoleEnabled' => 'bool',
        'onlineEditEnabled' => 'bool',
        'pullRequestsEnabled' => 'bool',
        'wikiEnabled' => 'bool',
        'lightweightPrEnabled' => 'bool',
        'prMasterOnly' => 'bool',
        'forbidForcePush' => 'bool',
        'importUrl' => 'bool',
        'forbidForceSync' => 'bool',
        'svnEnabled' => 'bool',
        'canReadonly' => 'bool',
        'enterpriseForbidsSvn' => 'bool',
        'parent' => '\GiteeEnterprise\Model\Project',
        'templateEnabled' => 'bool',
        'giteeGoEnabled' => 'bool',
        'programPipelineEnabled' => 'bool',
        'isEmptyRepo' => 'bool',
        'visible' => 'bool',
        'reviewing' => 'bool',
        'mergeEnabled' => 'bool',
        'squashEnabled' => 'bool',
        'rebaseEnabled' => 'bool',
        'defaultMergeMethod' => 'string',
        'projectSyncTimeSetting' => '\GiteeEnterprise\Model\ProjectSyncSetting',
        'syncProjectAccountInfos' => 'object',
        'branchAuthorisationEnabled' => 'bool',
        'parentBranchAuthorisationEnabled' => 'bool',
        'customGitHook' => 'bool',
        'prCommitReviewCheckEnabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'path' => null,
        'pathWithNamespace' => null,
        'public' => null,
        'createdAt' => 'DateTime',
        'updatedAt' => 'DateTime',
        'isGvp' => null,
        'forkEnabled' => null,
        'nameWithNamespace' => null,
        'description' => null,
        'homepage' => null,
        'langId' => null,
        'status' => null,
        'defaultBranch' => null,
        'outsourced' => null,
        'creator' => null,
        'programs' => null,
        'canComment' => null,
        'issueComment' => null,
        'issuesEnabled' => null,
        'securityHoleEnabled' => null,
        'onlineEditEnabled' => null,
        'pullRequestsEnabled' => null,
        'wikiEnabled' => null,
        'lightweightPrEnabled' => null,
        'prMasterOnly' => null,
        'forbidForcePush' => null,
        'importUrl' => null,
        'forbidForceSync' => null,
        'svnEnabled' => null,
        'canReadonly' => null,
        'enterpriseForbidsSvn' => null,
        'parent' => null,
        'templateEnabled' => null,
        'giteeGoEnabled' => null,
        'programPipelineEnabled' => null,
        'isEmptyRepo' => null,
        'visible' => null,
        'reviewing' => null,
        'mergeEnabled' => null,
        'squashEnabled' => null,
        'rebaseEnabled' => null,
        'defaultMergeMethod' => null,
        'projectSyncTimeSetting' => null,
        'syncProjectAccountInfos' => null,
        'branchAuthorisationEnabled' => null,
        'parentBranchAuthorisationEnabled' => null,
        'customGitHook' => null,
        'prCommitReviewCheckEnabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'path' => 'path',
        'pathWithNamespace' => 'path_with_namespace',
        'public' => 'public',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'isGvp' => 'is_gvp',
        'forkEnabled' => 'fork_enabled',
        'nameWithNamespace' => 'name_with_namespace',
        'description' => 'description',
        'homepage' => 'homepage',
        'langId' => 'lang_id',
        'status' => 'status',
        'defaultBranch' => 'default_branch',
        'outsourced' => 'outsourced',
        'creator' => 'creator',
        'programs' => 'programs',
        'canComment' => 'can_comment',
        'issueComment' => 'issue_comment',
        'issuesEnabled' => 'issues_enabled',
        'securityHoleEnabled' => 'security_hole_enabled',
        'onlineEditEnabled' => 'online_edit_enabled',
        'pullRequestsEnabled' => 'pull_requests_enabled',
        'wikiEnabled' => 'wiki_enabled',
        'lightweightPrEnabled' => 'lightweight_pr_enabled',
        'prMasterOnly' => 'pr_master_only',
        'forbidForcePush' => 'forbid_force_push',
        'importUrl' => 'import_url',
        'forbidForceSync' => 'forbid_force_sync',
        'svnEnabled' => 'svn_enabled',
        'canReadonly' => 'can_readonly',
        'enterpriseForbidsSvn' => 'enterprise_forbids_svn',
        'parent' => 'parent',
        'templateEnabled' => 'template_enabled',
        'giteeGoEnabled' => 'gitee_go_enabled',
        'programPipelineEnabled' => 'program_pipeline_enabled',
        'isEmptyRepo' => 'is_empty_repo',
        'visible' => 'visible',
        'reviewing' => 'reviewing',
        'mergeEnabled' => 'merge_enabled',
        'squashEnabled' => 'squash_enabled',
        'rebaseEnabled' => 'rebase_enabled',
        'defaultMergeMethod' => 'default_merge_method',
        'projectSyncTimeSetting' => 'project_sync_time_setting',
        'syncProjectAccountInfos' => 'sync_project_account_infos',
        'branchAuthorisationEnabled' => 'branch_authorisation_enabled',
        'parentBranchAuthorisationEnabled' => 'parent_branch_authorisation_enabled',
        'customGitHook' => 'custom_git_hook',
        'prCommitReviewCheckEnabled' => 'pr_commit_review_check_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'path' => 'setPath',
        'pathWithNamespace' => 'setPathWithNamespace',
        'public' => 'setPublic',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'isGvp' => 'setIsGvp',
        'forkEnabled' => 'setForkEnabled',
        'nameWithNamespace' => 'setNameWithNamespace',
        'description' => 'setDescription',
        'homepage' => 'setHomepage',
        'langId' => 'setLangId',
        'status' => 'setStatus',
        'defaultBranch' => 'setDefaultBranch',
        'outsourced' => 'setOutsourced',
        'creator' => 'setCreator',
        'programs' => 'setPrograms',
        'canComment' => 'setCanComment',
        'issueComment' => 'setIssueComment',
        'issuesEnabled' => 'setIssuesEnabled',
        'securityHoleEnabled' => 'setSecurityHoleEnabled',
        'onlineEditEnabled' => 'setOnlineEditEnabled',
        'pullRequestsEnabled' => 'setPullRequestsEnabled',
        'wikiEnabled' => 'setWikiEnabled',
        'lightweightPrEnabled' => 'setLightweightPrEnabled',
        'prMasterOnly' => 'setPrMasterOnly',
        'forbidForcePush' => 'setForbidForcePush',
        'importUrl' => 'setImportUrl',
        'forbidForceSync' => 'setForbidForceSync',
        'svnEnabled' => 'setSvnEnabled',
        'canReadonly' => 'setCanReadonly',
        'enterpriseForbidsSvn' => 'setEnterpriseForbidsSvn',
        'parent' => 'setParent',
        'templateEnabled' => 'setTemplateEnabled',
        'giteeGoEnabled' => 'setGiteeGoEnabled',
        'programPipelineEnabled' => 'setProgramPipelineEnabled',
        'isEmptyRepo' => 'setIsEmptyRepo',
        'visible' => 'setVisible',
        'reviewing' => 'setReviewing',
        'mergeEnabled' => 'setMergeEnabled',
        'squashEnabled' => 'setSquashEnabled',
        'rebaseEnabled' => 'setRebaseEnabled',
        'defaultMergeMethod' => 'setDefaultMergeMethod',
        'projectSyncTimeSetting' => 'setProjectSyncTimeSetting',
        'syncProjectAccountInfos' => 'setSyncProjectAccountInfos',
        'branchAuthorisationEnabled' => 'setBranchAuthorisationEnabled',
        'parentBranchAuthorisationEnabled' => 'setParentBranchAuthorisationEnabled',
        'customGitHook' => 'setCustomGitHook',
        'prCommitReviewCheckEnabled' => 'setPrCommitReviewCheckEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'path' => 'getPath',
        'pathWithNamespace' => 'getPathWithNamespace',
        'public' => 'getPublic',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'isGvp' => 'getIsGvp',
        'forkEnabled' => 'getForkEnabled',
        'nameWithNamespace' => 'getNameWithNamespace',
        'description' => 'getDescription',
        'homepage' => 'getHomepage',
        'langId' => 'getLangId',
        'status' => 'getStatus',
        'defaultBranch' => 'getDefaultBranch',
        'outsourced' => 'getOutsourced',
        'creator' => 'getCreator',
        'programs' => 'getPrograms',
        'canComment' => 'getCanComment',
        'issueComment' => 'getIssueComment',
        'issuesEnabled' => 'getIssuesEnabled',
        'securityHoleEnabled' => 'getSecurityHoleEnabled',
        'onlineEditEnabled' => 'getOnlineEditEnabled',
        'pullRequestsEnabled' => 'getPullRequestsEnabled',
        'wikiEnabled' => 'getWikiEnabled',
        'lightweightPrEnabled' => 'getLightweightPrEnabled',
        'prMasterOnly' => 'getPrMasterOnly',
        'forbidForcePush' => 'getForbidForcePush',
        'importUrl' => 'getImportUrl',
        'forbidForceSync' => 'getForbidForceSync',
        'svnEnabled' => 'getSvnEnabled',
        'canReadonly' => 'getCanReadonly',
        'enterpriseForbidsSvn' => 'getEnterpriseForbidsSvn',
        'parent' => 'getParent',
        'templateEnabled' => 'getTemplateEnabled',
        'giteeGoEnabled' => 'getGiteeGoEnabled',
        'programPipelineEnabled' => 'getProgramPipelineEnabled',
        'isEmptyRepo' => 'getIsEmptyRepo',
        'visible' => 'getVisible',
        'reviewing' => 'getReviewing',
        'mergeEnabled' => 'getMergeEnabled',
        'squashEnabled' => 'getSquashEnabled',
        'rebaseEnabled' => 'getRebaseEnabled',
        'defaultMergeMethod' => 'getDefaultMergeMethod',
        'projectSyncTimeSetting' => 'getProjectSyncTimeSetting',
        'syncProjectAccountInfos' => 'getSyncProjectAccountInfos',
        'branchAuthorisationEnabled' => 'getBranchAuthorisationEnabled',
        'parentBranchAuthorisationEnabled' => 'getParentBranchAuthorisationEnabled',
        'customGitHook' => 'getCustomGitHook',
        'prCommitReviewCheckEnabled' => 'getPrCommitReviewCheckEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['pathWithNamespace'] = isset($data['pathWithNamespace']) ? $data['pathWithNamespace'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['isGvp'] = isset($data['isGvp']) ? $data['isGvp'] : null;
        $this->container['forkEnabled'] = isset($data['forkEnabled']) ? $data['forkEnabled'] : null;
        $this->container['nameWithNamespace'] = isset($data['nameWithNamespace']) ? $data['nameWithNamespace'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['langId'] = isset($data['langId']) ? $data['langId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['defaultBranch'] = isset($data['defaultBranch']) ? $data['defaultBranch'] : null;
        $this->container['outsourced'] = isset($data['outsourced']) ? $data['outsourced'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['programs'] = isset($data['programs']) ? $data['programs'] : null;
        $this->container['canComment'] = isset($data['canComment']) ? $data['canComment'] : null;
        $this->container['issueComment'] = isset($data['issueComment']) ? $data['issueComment'] : null;
        $this->container['issuesEnabled'] = isset($data['issuesEnabled']) ? $data['issuesEnabled'] : null;
        $this->container['securityHoleEnabled'] = isset($data['securityHoleEnabled']) ? $data['securityHoleEnabled'] : null;
        $this->container['onlineEditEnabled'] = isset($data['onlineEditEnabled']) ? $data['onlineEditEnabled'] : null;
        $this->container['pullRequestsEnabled'] = isset($data['pullRequestsEnabled']) ? $data['pullRequestsEnabled'] : null;
        $this->container['wikiEnabled'] = isset($data['wikiEnabled']) ? $data['wikiEnabled'] : null;
        $this->container['lightweightPrEnabled'] = isset($data['lightweightPrEnabled']) ? $data['lightweightPrEnabled'] : null;
        $this->container['prMasterOnly'] = isset($data['prMasterOnly']) ? $data['prMasterOnly'] : null;
        $this->container['forbidForcePush'] = isset($data['forbidForcePush']) ? $data['forbidForcePush'] : null;
        $this->container['importUrl'] = isset($data['importUrl']) ? $data['importUrl'] : null;
        $this->container['forbidForceSync'] = isset($data['forbidForceSync']) ? $data['forbidForceSync'] : null;
        $this->container['svnEnabled'] = isset($data['svnEnabled']) ? $data['svnEnabled'] : null;
        $this->container['canReadonly'] = isset($data['canReadonly']) ? $data['canReadonly'] : null;
        $this->container['enterpriseForbidsSvn'] = isset($data['enterpriseForbidsSvn']) ? $data['enterpriseForbidsSvn'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['templateEnabled'] = isset($data['templateEnabled']) ? $data['templateEnabled'] : null;
        $this->container['giteeGoEnabled'] = isset($data['giteeGoEnabled']) ? $data['giteeGoEnabled'] : null;
        $this->container['programPipelineEnabled'] = isset($data['programPipelineEnabled']) ? $data['programPipelineEnabled'] : null;
        $this->container['isEmptyRepo'] = isset($data['isEmptyRepo']) ? $data['isEmptyRepo'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['reviewing'] = isset($data['reviewing']) ? $data['reviewing'] : null;
        $this->container['mergeEnabled'] = isset($data['mergeEnabled']) ? $data['mergeEnabled'] : null;
        $this->container['squashEnabled'] = isset($data['squashEnabled']) ? $data['squashEnabled'] : null;
        $this->container['rebaseEnabled'] = isset($data['rebaseEnabled']) ? $data['rebaseEnabled'] : null;
        $this->container['defaultMergeMethod'] = isset($data['defaultMergeMethod']) ? $data['defaultMergeMethod'] : null;
        $this->container['projectSyncTimeSetting'] = isset($data['projectSyncTimeSetting']) ? $data['projectSyncTimeSetting'] : null;
        $this->container['syncProjectAccountInfos'] = isset($data['syncProjectAccountInfos']) ? $data['syncProjectAccountInfos'] : null;
        $this->container['branchAuthorisationEnabled'] = isset($data['branchAuthorisationEnabled']) ? $data['branchAuthorisationEnabled'] : null;
        $this->container['parentBranchAuthorisationEnabled'] = isset($data['parentBranchAuthorisationEnabled']) ? $data['parentBranchAuthorisationEnabled'] : null;
        $this->container['customGitHook'] = isset($data['customGitHook']) ? $data['customGitHook'] : null;
        $this->container['prCommitReviewCheckEnabled'] = isset($data['prCommitReviewCheckEnabled']) ? $data['prCommitReviewCheckEnabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 仓库ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 仓库名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 仓库路径
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets pathWithNamespace
     *
     * @return string
     */
    public function getPathWithNamespace()
    {
        return $this->container['pathWithNamespace'];
    }

    /**
     * Sets pathWithNamespace
     *
     * @param string $pathWithNamespace namespace/path
     *
     * @return $this
     */
    public function setPathWithNamespace($pathWithNamespace)
    {
        $this->container['pathWithNamespace'] = $pathWithNamespace;

        return $this;
    }

    /**
     * Gets public
     *
     * @return string
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param string $public 仓库开源属性，0:私有，1:开源，2:内部开源
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt 仓库创建时间
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt 仓库更新时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets isGvp
     *
     * @return bool
     */
    public function getIsGvp()
    {
        return $this->container['isGvp'];
    }

    /**
     * Sets isGvp
     *
     * @param bool $isGvp 是否为GVP仓库
     *
     * @return $this
     */
    public function setIsGvp($isGvp)
    {
        $this->container['isGvp'] = $isGvp;

        return $this;
    }

    /**
     * Gets forkEnabled
     *
     * @return bool
     */
    public function getForkEnabled()
    {
        return $this->container['forkEnabled'];
    }

    /**
     * Sets forkEnabled
     *
     * @param bool $forkEnabled 是否允许仓库被Fork
     *
     * @return $this
     */
    public function setForkEnabled($forkEnabled)
    {
        $this->container['forkEnabled'] = $forkEnabled;

        return $this;
    }

    /**
     * Gets nameWithNamespace
     *
     * @return string
     */
    public function getNameWithNamespace()
    {
        return $this->container['nameWithNamespace'];
    }

    /**
     * Sets nameWithNamespace
     *
     * @param string $nameWithNamespace namespace_name/path
     *
     * @return $this
     */
    public function setNameWithNamespace($nameWithNamespace)
    {
        $this->container['nameWithNamespace'] = $nameWithNamespace;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 仓库介绍
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage 仓库主页
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets langId
     *
     * @return string
     */
    public function getLangId()
    {
        return $this->container['langId'];
    }

    /**
     * Sets langId
     *
     * @param string $langId 仓库语言
     *
     * @return $this
     */
    public function setLangId($langId)
    {
        $this->container['langId'] = $langId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 仓库状态(已关闭/开发中/已完结/维护中)
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets defaultBranch
     *
     * @return string
     */
    public function getDefaultBranch()
    {
        return $this->container['defaultBranch'];
    }

    /**
     * Sets defaultBranch
     *
     * @param string $defaultBranch 默认分支
     *
     * @return $this
     */
    public function setDefaultBranch($defaultBranch)
    {
        $this->container['defaultBranch'] = $defaultBranch;

        return $this;
    }

    /**
     * Gets outsourced
     *
     * @return bool
     */
    public function getOutsourced()
    {
        return $this->container['outsourced'];
    }

    /**
     * Sets outsourced
     *
     * @param bool $outsourced 仓库类型，0内部，1外包
     *
     * @return $this
     */
    public function setOutsourced($outsourced)
    {
        $this->container['outsourced'] = $outsourced;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $creator 仓库负责人
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \GiteeEnterprise\Model\Program
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \GiteeEnterprise\Model\Program $programs programs
     *
     * @return $this
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets canComment
     *
     * @return bool
     */
    public function getCanComment()
    {
        return $this->container['canComment'];
    }

    /**
     * Sets canComment
     *
     * @param bool $canComment 允许用户对仓库进行评论
     *
     * @return $this
     */
    public function setCanComment($canComment)
    {
        $this->container['canComment'] = $canComment;

        return $this;
    }

    /**
     * Gets issueComment
     *
     * @return bool
     */
    public function getIssueComment()
    {
        return $this->container['issueComment'];
    }

    /**
     * Sets issueComment
     *
     * @param bool $issueComment 允许用户对\"关闭\"状态的Issues进行评论
     *
     * @return $this
     */
    public function setIssueComment($issueComment)
    {
        $this->container['issueComment'] = $issueComment;

        return $this;
    }

    /**
     * Gets issuesEnabled
     *
     * @return bool
     */
    public function getIssuesEnabled()
    {
        return $this->container['issuesEnabled'];
    }

    /**
     * Sets issuesEnabled
     *
     * @param bool $issuesEnabled 轻量级的issue跟踪系统
     *
     * @return $this
     */
    public function setIssuesEnabled($issuesEnabled)
    {
        $this->container['issuesEnabled'] = $issuesEnabled;

        return $this;
    }

    /**
     * Gets securityHoleEnabled
     *
     * @return bool
     */
    public function getSecurityHoleEnabled()
    {
        return $this->container['securityHoleEnabled'];
    }

    /**
     * Sets securityHoleEnabled
     *
     * @param bool $securityHoleEnabled 允许用户创建涉及敏感信息的Issue，提交后不公开此Issue（可见范围：仓库成员、企业成员）
     *
     * @return $this
     */
    public function setSecurityHoleEnabled($securityHoleEnabled)
    {
        $this->container['securityHoleEnabled'] = $securityHoleEnabled;

        return $this;
    }

    /**
     * Gets onlineEditEnabled
     *
     * @return bool
     */
    public function getOnlineEditEnabled()
    {
        return $this->container['onlineEditEnabled'];
    }

    /**
     * Sets onlineEditEnabled
     *
     * @param bool $onlineEditEnabled 是否允许仓库文件在线编辑
     *
     * @return $this
     */
    public function setOnlineEditEnabled($onlineEditEnabled)
    {
        $this->container['onlineEditEnabled'] = $onlineEditEnabled;

        return $this;
    }

    /**
     * Gets pullRequestsEnabled
     *
     * @return bool
     */
    public function getPullRequestsEnabled()
    {
        return $this->container['pullRequestsEnabled'];
    }

    /**
     * Sets pullRequestsEnabled
     *
     * @param bool $pullRequestsEnabled 接受pull request，协作开发
     *
     * @return $this
     */
    public function setPullRequestsEnabled($pullRequestsEnabled)
    {
        $this->container['pullRequestsEnabled'] = $pullRequestsEnabled;

        return $this;
    }

    /**
     * Gets wikiEnabled
     *
     * @return bool
     */
    public function getWikiEnabled()
    {
        return $this->container['wikiEnabled'];
    }

    /**
     * Sets wikiEnabled
     *
     * @param bool $wikiEnabled 可以编写文档
     *
     * @return $this
     */
    public function setWikiEnabled($wikiEnabled)
    {
        $this->container['wikiEnabled'] = $wikiEnabled;

        return $this;
    }

    /**
     * Gets lightweightPrEnabled
     *
     * @return bool
     */
    public function getLightweightPrEnabled()
    {
        return $this->container['lightweightPrEnabled'];
    }

    /**
     * Sets lightweightPrEnabled
     *
     * @param bool $lightweightPrEnabled 接受轻量级 Pull Request（用户可以发起轻量级 Pull Request 而无需 Fork 仓库）
     *
     * @return $this
     */
    public function setLightweightPrEnabled($lightweightPrEnabled)
    {
        $this->container['lightweightPrEnabled'] = $lightweightPrEnabled;

        return $this;
    }

    /**
     * Gets prMasterOnly
     *
     * @return bool
     */
    public function getPrMasterOnly()
    {
        return $this->container['prMasterOnly'];
    }

    /**
     * Sets prMasterOnly
     *
     * @param bool $prMasterOnly 开启的Pull Request，仅管理员、审查者、测试者可见
     *
     * @return $this
     */
    public function setPrMasterOnly($prMasterOnly)
    {
        $this->container['prMasterOnly'] = $prMasterOnly;

        return $this;
    }

    /**
     * Gets forbidForcePush
     *
     * @return bool
     */
    public function getForbidForcePush()
    {
        return $this->container['forbidForcePush'];
    }

    /**
     * Sets forbidForcePush
     *
     * @param bool $forbidForcePush 禁止强制推送
     *
     * @return $this
     */
    public function setForbidForcePush($forbidForcePush)
    {
        $this->container['forbidForcePush'] = $forbidForcePush;

        return $this;
    }

    /**
     * Gets importUrl
     *
     * @return bool
     */
    public function getImportUrl()
    {
        return $this->container['importUrl'];
    }

    /**
     * Sets importUrl
     *
     * @param bool $importUrl 仓库远程地址(用于强制同步)
     *
     * @return $this
     */
    public function setImportUrl($importUrl)
    {
        $this->container['importUrl'] = $importUrl;

        return $this;
    }

    /**
     * Gets forbidForceSync
     *
     * @return bool
     */
    public function getForbidForceSync()
    {
        return $this->container['forbidForceSync'];
    }

    /**
     * Sets forbidForceSync
     *
     * @param bool $forbidForceSync 禁止仓库同步(禁止从仓库远程地址或Fork的源仓库强制同步代码，禁止后将关闭同步按钮)
     *
     * @return $this
     */
    public function setForbidForceSync($forbidForceSync)
    {
        $this->container['forbidForceSync'] = $forbidForceSync;

        return $this;
    }

    /**
     * Gets svnEnabled
     *
     * @return bool
     */
    public function getSvnEnabled()
    {
        return $this->container['svnEnabled'];
    }

    /**
     * Sets svnEnabled
     *
     * @param bool $svnEnabled 使用SVN管理您的仓库
     *
     * @return $this
     */
    public function setSvnEnabled($svnEnabled)
    {
        $this->container['svnEnabled'] = $svnEnabled;

        return $this;
    }

    /**
     * Gets canReadonly
     *
     * @return bool
     */
    public function getCanReadonly()
    {
        return $this->container['canReadonly'];
    }

    /**
     * Sets canReadonly
     *
     * @param bool $canReadonly 开启文件/文件夹只读功能(只读文件和SVN支持无法同时启用)
     *
     * @return $this
     */
    public function setCanReadonly($canReadonly)
    {
        $this->container['canReadonly'] = $canReadonly;

        return $this;
    }

    /**
     * Gets enterpriseForbidsSvn
     *
     * @return bool
     */
    public function getEnterpriseForbidsSvn()
    {
        return $this->container['enterpriseForbidsSvn'];
    }

    /**
     * Sets enterpriseForbidsSvn
     *
     * @param bool $enterpriseForbidsSvn 企业是否禁用SVN
     *
     * @return $this
     */
    public function setEnterpriseForbidsSvn($enterpriseForbidsSvn)
    {
        $this->container['enterpriseForbidsSvn'] = $enterpriseForbidsSvn;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \GiteeEnterprise\Model\Project
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \GiteeEnterprise\Model\Project $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets templateEnabled
     *
     * @return bool
     */
    public function getTemplateEnabled()
    {
        return $this->container['templateEnabled'];
    }

    /**
     * Sets templateEnabled
     *
     * @param bool $templateEnabled 是否为模板仓库
     *
     * @return $this
     */
    public function setTemplateEnabled($templateEnabled)
    {
        $this->container['templateEnabled'] = $templateEnabled;

        return $this;
    }

    /**
     * Gets giteeGoEnabled
     *
     * @return bool
     */
    public function getGiteeGoEnabled()
    {
        return $this->container['giteeGoEnabled'];
    }

    /**
     * Sets giteeGoEnabled
     *
     * @param bool $giteeGoEnabled 仓库是启用了GiteeGo
     *
     * @return $this
     */
    public function setGiteeGoEnabled($giteeGoEnabled)
    {
        $this->container['giteeGoEnabled'] = $giteeGoEnabled;

        return $this;
    }

    /**
     * Gets programPipelineEnabled
     *
     * @return bool
     */
    public function getProgramPipelineEnabled()
    {
        return $this->container['programPipelineEnabled'];
    }

    /**
     * Sets programPipelineEnabled
     *
     * @param bool $programPipelineEnabled 是否支持项目级流水线
     *
     * @return $this
     */
    public function setProgramPipelineEnabled($programPipelineEnabled)
    {
        $this->container['programPipelineEnabled'] = $programPipelineEnabled;

        return $this;
    }

    /**
     * Gets isEmptyRepo
     *
     * @return bool
     */
    public function getIsEmptyRepo()
    {
        return $this->container['isEmptyRepo'];
    }

    /**
     * Sets isEmptyRepo
     *
     * @param bool $isEmptyRepo 是否为空仓库
     *
     * @return $this
     */
    public function setIsEmptyRepo($isEmptyRepo)
    {
        $this->container['isEmptyRepo'] = $isEmptyRepo;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible 仓库可见性
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets reviewing
     *
     * @return bool
     */
    public function getReviewing()
    {
        return $this->container['reviewing'];
    }

    /**
     * Sets reviewing
     *
     * @param bool $reviewing 仓库审查状态
     *
     * @return $this
     */
    public function setReviewing($reviewing)
    {
        $this->container['reviewing'] = $reviewing;

        return $this;
    }

    /**
     * Gets mergeEnabled
     *
     * @return bool
     */
    public function getMergeEnabled()
    {
        return $this->container['mergeEnabled'];
    }

    /**
     * Sets mergeEnabled
     *
     * @param bool $mergeEnabled 是否开启 merge 合并选项
     *
     * @return $this
     */
    public function setMergeEnabled($mergeEnabled)
    {
        $this->container['mergeEnabled'] = $mergeEnabled;

        return $this;
    }

    /**
     * Gets squashEnabled
     *
     * @return bool
     */
    public function getSquashEnabled()
    {
        return $this->container['squashEnabled'];
    }

    /**
     * Sets squashEnabled
     *
     * @param bool $squashEnabled 是否开启 squash 合并选项
     *
     * @return $this
     */
    public function setSquashEnabled($squashEnabled)
    {
        $this->container['squashEnabled'] = $squashEnabled;

        return $this;
    }

    /**
     * Gets rebaseEnabled
     *
     * @return bool
     */
    public function getRebaseEnabled()
    {
        return $this->container['rebaseEnabled'];
    }

    /**
     * Sets rebaseEnabled
     *
     * @param bool $rebaseEnabled 是否开启 rebase 合并选项
     *
     * @return $this
     */
    public function setRebaseEnabled($rebaseEnabled)
    {
        $this->container['rebaseEnabled'] = $rebaseEnabled;

        return $this;
    }

    /**
     * Gets defaultMergeMethod
     *
     * @return string
     */
    public function getDefaultMergeMethod()
    {
        return $this->container['defaultMergeMethod'];
    }

    /**
     * Sets defaultMergeMethod
     *
     * @param string $defaultMergeMethod 选择默认合并 Pull Request 的方法，0表示merge（合并所有提交）、1表示squash（扁平化分支合并）和2表示rebase（变基并合并）。默认为0merge
     *
     * @return $this
     */
    public function setDefaultMergeMethod($defaultMergeMethod)
    {
        $this->container['defaultMergeMethod'] = $defaultMergeMethod;

        return $this;
    }

    /**
     * Gets projectSyncTimeSetting
     *
     * @return \GiteeEnterprise\Model\ProjectSyncSetting
     */
    public function getProjectSyncTimeSetting()
    {
        return $this->container['projectSyncTimeSetting'];
    }

    /**
     * Sets projectSyncTimeSetting
     *
     * @param \GiteeEnterprise\Model\ProjectSyncSetting $projectSyncTimeSetting 仓库同步设置
     *
     * @return $this
     */
    public function setProjectSyncTimeSetting($projectSyncTimeSetting)
    {
        $this->container['projectSyncTimeSetting'] = $projectSyncTimeSetting;

        return $this;
    }

    /**
     * Gets syncProjectAccountInfos
     *
     * @return object
     */
    public function getSyncProjectAccountInfos()
    {
        return $this->container['syncProjectAccountInfos'];
    }

    /**
     * Sets syncProjectAccountInfos
     *
     * @param object $syncProjectAccountInfos 账号信息
     *
     * @return $this
     */
    public function setSyncProjectAccountInfos($syncProjectAccountInfos)
    {
        $this->container['syncProjectAccountInfos'] = $syncProjectAccountInfos;

        return $this;
    }

    /**
     * Gets branchAuthorisationEnabled
     *
     * @return bool
     */
    public function getBranchAuthorisationEnabled()
    {
        return $this->container['branchAuthorisationEnabled'];
    }

    /**
     * Sets branchAuthorisationEnabled
     *
     * @param bool $branchAuthorisationEnabled 是否开启了分支权限
     *
     * @return $this
     */
    public function setBranchAuthorisationEnabled($branchAuthorisationEnabled)
    {
        $this->container['branchAuthorisationEnabled'] = $branchAuthorisationEnabled;

        return $this;
    }

    /**
     * Gets parentBranchAuthorisationEnabled
     *
     * @return bool
     */
    public function getParentBranchAuthorisationEnabled()
    {
        return $this->container['parentBranchAuthorisationEnabled'];
    }

    /**
     * Sets parentBranchAuthorisationEnabled
     *
     * @param bool $parentBranchAuthorisationEnabled 原仓库是否开启了分支权限
     *
     * @return $this
     */
    public function setParentBranchAuthorisationEnabled($parentBranchAuthorisationEnabled)
    {
        $this->container['parentBranchAuthorisationEnabled'] = $parentBranchAuthorisationEnabled;

        return $this;
    }

    /**
     * Gets customGitHook
     *
     * @return bool
     */
    public function getCustomGitHook()
    {
        return $this->container['customGitHook'];
    }

    /**
     * Sets customGitHook
     *
     * @param bool $customGitHook 是否开启自定义钩子
     *
     * @return $this
     */
    public function setCustomGitHook($customGitHook)
    {
        $this->container['customGitHook'] = $customGitHook;

        return $this;
    }

    /**
     * Gets prCommitReviewCheckEnabled
     *
     * @return bool
     */
    public function getPrCommitReviewCheckEnabled()
    {
        return $this->container['prCommitReviewCheckEnabled'];
    }

    /**
     * Sets prCommitReviewCheckEnabled
     *
     * @param bool $prCommitReviewCheckEnabled 是否开启 Commit Review
     *
     * @return $this
     */
    public function setPrCommitReviewCheckEnabled($prCommitReviewCheckEnabled)
    {
        $this->container['prCommitReviewCheckEnabled'] = $prCommitReviewCheckEnabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


