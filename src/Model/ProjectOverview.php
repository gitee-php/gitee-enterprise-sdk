<?php
/**
 * ProjectOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.333
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectOverview Class Doc Comment
 *
 * @category Class
 * @description 仓库概览信息
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectOverview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'path' => 'string',
        'pathWithNamespace' => 'string',
        'description' => 'string',
        'license' => 'string',
        'lang' => '\GiteeEnterprise\Model\ProjectTagBase',
        'cloneWays' => '\GiteeEnterprise\Model\ProjectCloneWaysBase',
        'openIssueCount' => 'int',
        'notFinishedIssueCount' => 'int',
        'closeIssueCount' => 'int',
        'totalPrCount' => 'int',
        'repoSize' => 'int',
        'wikiCount' => 'int',
        'attchmentCount' => 'int',
        'membersCount' => 'int',
        'repoSizeRefresh' => 'object',
        'namespace' => '\GiteeEnterprise\Model\ModelNamespace',
        'defaultBranch' => 'string',
        'homepage' => 'string',
        'isWaitFork' => 'bool',
        'template' => '\GiteeEnterprise\Model\Project',
        'canExecGiteeScan' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'path' => null,
        'pathWithNamespace' => null,
        'description' => null,
        'license' => null,
        'lang' => null,
        'cloneWays' => null,
        'openIssueCount' => 'int32',
        'notFinishedIssueCount' => 'int32',
        'closeIssueCount' => 'int32',
        'totalPrCount' => 'int32',
        'repoSize' => 'int32',
        'wikiCount' => 'int32',
        'attchmentCount' => 'int32',
        'membersCount' => 'int32',
        'repoSizeRefresh' => null,
        'namespace' => null,
        'defaultBranch' => null,
        'homepage' => null,
        'isWaitFork' => null,
        'template' => null,
        'canExecGiteeScan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'path' => 'path',
        'pathWithNamespace' => 'path_with_namespace',
        'description' => 'description',
        'license' => 'license',
        'lang' => 'lang',
        'cloneWays' => 'clone_ways',
        'openIssueCount' => 'open_issue_count',
        'notFinishedIssueCount' => 'not_finished_issue_count',
        'closeIssueCount' => 'close_issue_count',
        'totalPrCount' => 'total_pr_count',
        'repoSize' => 'repo_size',
        'wikiCount' => 'wiki_count',
        'attchmentCount' => 'attchment_count',
        'membersCount' => 'members_count',
        'repoSizeRefresh' => 'repo_size_refresh',
        'namespace' => 'namespace',
        'defaultBranch' => 'default_branch',
        'homepage' => 'homepage',
        'isWaitFork' => 'is_wait_fork',
        'template' => 'template',
        'canExecGiteeScan' => 'can_exec_gitee_scan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'path' => 'setPath',
        'pathWithNamespace' => 'setPathWithNamespace',
        'description' => 'setDescription',
        'license' => 'setLicense',
        'lang' => 'setLang',
        'cloneWays' => 'setCloneWays',
        'openIssueCount' => 'setOpenIssueCount',
        'notFinishedIssueCount' => 'setNotFinishedIssueCount',
        'closeIssueCount' => 'setCloseIssueCount',
        'totalPrCount' => 'setTotalPrCount',
        'repoSize' => 'setRepoSize',
        'wikiCount' => 'setWikiCount',
        'attchmentCount' => 'setAttchmentCount',
        'membersCount' => 'setMembersCount',
        'repoSizeRefresh' => 'setRepoSizeRefresh',
        'namespace' => 'setNamespace',
        'defaultBranch' => 'setDefaultBranch',
        'homepage' => 'setHomepage',
        'isWaitFork' => 'setIsWaitFork',
        'template' => 'setTemplate',
        'canExecGiteeScan' => 'setCanExecGiteeScan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'path' => 'getPath',
        'pathWithNamespace' => 'getPathWithNamespace',
        'description' => 'getDescription',
        'license' => 'getLicense',
        'lang' => 'getLang',
        'cloneWays' => 'getCloneWays',
        'openIssueCount' => 'getOpenIssueCount',
        'notFinishedIssueCount' => 'getNotFinishedIssueCount',
        'closeIssueCount' => 'getCloseIssueCount',
        'totalPrCount' => 'getTotalPrCount',
        'repoSize' => 'getRepoSize',
        'wikiCount' => 'getWikiCount',
        'attchmentCount' => 'getAttchmentCount',
        'membersCount' => 'getMembersCount',
        'repoSizeRefresh' => 'getRepoSizeRefresh',
        'namespace' => 'getNamespace',
        'defaultBranch' => 'getDefaultBranch',
        'homepage' => 'getHomepage',
        'isWaitFork' => 'getIsWaitFork',
        'template' => 'getTemplate',
        'canExecGiteeScan' => 'getCanExecGiteeScan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['pathWithNamespace'] = isset($data['pathWithNamespace']) ? $data['pathWithNamespace'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['cloneWays'] = isset($data['cloneWays']) ? $data['cloneWays'] : null;
        $this->container['openIssueCount'] = isset($data['openIssueCount']) ? $data['openIssueCount'] : null;
        $this->container['notFinishedIssueCount'] = isset($data['notFinishedIssueCount']) ? $data['notFinishedIssueCount'] : null;
        $this->container['closeIssueCount'] = isset($data['closeIssueCount']) ? $data['closeIssueCount'] : null;
        $this->container['totalPrCount'] = isset($data['totalPrCount']) ? $data['totalPrCount'] : null;
        $this->container['repoSize'] = isset($data['repoSize']) ? $data['repoSize'] : null;
        $this->container['wikiCount'] = isset($data['wikiCount']) ? $data['wikiCount'] : null;
        $this->container['attchmentCount'] = isset($data['attchmentCount']) ? $data['attchmentCount'] : null;
        $this->container['membersCount'] = isset($data['membersCount']) ? $data['membersCount'] : null;
        $this->container['repoSizeRefresh'] = isset($data['repoSizeRefresh']) ? $data['repoSizeRefresh'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['defaultBranch'] = isset($data['defaultBranch']) ? $data['defaultBranch'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['isWaitFork'] = isset($data['isWaitFork']) ? $data['isWaitFork'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['canExecGiteeScan'] = isset($data['canExecGiteeScan']) ? $data['canExecGiteeScan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 仓库id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 仓库名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 仓库个性域名
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets pathWithNamespace
     *
     * @return string
     */
    public function getPathWithNamespace()
    {
        return $this->container['pathWithNamespace'];
    }

    /**
     * Sets pathWithNamespace
     *
     * @param string $pathWithNamespace 仓库namespace_path/path
     *
     * @return $this
     */
    public function setPathWithNamespace($pathWithNamespace)
    {
        $this->container['pathWithNamespace'] = $pathWithNamespace;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 仓库描述
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license 仓库许可证
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return \GiteeEnterprise\Model\ProjectTagBase
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param \GiteeEnterprise\Model\ProjectTagBase $lang 仓库语言
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets cloneWays
     *
     * @return \GiteeEnterprise\Model\ProjectCloneWaysBase
     */
    public function getCloneWays()
    {
        return $this->container['cloneWays'];
    }

    /**
     * Sets cloneWays
     *
     * @param \GiteeEnterprise\Model\ProjectCloneWaysBase $cloneWays 仓库克隆方式
     *
     * @return $this
     */
    public function setCloneWays($cloneWays)
    {
        $this->container['cloneWays'] = $cloneWays;

        return $this;
    }

    /**
     * Gets openIssueCount
     *
     * @return int
     */
    public function getOpenIssueCount()
    {
        return $this->container['openIssueCount'];
    }

    /**
     * Sets openIssueCount
     *
     * @param int $openIssueCount 仓库内开启的issue数量
     *
     * @return $this
     */
    public function setOpenIssueCount($openIssueCount)
    {
        $this->container['openIssueCount'] = $openIssueCount;

        return $this;
    }

    /**
     * Gets notFinishedIssueCount
     *
     * @return int
     */
    public function getNotFinishedIssueCount()
    {
        return $this->container['notFinishedIssueCount'];
    }

    /**
     * Sets notFinishedIssueCount
     *
     * @param int $notFinishedIssueCount 仓库内未完成的issue数量
     *
     * @return $this
     */
    public function setNotFinishedIssueCount($notFinishedIssueCount)
    {
        $this->container['notFinishedIssueCount'] = $notFinishedIssueCount;

        return $this;
    }

    /**
     * Gets closeIssueCount
     *
     * @return int
     */
    public function getCloseIssueCount()
    {
        return $this->container['closeIssueCount'];
    }

    /**
     * Sets closeIssueCount
     *
     * @param int $closeIssueCount 仓库内已完成的issue数量
     *
     * @return $this
     */
    public function setCloseIssueCount($closeIssueCount)
    {
        $this->container['closeIssueCount'] = $closeIssueCount;

        return $this;
    }

    /**
     * Gets totalPrCount
     *
     * @return int
     */
    public function getTotalPrCount()
    {
        return $this->container['totalPrCount'];
    }

    /**
     * Sets totalPrCount
     *
     * @param int $totalPrCount 仓库内pull request数量
     *
     * @return $this
     */
    public function setTotalPrCount($totalPrCount)
    {
        $this->container['totalPrCount'] = $totalPrCount;

        return $this;
    }

    /**
     * Gets repoSize
     *
     * @return int
     */
    public function getRepoSize()
    {
        return $this->container['repoSize'];
    }

    /**
     * Sets repoSize
     *
     * @param int $repoSize 仓库大小
     *
     * @return $this
     */
    public function setRepoSize($repoSize)
    {
        $this->container['repoSize'] = $repoSize;

        return $this;
    }

    /**
     * Gets wikiCount
     *
     * @return int
     */
    public function getWikiCount()
    {
        return $this->container['wikiCount'];
    }

    /**
     * Sets wikiCount
     *
     * @param int $wikiCount 仓库wiki数量
     *
     * @return $this
     */
    public function setWikiCount($wikiCount)
    {
        $this->container['wikiCount'] = $wikiCount;

        return $this;
    }

    /**
     * Gets attchmentCount
     *
     * @return int
     */
    public function getAttchmentCount()
    {
        return $this->container['attchmentCount'];
    }

    /**
     * Sets attchmentCount
     *
     * @param int $attchmentCount 仓库附件数量
     *
     * @return $this
     */
    public function setAttchmentCount($attchmentCount)
    {
        $this->container['attchmentCount'] = $attchmentCount;

        return $this;
    }

    /**
     * Gets membersCount
     *
     * @return int
     */
    public function getMembersCount()
    {
        return $this->container['membersCount'];
    }

    /**
     * Sets membersCount
     *
     * @param int $membersCount 仓库成员数量
     *
     * @return $this
     */
    public function setMembersCount($membersCount)
    {
        $this->container['membersCount'] = $membersCount;

        return $this;
    }

    /**
     * Gets repoSizeRefresh
     *
     * @return object
     */
    public function getRepoSizeRefresh()
    {
        return $this->container['repoSizeRefresh'];
    }

    /**
     * Sets repoSizeRefresh
     *
     * @param object $repoSizeRefresh 刷新仓库
     *
     * @return $this
     */
    public function setRepoSizeRefresh($repoSizeRefresh)
    {
        $this->container['repoSizeRefresh'] = $repoSizeRefresh;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return \GiteeEnterprise\Model\ModelNamespace
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param \GiteeEnterprise\Model\ModelNamespace $namespace 仓库挂载的空间
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets defaultBranch
     *
     * @return string
     */
    public function getDefaultBranch()
    {
        return $this->container['defaultBranch'];
    }

    /**
     * Sets defaultBranch
     *
     * @param string $defaultBranch 仓库默认分支
     *
     * @return $this
     */
    public function setDefaultBranch($defaultBranch)
    {
        $this->container['defaultBranch'] = $defaultBranch;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage 仓库主页地址
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets isWaitFork
     *
     * @return bool
     */
    public function getIsWaitFork()
    {
        return $this->container['isWaitFork'];
    }

    /**
     * Sets isWaitFork
     *
     * @param bool $isWaitFork 仓库后台处理中
     *
     * @return $this
     */
    public function setIsWaitFork($isWaitFork)
    {
        $this->container['isWaitFork'] = $isWaitFork;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \GiteeEnterprise\Model\Project
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \GiteeEnterprise\Model\Project $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets canExecGiteeScan
     *
     * @return bool
     */
    public function getCanExecGiteeScan()
    {
        return $this->container['canExecGiteeScan'];
    }

    /**
     * Sets canExecGiteeScan
     *
     * @param bool $canExecGiteeScan 是否可以执行scan扫描
     *
     * @return $this
     */
    public function setCanExecGiteeScan($canExecGiteeScan)
    {
        $this->container['canExecGiteeScan'] = $canExecGiteeScan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


