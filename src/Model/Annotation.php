<?php
/**
 * Annotation
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * Annotation Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Annotation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Annotation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'creator' => 'object',
        'checkName' => 'string',
        'path' => 'string',
        'startLine' => 'int',
        'endLine' => 'int',
        'annotationLevel' => 'string',
        'title' => 'string',
        'message' => 'string',
        'rawDetails' => 'string',
        'commitUrl' => 'string',
        'checkRunUrl' => 'string',
        'checkRunId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'creator' => null,
        'checkName' => null,
        'path' => null,
        'startLine' => 'int32',
        'endLine' => 'int32',
        'annotationLevel' => null,
        'title' => null,
        'message' => null,
        'rawDetails' => null,
        'commitUrl' => null,
        'checkRunUrl' => null,
        'checkRunId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creator' => 'creator',
        'checkName' => 'check_name',
        'path' => 'path',
        'startLine' => 'start_line',
        'endLine' => 'end_line',
        'annotationLevel' => 'annotation_level',
        'title' => 'title',
        'message' => 'message',
        'rawDetails' => 'raw_details',
        'commitUrl' => 'commit_url',
        'checkRunUrl' => 'check_run_url',
        'checkRunId' => 'check_run_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creator' => 'setCreator',
        'checkName' => 'setCheckName',
        'path' => 'setPath',
        'startLine' => 'setStartLine',
        'endLine' => 'setEndLine',
        'annotationLevel' => 'setAnnotationLevel',
        'title' => 'setTitle',
        'message' => 'setMessage',
        'rawDetails' => 'setRawDetails',
        'commitUrl' => 'setCommitUrl',
        'checkRunUrl' => 'setCheckRunUrl',
        'checkRunId' => 'setCheckRunId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creator' => 'getCreator',
        'checkName' => 'getCheckName',
        'path' => 'getPath',
        'startLine' => 'getStartLine',
        'endLine' => 'getEndLine',
        'annotationLevel' => 'getAnnotationLevel',
        'title' => 'getTitle',
        'message' => 'getMessage',
        'rawDetails' => 'getRawDetails',
        'commitUrl' => 'getCommitUrl',
        'checkRunUrl' => 'getCheckRunUrl',
        'checkRunId' => 'getCheckRunId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['checkName'] = isset($data['checkName']) ? $data['checkName'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['startLine'] = isset($data['startLine']) ? $data['startLine'] : null;
        $this->container['endLine'] = isset($data['endLine']) ? $data['endLine'] : null;
        $this->container['annotationLevel'] = isset($data['annotationLevel']) ? $data['annotationLevel'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['rawDetails'] = isset($data['rawDetails']) ? $data['rawDetails'] : null;
        $this->container['commitUrl'] = isset($data['commitUrl']) ? $data['commitUrl'] : null;
        $this->container['checkRunUrl'] = isset($data['checkRunUrl']) ? $data['checkRunUrl'] : null;
        $this->container['checkRunId'] = isset($data['checkRunId']) ? $data['checkRunId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 注释ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return object
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param object $creator 创建者信息
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets checkName
     *
     * @return string
     */
    public function getCheckName()
    {
        return $this->container['checkName'];
    }

    /**
     * Sets checkName
     *
     * @param string $checkName 注释名称
     *
     * @return $this
     */
    public function setCheckName($checkName)
    {
        $this->container['checkName'] = $checkName;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 路径
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets startLine
     *
     * @return int
     */
    public function getStartLine()
    {
        return $this->container['startLine'];
    }

    /**
     * Sets startLine
     *
     * @param int $startLine 开始行
     *
     * @return $this
     */
    public function setStartLine($startLine)
    {
        $this->container['startLine'] = $startLine;

        return $this;
    }

    /**
     * Gets endLine
     *
     * @return int
     */
    public function getEndLine()
    {
        return $this->container['endLine'];
    }

    /**
     * Sets endLine
     *
     * @param int $endLine 结束行
     *
     * @return $this
     */
    public function setEndLine($endLine)
    {
        $this->container['endLine'] = $endLine;

        return $this;
    }

    /**
     * Gets annotationLevel
     *
     * @return string
     */
    public function getAnnotationLevel()
    {
        return $this->container['annotationLevel'];
    }

    /**
     * Sets annotationLevel
     *
     * @param string $annotationLevel 注释等级
     *
     * @return $this
     */
    public function setAnnotationLevel($annotationLevel)
    {
        $this->container['annotationLevel'] = $annotationLevel;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 注释标题
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 注释内容
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets rawDetails
     *
     * @return string
     */
    public function getRawDetails()
    {
        return $this->container['rawDetails'];
    }

    /**
     * Sets rawDetails
     *
     * @param string $rawDetails 原始详情
     *
     * @return $this
     */
    public function setRawDetails($rawDetails)
    {
        $this->container['rawDetails'] = $rawDetails;

        return $this;
    }

    /**
     * Gets commitUrl
     *
     * @return string
     */
    public function getCommitUrl()
    {
        return $this->container['commitUrl'];
    }

    /**
     * Sets commitUrl
     *
     * @param string $commitUrl 提交链接
     *
     * @return $this
     */
    public function setCommitUrl($commitUrl)
    {
        $this->container['commitUrl'] = $commitUrl;

        return $this;
    }

    /**
     * Gets checkRunUrl
     *
     * @return string
     */
    public function getCheckRunUrl()
    {
        return $this->container['checkRunUrl'];
    }

    /**
     * Sets checkRunUrl
     *
     * @param string $checkRunUrl 门禁链接
     *
     * @return $this
     */
    public function setCheckRunUrl($checkRunUrl)
    {
        $this->container['checkRunUrl'] = $checkRunUrl;

        return $this;
    }

    /**
     * Gets checkRunId
     *
     * @return int
     */
    public function getCheckRunId()
    {
        return $this->container['checkRunId'];
    }

    /**
     * Sets checkRunId
     *
     * @param int $checkRunId 门禁ID
     *
     * @return $this
     */
    public function setCheckRunId($checkRunId)
    {
        $this->container['checkRunId'] = $checkRunId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


