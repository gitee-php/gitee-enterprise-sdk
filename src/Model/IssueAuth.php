<?php
/**
 * IssueAuth
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * IssueAuth Class Doc Comment
 *
 * @category Class
 * @description 获取授权用户对任务的权限
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssueAuth implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IssueAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'read' => 'bool',
        'update' => 'bool',
        'updateMain' => 'bool',
        'destroy' => 'bool',
        'createNote' => 'bool',
        'createIssue' => 'bool',
        'readTestPlan' => 'bool',
        'updateTestPlan' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'read' => null,
        'update' => null,
        'updateMain' => null,
        'destroy' => null,
        'createNote' => null,
        'createIssue' => null,
        'readTestPlan' => null,
        'updateTestPlan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'read' => 'read',
        'update' => 'update',
        'updateMain' => 'update_main',
        'destroy' => 'destroy',
        'createNote' => 'create_note',
        'createIssue' => 'create_issue',
        'readTestPlan' => 'read_test_plan',
        'updateTestPlan' => 'update_test_plan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'read' => 'setRead',
        'update' => 'setUpdate',
        'updateMain' => 'setUpdateMain',
        'destroy' => 'setDestroy',
        'createNote' => 'setCreateNote',
        'createIssue' => 'setCreateIssue',
        'readTestPlan' => 'setReadTestPlan',
        'updateTestPlan' => 'setUpdateTestPlan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'read' => 'getRead',
        'update' => 'getUpdate',
        'updateMain' => 'getUpdateMain',
        'destroy' => 'getDestroy',
        'createNote' => 'getCreateNote',
        'createIssue' => 'getCreateIssue',
        'readTestPlan' => 'getReadTestPlan',
        'updateTestPlan' => 'getUpdateTestPlan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['read'] = isset($data['read']) ? $data['read'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['updateMain'] = isset($data['updateMain']) ? $data['updateMain'] : null;
        $this->container['destroy'] = isset($data['destroy']) ? $data['destroy'] : null;
        $this->container['createNote'] = isset($data['createNote']) ? $data['createNote'] : null;
        $this->container['createIssue'] = isset($data['createIssue']) ? $data['createIssue'] : null;
        $this->container['readTestPlan'] = isset($data['readTestPlan']) ? $data['readTestPlan'] : null;
        $this->container['updateTestPlan'] = isset($data['updateTestPlan']) ? $data['updateTestPlan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets read
     *
     * @return bool
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param bool $read 是否可查看此任务
     *
     * @return $this
     */
    public function setRead($read)
    {
        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets update
     *
     * @return bool
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param bool $update 是否可更新此任务的属性等状态
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets updateMain
     *
     * @return bool
     */
    public function getUpdateMain()
    {
        return $this->container['updateMain'];
    }

    /**
     * Sets updateMain
     *
     * @param bool $updateMain 是否可更新此任务的标题或内容
     *
     * @return $this
     */
    public function setUpdateMain($updateMain)
    {
        $this->container['updateMain'] = $updateMain;

        return $this;
    }

    /**
     * Gets destroy
     *
     * @return bool
     */
    public function getDestroy()
    {
        return $this->container['destroy'];
    }

    /**
     * Sets destroy
     *
     * @param bool $destroy 是否可删除此任务
     *
     * @return $this
     */
    public function setDestroy($destroy)
    {
        $this->container['destroy'] = $destroy;

        return $this;
    }

    /**
     * Gets createNote
     *
     * @return bool
     */
    public function getCreateNote()
    {
        return $this->container['createNote'];
    }

    /**
     * Sets createNote
     *
     * @param bool $createNote 是否可评论此任务
     *
     * @return $this
     */
    public function setCreateNote($createNote)
    {
        $this->container['createNote'] = $createNote;

        return $this;
    }

    /**
     * Gets createIssue
     *
     * @return bool
     */
    public function getCreateIssue()
    {
        return $this->container['createIssue'];
    }

    /**
     * Sets createIssue
     *
     * @param bool $createIssue 是否可创建子任务，关联任务等
     *
     * @return $this
     */
    public function setCreateIssue($createIssue)
    {
        $this->container['createIssue'] = $createIssue;

        return $this;
    }

    /**
     * Gets readTestPlan
     *
     * @return bool
     */
    public function getReadTestPlan()
    {
        return $this->container['readTestPlan'];
    }

    /**
     * Sets readTestPlan
     *
     * @param bool $readTestPlan 是否可查看测试用例
     *
     * @return $this
     */
    public function setReadTestPlan($readTestPlan)
    {
        $this->container['readTestPlan'] = $readTestPlan;

        return $this;
    }

    /**
     * Gets updateTestPlan
     *
     * @return bool
     */
    public function getUpdateTestPlan()
    {
        return $this->container['updateTestPlan'];
    }

    /**
     * Sets updateTestPlan
     *
     * @param bool $updateTestPlan 是否可更新测试用例
     *
     * @return $this
     */
    public function setUpdateTestPlan($updateTestPlan)
    {
        $this->container['updateTestPlan'] = $updateTestPlan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


