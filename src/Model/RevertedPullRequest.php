<?php
/**
 * RevertedPullRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * RevertedPullRequest Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RevertedPullRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RevertedPullRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'iid' => 'int',
        'title' => 'string',
        'projectId' => 'int',
        'state' => 'string',
        'draft' => 'bool',
        'checkState' => 'int',
        'testState' => 'int',
        'priority' => 'string',
        'priorityHuman' => 'string',
        'lightweight' => 'bool',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'mergedAt' => 'string',
        'project' => '\GiteeEnterprise\Model\Project'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'iid' => 'int32',
        'title' => null,
        'projectId' => 'int32',
        'state' => null,
        'draft' => null,
        'checkState' => 'int32',
        'testState' => 'int32',
        'priority' => null,
        'priorityHuman' => null,
        'lightweight' => null,
        'createdAt' => 'DateTime',
        'updatedAt' => 'DateTime',
        'mergedAt' => 'DateTime',
        'project' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'iid' => 'iid',
        'title' => 'title',
        'projectId' => 'project_id',
        'state' => 'state',
        'draft' => 'draft',
        'checkState' => 'check_state',
        'testState' => 'test_state',
        'priority' => 'priority',
        'priorityHuman' => 'priority_human',
        'lightweight' => 'lightweight',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'mergedAt' => 'merged_at',
        'project' => 'project'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'iid' => 'setIid',
        'title' => 'setTitle',
        'projectId' => 'setProjectId',
        'state' => 'setState',
        'draft' => 'setDraft',
        'checkState' => 'setCheckState',
        'testState' => 'setTestState',
        'priority' => 'setPriority',
        'priorityHuman' => 'setPriorityHuman',
        'lightweight' => 'setLightweight',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'mergedAt' => 'setMergedAt',
        'project' => 'setProject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'iid' => 'getIid',
        'title' => 'getTitle',
        'projectId' => 'getProjectId',
        'state' => 'getState',
        'draft' => 'getDraft',
        'checkState' => 'getCheckState',
        'testState' => 'getTestState',
        'priority' => 'getPriority',
        'priorityHuman' => 'getPriorityHuman',
        'lightweight' => 'getLightweight',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'mergedAt' => 'getMergedAt',
        'project' => 'getProject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['iid'] = isset($data['iid']) ? $data['iid'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['draft'] = isset($data['draft']) ? $data['draft'] : null;
        $this->container['checkState'] = isset($data['checkState']) ? $data['checkState'] : null;
        $this->container['testState'] = isset($data['testState']) ? $data['testState'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['priorityHuman'] = isset($data['priorityHuman']) ? $data['priorityHuman'] : null;
        $this->container['lightweight'] = isset($data['lightweight']) ? $data['lightweight'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['mergedAt'] = isset($data['mergedAt']) ? $data['mergedAt'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id PR 的 id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets iid
     *
     * @return int
     */
    public function getIid()
    {
        return $this->container['iid'];
    }

    /**
     * Sets iid
     *
     * @param int $iid 仓库内唯一的 PR id 标识符
     *
     * @return $this
     */
    public function setIid($iid)
    {
        $this->container['iid'] = $iid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title PR 的标题
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId 仓库 id
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state PR 的状态(opened: 开启; reopened: 关闭后重开; closed: 关闭; merged: 已合并;)
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool $draft PR 草稿状态： 草稿 - true, 非草稿 - false
     *
     * @return $this
     */
    public function setDraft($draft)
    {
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets checkState
     *
     * @return int
     */
    public function getCheckState()
    {
        return $this->container['checkState'];
    }

    /**
     * Sets checkState
     *
     * @param int $checkState PR的审查状态(0: 不需要审查; 1: 待审查; 2: 审查已全部通过;)
     *
     * @return $this
     */
    public function setCheckState($checkState)
    {
        $this->container['checkState'] = $checkState;

        return $this;
    }

    /**
     * Gets testState
     *
     * @return int
     */
    public function getTestState()
    {
        return $this->container['testState'];
    }

    /**
     * Sets testState
     *
     * @param int $testState PR的测试状态(0: 不需要测试; 1: 待测试; 2: 测试已全部通过;)
     *
     * @return $this
     */
    public function setTestState($testState)
    {
        $this->container['testState'] = $testState;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority PR 的优先级。
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets priorityHuman
     *
     * @return string
     */
    public function getPriorityHuman()
    {
        return $this->container['priorityHuman'];
    }

    /**
     * Sets priorityHuman
     *
     * @param string $priorityHuman PR 优先级标签名称
     *
     * @return $this
     */
    public function setPriorityHuman($priorityHuman)
    {
        $this->container['priorityHuman'] = $priorityHuman;

        return $this;
    }

    /**
     * Gets lightweight
     *
     * @return bool
     */
    public function getLightweight()
    {
        return $this->container['lightweight'];
    }

    /**
     * Sets lightweight
     *
     * @param bool $lightweight 是否轻量级 PR
     *
     * @return $this
     */
    public function setLightweight($lightweight)
    {
        $this->container['lightweight'] = $lightweight;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt PR 的创建时间
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt PR 的更新时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets mergedAt
     *
     * @return string
     */
    public function getMergedAt()
    {
        return $this->container['mergedAt'];
    }

    /**
     * Sets mergedAt
     *
     * @param string $mergedAt PR 的合并时间
     *
     * @return $this
     */
    public function setMergedAt($mergedAt)
    {
        $this->container['mergedAt'] = $mergedAt;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \GiteeEnterprise\Model\Project
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \GiteeEnterprise\Model\Project $project 所属仓库
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


