<?php
/**
 * CommitDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.335
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * CommitDetail Class Doc Comment
 *
 * @category Class
 * @description commit详情
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommitDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommitDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'shortId' => 'string',
        'title' => 'string',
        'titleHtml' => 'string',
        'description' => 'string',
        'descriptionHtml' => 'string',
        'message' => 'string',
        'completeTitle' => 'string',
        'completeTitleHtml' => 'string',
        'messageHtml' => 'string',
        'author' => '\GiteeEnterprise\Model\UserWithRemark',
        'committer' => '\GiteeEnterprise\Model\UserWithRemark',
        'authoredDate' => '\DateTime',
        'committedDate' => '\DateTime',
        'signature' => '\GiteeEnterprise\Model\CommitSignature',
        'buildState' => 'object',
        'parents' => 'null[]',
        'diffFilesSize' => 'int',
        'limitDiffFilesSize' => 'int',
        'isOverflow' => 'bool',
        'isChangeToLarge' => 'bool',
        'addedLines' => 'int',
        'removedLines' => 'int',
        'diffs' => '\GiteeEnterprise\Model\Diff'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'shortId' => null,
        'title' => null,
        'titleHtml' => null,
        'description' => null,
        'descriptionHtml' => null,
        'message' => null,
        'completeTitle' => null,
        'completeTitleHtml' => null,
        'messageHtml' => null,
        'author' => null,
        'committer' => null,
        'authoredDate' => 'date',
        'committedDate' => 'date',
        'signature' => null,
        'buildState' => null,
        'parents' => null,
        'diffFilesSize' => 'int32',
        'limitDiffFilesSize' => 'int32',
        'isOverflow' => null,
        'isChangeToLarge' => null,
        'addedLines' => 'int32',
        'removedLines' => 'int32',
        'diffs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shortId' => 'short_id',
        'title' => 'title',
        'titleHtml' => 'title_html',
        'description' => 'description',
        'descriptionHtml' => 'description_html',
        'message' => 'message',
        'completeTitle' => 'complete_title',
        'completeTitleHtml' => 'complete_title_html',
        'messageHtml' => 'message_html',
        'author' => 'author',
        'committer' => 'committer',
        'authoredDate' => 'authored_date',
        'committedDate' => 'committed_date',
        'signature' => 'signature',
        'buildState' => 'build_state',
        'parents' => 'parents',
        'diffFilesSize' => 'diff_files_size',
        'limitDiffFilesSize' => 'limit_diff_files_size',
        'isOverflow' => 'is_overflow',
        'isChangeToLarge' => 'is_change_to_large',
        'addedLines' => 'added_lines',
        'removedLines' => 'removed_lines',
        'diffs' => 'diffs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shortId' => 'setShortId',
        'title' => 'setTitle',
        'titleHtml' => 'setTitleHtml',
        'description' => 'setDescription',
        'descriptionHtml' => 'setDescriptionHtml',
        'message' => 'setMessage',
        'completeTitle' => 'setCompleteTitle',
        'completeTitleHtml' => 'setCompleteTitleHtml',
        'messageHtml' => 'setMessageHtml',
        'author' => 'setAuthor',
        'committer' => 'setCommitter',
        'authoredDate' => 'setAuthoredDate',
        'committedDate' => 'setCommittedDate',
        'signature' => 'setSignature',
        'buildState' => 'setBuildState',
        'parents' => 'setParents',
        'diffFilesSize' => 'setDiffFilesSize',
        'limitDiffFilesSize' => 'setLimitDiffFilesSize',
        'isOverflow' => 'setIsOverflow',
        'isChangeToLarge' => 'setIsChangeToLarge',
        'addedLines' => 'setAddedLines',
        'removedLines' => 'setRemovedLines',
        'diffs' => 'setDiffs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shortId' => 'getShortId',
        'title' => 'getTitle',
        'titleHtml' => 'getTitleHtml',
        'description' => 'getDescription',
        'descriptionHtml' => 'getDescriptionHtml',
        'message' => 'getMessage',
        'completeTitle' => 'getCompleteTitle',
        'completeTitleHtml' => 'getCompleteTitleHtml',
        'messageHtml' => 'getMessageHtml',
        'author' => 'getAuthor',
        'committer' => 'getCommitter',
        'authoredDate' => 'getAuthoredDate',
        'committedDate' => 'getCommittedDate',
        'signature' => 'getSignature',
        'buildState' => 'getBuildState',
        'parents' => 'getParents',
        'diffFilesSize' => 'getDiffFilesSize',
        'limitDiffFilesSize' => 'getLimitDiffFilesSize',
        'isOverflow' => 'getIsOverflow',
        'isChangeToLarge' => 'getIsChangeToLarge',
        'addedLines' => 'getAddedLines',
        'removedLines' => 'getRemovedLines',
        'diffs' => 'getDiffs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['shortId'] = isset($data['shortId']) ? $data['shortId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['titleHtml'] = isset($data['titleHtml']) ? $data['titleHtml'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['descriptionHtml'] = isset($data['descriptionHtml']) ? $data['descriptionHtml'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['completeTitle'] = isset($data['completeTitle']) ? $data['completeTitle'] : null;
        $this->container['completeTitleHtml'] = isset($data['completeTitleHtml']) ? $data['completeTitleHtml'] : null;
        $this->container['messageHtml'] = isset($data['messageHtml']) ? $data['messageHtml'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['committer'] = isset($data['committer']) ? $data['committer'] : null;
        $this->container['authoredDate'] = isset($data['authoredDate']) ? $data['authoredDate'] : null;
        $this->container['committedDate'] = isset($data['committedDate']) ? $data['committedDate'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['buildState'] = isset($data['buildState']) ? $data['buildState'] : null;
        $this->container['parents'] = isset($data['parents']) ? $data['parents'] : null;
        $this->container['diffFilesSize'] = isset($data['diffFilesSize']) ? $data['diffFilesSize'] : null;
        $this->container['limitDiffFilesSize'] = isset($data['limitDiffFilesSize']) ? $data['limitDiffFilesSize'] : null;
        $this->container['isOverflow'] = isset($data['isOverflow']) ? $data['isOverflow'] : null;
        $this->container['isChangeToLarge'] = isset($data['isChangeToLarge']) ? $data['isChangeToLarge'] : null;
        $this->container['addedLines'] = isset($data['addedLines']) ? $data['addedLines'] : null;
        $this->container['removedLines'] = isset($data['removedLines']) ? $data['removedLines'] : null;
        $this->container['diffs'] = isset($data['diffs']) ? $data['diffs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Commit ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shortId
     *
     * @return string
     */
    public function getShortId()
    {
        return $this->container['shortId'];
    }

    /**
     * Sets shortId
     *
     * @param string $shortId Commit Short ID
     *
     * @return $this
     */
    public function setShortId($shortId)
    {
        $this->container['shortId'] = $shortId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Commit Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets titleHtml
     *
     * @return string
     */
    public function getTitleHtml()
    {
        return $this->container['titleHtml'];
    }

    /**
     * Sets titleHtml
     *
     * @param string $titleHtml Commit Html Title
     *
     * @return $this
     */
    public function setTitleHtml($titleHtml)
    {
        $this->container['titleHtml'] = $titleHtml;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Commit Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionHtml
     *
     * @return string
     */
    public function getDescriptionHtml()
    {
        return $this->container['descriptionHtml'];
    }

    /**
     * Sets descriptionHtml
     *
     * @param string $descriptionHtml Commit Html Description
     *
     * @return $this
     */
    public function setDescriptionHtml($descriptionHtml)
    {
        $this->container['descriptionHtml'] = $descriptionHtml;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Commit Message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets completeTitle
     *
     * @return string
     */
    public function getCompleteTitle()
    {
        return $this->container['completeTitle'];
    }

    /**
     * Sets completeTitle
     *
     * @param string $completeTitle Complete Commit Title
     *
     * @return $this
     */
    public function setCompleteTitle($completeTitle)
    {
        $this->container['completeTitle'] = $completeTitle;

        return $this;
    }

    /**
     * Gets completeTitleHtml
     *
     * @return string
     */
    public function getCompleteTitleHtml()
    {
        return $this->container['completeTitleHtml'];
    }

    /**
     * Sets completeTitleHtml
     *
     * @param string $completeTitleHtml Complete Commit Title Html
     *
     * @return $this
     */
    public function setCompleteTitleHtml($completeTitleHtml)
    {
        $this->container['completeTitleHtml'] = $completeTitleHtml;

        return $this;
    }

    /**
     * Gets messageHtml
     *
     * @return string
     */
    public function getMessageHtml()
    {
        return $this->container['messageHtml'];
    }

    /**
     * Sets messageHtml
     *
     * @param string $messageHtml Commit Html Message
     *
     * @return $this
     */
    public function setMessageHtml($messageHtml)
    {
        $this->container['messageHtml'] = $messageHtml;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $author Commit 作者
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets committer
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getCommitter()
    {
        return $this->container['committer'];
    }

    /**
     * Sets committer
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $committer Commit 提交人
     *
     * @return $this
     */
    public function setCommitter($committer)
    {
        $this->container['committer'] = $committer;

        return $this;
    }

    /**
     * Gets authoredDate
     *
     * @return \DateTime
     */
    public function getAuthoredDate()
    {
        return $this->container['authoredDate'];
    }

    /**
     * Sets authoredDate
     *
     * @param \DateTime $authoredDate 推送时间
     *
     * @return $this
     */
    public function setAuthoredDate($authoredDate)
    {
        $this->container['authoredDate'] = $authoredDate;

        return $this;
    }

    /**
     * Gets committedDate
     *
     * @return \DateTime
     */
    public function getCommittedDate()
    {
        return $this->container['committedDate'];
    }

    /**
     * Sets committedDate
     *
     * @param \DateTime $committedDate 提交时间
     *
     * @return $this
     */
    public function setCommittedDate($committedDate)
    {
        $this->container['committedDate'] = $committedDate;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return \GiteeEnterprise\Model\CommitSignature
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param \GiteeEnterprise\Model\CommitSignature $signature 签名
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets buildState
     *
     * @return object
     */
    public function getBuildState()
    {
        return $this->container['buildState'];
    }

    /**
     * Sets buildState
     *
     * @param object $buildState Gitee Go构建状态
     *
     * @return $this
     */
    public function setBuildState($buildState)
    {
        $this->container['buildState'] = $buildState;

        return $this;
    }

    /**
     * Gets parents
     *
     * @return null[]
     */
    public function getParents()
    {
        return $this->container['parents'];
    }

    /**
     * Sets parents
     *
     * @param null[] $parents 父节点
     *
     * @return $this
     */
    public function setParents($parents)
    {
        $this->container['parents'] = $parents;

        return $this;
    }

    /**
     * Gets diffFilesSize
     *
     * @return int
     */
    public function getDiffFilesSize()
    {
        return $this->container['diffFilesSize'];
    }

    /**
     * Sets diffFilesSize
     *
     * @param int $diffFilesSize diff 文件大小
     *
     * @return $this
     */
    public function setDiffFilesSize($diffFilesSize)
    {
        $this->container['diffFilesSize'] = $diffFilesSize;

        return $this;
    }

    /**
     * Gets limitDiffFilesSize
     *
     * @return int
     */
    public function getLimitDiffFilesSize()
    {
        return $this->container['limitDiffFilesSize'];
    }

    /**
     * Sets limitDiffFilesSize
     *
     * @param int $limitDiffFilesSize 可渲染的diff文件大小
     *
     * @return $this
     */
    public function setLimitDiffFilesSize($limitDiffFilesSize)
    {
        $this->container['limitDiffFilesSize'] = $limitDiffFilesSize;

        return $this;
    }

    /**
     * Gets isOverflow
     *
     * @return bool
     */
    public function getIsOverflow()
    {
        return $this->container['isOverflow'];
    }

    /**
     * Sets isOverflow
     *
     * @param bool $isOverflow diff大小是否超出限制
     *
     * @return $this
     */
    public function setIsOverflow($isOverflow)
    {
        $this->container['isOverflow'] = $isOverflow;

        return $this;
    }

    /**
     * Gets isChangeToLarge
     *
     * @return bool
     */
    public function getIsChangeToLarge()
    {
        return $this->container['isChangeToLarge'];
    }

    /**
     * Sets isChangeToLarge
     *
     * @param bool $isChangeToLarge diff是否过大
     *
     * @return $this
     */
    public function setIsChangeToLarge($isChangeToLarge)
    {
        $this->container['isChangeToLarge'] = $isChangeToLarge;

        return $this;
    }

    /**
     * Gets addedLines
     *
     * @return int
     */
    public function getAddedLines()
    {
        return $this->container['addedLines'];
    }

    /**
     * Sets addedLines
     *
     * @param int $addedLines 新增行数
     *
     * @return $this
     */
    public function setAddedLines($addedLines)
    {
        $this->container['addedLines'] = $addedLines;

        return $this;
    }

    /**
     * Gets removedLines
     *
     * @return int
     */
    public function getRemovedLines()
    {
        return $this->container['removedLines'];
    }

    /**
     * Sets removedLines
     *
     * @param int $removedLines 删除行数
     *
     * @return $this
     */
    public function setRemovedLines($removedLines)
    {
        $this->container['removedLines'] = $removedLines;

        return $this;
    }

    /**
     * Gets diffs
     *
     * @return \GiteeEnterprise\Model\Diff
     */
    public function getDiffs()
    {
        return $this->container['diffs'];
    }

    /**
     * Sets diffs
     *
     * @param \GiteeEnterprise\Model\Diff $diffs 文件diff
     *
     * @return $this
     */
    public function setDiffs($diffs)
    {
        $this->container['diffs'] = $diffs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


