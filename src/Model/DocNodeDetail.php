<?php
/**
 * DocNodeDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.333
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * DocNodeDetail Class Doc Comment
 *
 * @category Class
 * @description 查看文件节点详情
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocNodeDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocNodeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parentId' => 'int',
        'name' => 'string',
        'public' => 'string',
        'publicName' => 'string',
        'filePath' => 'string',
        'program' => '\GiteeEnterprise\Model\Program',
        'fileType' => 'string',
        'fileId' => 'string',
        'fileVersions' => 'bool',
        'creator' => '\GiteeEnterprise\Model\UserWithRemark',
        'isFavour' => 'bool',
        'attachFile' => '\GiteeEnterprise\Model\DocAttachFile',
        'isWiki' => 'bool',
        'editorType' => 'string',
        'needPassword' => 'bool',
        'isTop' => 'bool',
        'breadcrumb' => 'string',
        'previewToken' => 'string',
        'linkedIssuesCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'parentId' => 'int32',
        'name' => null,
        'public' => null,
        'publicName' => null,
        'filePath' => null,
        'program' => null,
        'fileType' => null,
        'fileId' => null,
        'fileVersions' => null,
        'creator' => null,
        'isFavour' => null,
        'attachFile' => null,
        'isWiki' => null,
        'editorType' => null,
        'needPassword' => null,
        'isTop' => null,
        'breadcrumb' => null,
        'previewToken' => null,
        'linkedIssuesCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parentId' => 'parent_id',
        'name' => 'name',
        'public' => 'public',
        'publicName' => 'public_name',
        'filePath' => 'file_path',
        'program' => 'program',
        'fileType' => 'file_type',
        'fileId' => 'file_id',
        'fileVersions' => 'file_versions',
        'creator' => 'creator',
        'isFavour' => 'is_favour',
        'attachFile' => 'attach_file',
        'isWiki' => 'is_wiki',
        'editorType' => 'editor_type',
        'needPassword' => 'need_password',
        'isTop' => 'is_top',
        'breadcrumb' => 'breadcrumb',
        'previewToken' => 'preview_token',
        'linkedIssuesCount' => 'linked_issues_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parentId' => 'setParentId',
        'name' => 'setName',
        'public' => 'setPublic',
        'publicName' => 'setPublicName',
        'filePath' => 'setFilePath',
        'program' => 'setProgram',
        'fileType' => 'setFileType',
        'fileId' => 'setFileId',
        'fileVersions' => 'setFileVersions',
        'creator' => 'setCreator',
        'isFavour' => 'setIsFavour',
        'attachFile' => 'setAttachFile',
        'isWiki' => 'setIsWiki',
        'editorType' => 'setEditorType',
        'needPassword' => 'setNeedPassword',
        'isTop' => 'setIsTop',
        'breadcrumb' => 'setBreadcrumb',
        'previewToken' => 'setPreviewToken',
        'linkedIssuesCount' => 'setLinkedIssuesCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parentId' => 'getParentId',
        'name' => 'getName',
        'public' => 'getPublic',
        'publicName' => 'getPublicName',
        'filePath' => 'getFilePath',
        'program' => 'getProgram',
        'fileType' => 'getFileType',
        'fileId' => 'getFileId',
        'fileVersions' => 'getFileVersions',
        'creator' => 'getCreator',
        'isFavour' => 'getIsFavour',
        'attachFile' => 'getAttachFile',
        'isWiki' => 'getIsWiki',
        'editorType' => 'getEditorType',
        'needPassword' => 'getNeedPassword',
        'isTop' => 'getIsTop',
        'breadcrumb' => 'getBreadcrumb',
        'previewToken' => 'getPreviewToken',
        'linkedIssuesCount' => 'getLinkedIssuesCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['publicName'] = isset($data['publicName']) ? $data['publicName'] : null;
        $this->container['filePath'] = isset($data['filePath']) ? $data['filePath'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['fileType'] = isset($data['fileType']) ? $data['fileType'] : null;
        $this->container['fileId'] = isset($data['fileId']) ? $data['fileId'] : null;
        $this->container['fileVersions'] = isset($data['fileVersions']) ? $data['fileVersions'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['isFavour'] = isset($data['isFavour']) ? $data['isFavour'] : null;
        $this->container['attachFile'] = isset($data['attachFile']) ? $data['attachFile'] : null;
        $this->container['isWiki'] = isset($data['isWiki']) ? $data['isWiki'] : null;
        $this->container['editorType'] = isset($data['editorType']) ? $data['editorType'] : null;
        $this->container['needPassword'] = isset($data['needPassword']) ? $data['needPassword'] : null;
        $this->container['isTop'] = isset($data['isTop']) ? $data['isTop'] : null;
        $this->container['breadcrumb'] = isset($data['breadcrumb']) ? $data['breadcrumb'] : null;
        $this->container['previewToken'] = isset($data['previewToken']) ? $data['previewToken'] : null;
        $this->container['linkedIssuesCount'] = isset($data['linkedIssuesCount']) ? $data['linkedIssuesCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId 父层级的 id
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public
     *
     * @return string
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param string $public 权限值
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets publicName
     *
     * @return string
     */
    public function getPublicName()
    {
        return $this->container['publicName'];
    }

    /**
     * Sets publicName
     *
     * @param string $publicName 权限名称
     *
     * @return $this
     */
    public function setPublicName($publicName)
    {
        $this->container['publicName'] = $publicName;

        return $this;
    }

    /**
     * Gets filePath
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['filePath'];
    }

    /**
     * Sets filePath
     *
     * @param string $filePath 关联文档完整路径
     *
     * @return $this
     */
    public function setFilePath($filePath)
    {
        $this->container['filePath'] = $filePath;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \GiteeEnterprise\Model\Program
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \GiteeEnterprise\Model\Program $program 关联项目
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets fileType
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['fileType'];
    }

    /**
     * Sets fileType
     *
     * @param string $fileType 关联类型。(目录：DocDirectory，文档：WikiInfo，附件：AttachFile)
     *
     * @return $this
     */
    public function setFileType($fileType)
    {
        $this->container['fileType'] = $fileType;

        return $this;
    }

    /**
     * Gets fileId
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['fileId'];
    }

    /**
     * Sets fileId
     *
     * @param string $fileId 关联类型的 id
     *
     * @return $this
     */
    public function setFileId($fileId)
    {
        $this->container['fileId'] = $fileId;

        return $this;
    }

    /**
     * Gets fileVersions
     *
     * @return bool
     */
    public function getFileVersions()
    {
        return $this->container['fileVersions'];
    }

    /**
     * Sets fileVersions
     *
     * @param bool $fileVersions 是否查看附件历史版本
     *
     * @return $this
     */
    public function setFileVersions($fileVersions)
    {
        $this->container['fileVersions'] = $fileVersions;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $creator 创建者
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets isFavour
     *
     * @return bool
     */
    public function getIsFavour()
    {
        return $this->container['isFavour'];
    }

    /**
     * Sets isFavour
     *
     * @param bool $isFavour 是否已收藏
     *
     * @return $this
     */
    public function setIsFavour($isFavour)
    {
        $this->container['isFavour'] = $isFavour;

        return $this;
    }

    /**
     * Gets attachFile
     *
     * @return \GiteeEnterprise\Model\DocAttachFile
     */
    public function getAttachFile()
    {
        return $this->container['attachFile'];
    }

    /**
     * Sets attachFile
     *
     * @param \GiteeEnterprise\Model\DocAttachFile $attachFile 附件相关信息
     *
     * @return $this
     */
    public function setAttachFile($attachFile)
    {
        $this->container['attachFile'] = $attachFile;

        return $this;
    }

    /**
     * Gets isWiki
     *
     * @return bool
     */
    public function getIsWiki()
    {
        return $this->container['isWiki'];
    }

    /**
     * Sets isWiki
     *
     * @param bool $isWiki 是否 wiki
     *
     * @return $this
     */
    public function setIsWiki($isWiki)
    {
        $this->container['isWiki'] = $isWiki;

        return $this;
    }

    /**
     * Gets editorType
     *
     * @return string
     */
    public function getEditorType()
    {
        return $this->container['editorType'];
    }

    /**
     * Sets editorType
     *
     * @param string $editorType 编辑器类型
     *
     * @return $this
     */
    public function setEditorType($editorType)
    {
        $this->container['editorType'] = $editorType;

        return $this;
    }

    /**
     * Gets needPassword
     *
     * @return bool
     */
    public function getNeedPassword()
    {
        return $this->container['needPassword'];
    }

    /**
     * Sets needPassword
     *
     * @param bool $needPassword 需要密码访问
     *
     * @return $this
     */
    public function setNeedPassword($needPassword)
    {
        $this->container['needPassword'] = $needPassword;

        return $this;
    }

    /**
     * Gets isTop
     *
     * @return bool
     */
    public function getIsTop()
    {
        return $this->container['isTop'];
    }

    /**
     * Sets isTop
     *
     * @param bool $isTop 是否置顶
     *
     * @return $this
     */
    public function setIsTop($isTop)
    {
        $this->container['isTop'] = $isTop;

        return $this;
    }

    /**
     * Gets breadcrumb
     *
     * @return string
     */
    public function getBreadcrumb()
    {
        return $this->container['breadcrumb'];
    }

    /**
     * Sets breadcrumb
     *
     * @param string $breadcrumb 层级目录
     *
     * @return $this
     */
    public function setBreadcrumb($breadcrumb)
    {
        $this->container['breadcrumb'] = $breadcrumb;

        return $this;
    }

    /**
     * Gets previewToken
     *
     * @return string
     */
    public function getPreviewToken()
    {
        return $this->container['previewToken'];
    }

    /**
     * Sets previewToken
     *
     * @param string $previewToken 预览token
     *
     * @return $this
     */
    public function setPreviewToken($previewToken)
    {
        $this->container['previewToken'] = $previewToken;

        return $this;
    }

    /**
     * Gets linkedIssuesCount
     *
     * @return int
     */
    public function getLinkedIssuesCount()
    {
        return $this->container['linkedIssuesCount'];
    }

    /**
     * Sets linkedIssuesCount
     *
     * @param int $linkedIssuesCount 文档已关联的工作项数量
     *
     * @return $this
     */
    public function setLinkedIssuesCount($linkedIssuesCount)
    {
        $this->container['linkedIssuesCount'] = $linkedIssuesCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


