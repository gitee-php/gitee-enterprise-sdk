<?php
/**
 * IssueDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.335
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * IssueDetail Class Doc Comment
 *
 * @category Class
 * @description 更新任务
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssueDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IssueDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'rootId' => 'int',
        'parentId' => 'int',
        'projectId' => 'int',
        'ident' => 'string',
        'title' => 'string',
        'issueStateId' => 'int',
        'programId' => 'int',
        'state' => 'string',
        'commentsCount' => 'int',
        'priority' => 'int',
        'branch' => 'string',
        'priorityHuman' => 'string',
        'assignee' => '\GiteeEnterprise\Model\UserWithRemark',
        'duration' => 'int',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'collaborators' => '\GiteeEnterprise\Model\UserWithRemark[]',
        'author' => '\GiteeEnterprise\Model\UserWithRemark',
        'milestone' => '\GiteeEnterprise\Model\Milestone',
        'issueState' => '\GiteeEnterprise\Model\IssueState',
        'issueType' => '\GiteeEnterprise\Model\IssueType',
        'labels' => '\GiteeEnterprise\Model\Label[]',
        'issueExtra' => 'null[]',
        'planStartedAt' => 'string',
        'deadline' => 'string',
        'finishedAt' => 'string',
        'startedAt' => 'string',
        'securityHole' => 'bool',
        'isStar' => 'bool',
        'kanbanInfo' => 'object',
        'scrumSprint' => '\GiteeEnterprise\Model\ScrumSprint',
        'description' => 'string',
        'descriptionHtml' => 'string',
        'descriptionJson' => 'string',
        'descriptionType' => 'string',
        'issueUrl' => 'string',
        'program' => '\GiteeEnterprise\Model\ProgramWithComponents',
        'project' => '\GiteeEnterprise\Model\Project',
        'parent' => '\GiteeEnterprise\Model\Issue',
        'operateLogsCount' => 'int',
        'reactions' => 'object',
        'attachFileIds' => 'int',
        'securityHoleOperater' => 'bool',
        'scrumVersion' => '\GiteeEnterprise\Model\EnterpriseScrumVersion',
        'starredUsers' => '\GiteeEnterprise\Model\UserWithRemark[]',
        'triggerExecuteInfo' => 'bool',
        'estimatedDuration' => 'float',
        'registeredDuration' => 'float',
        'leftDuration' => 'float',
        'isInheritSatisfying' => 'bool',
        'version' => 'null[]',
        'children' => '\GiteeEnterprise\Model\Issue[]',
        'childrenCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'rootId' => 'int32',
        'parentId' => 'int32',
        'projectId' => 'int32',
        'ident' => null,
        'title' => null,
        'issueStateId' => 'int32',
        'programId' => 'int32',
        'state' => null,
        'commentsCount' => 'int32',
        'priority' => 'int32',
        'branch' => null,
        'priorityHuman' => null,
        'assignee' => null,
        'duration' => 'int32',
        'createdAt' => 'DateTime',
        'updatedAt' => 'DateTime',
        'collaborators' => null,
        'author' => null,
        'milestone' => null,
        'issueState' => null,
        'issueType' => null,
        'labels' => null,
        'issueExtra' => null,
        'planStartedAt' => 'DateTime',
        'deadline' => 'DateTime',
        'finishedAt' => 'DateTime',
        'startedAt' => 'DateTime',
        'securityHole' => null,
        'isStar' => null,
        'kanbanInfo' => null,
        'scrumSprint' => null,
        'description' => null,
        'descriptionHtml' => null,
        'descriptionJson' => null,
        'descriptionType' => null,
        'issueUrl' => null,
        'program' => null,
        'project' => null,
        'parent' => null,
        'operateLogsCount' => 'int32',
        'reactions' => null,
        'attachFileIds' => 'int32',
        'securityHoleOperater' => null,
        'scrumVersion' => null,
        'starredUsers' => null,
        'triggerExecuteInfo' => null,
        'estimatedDuration' => null,
        'registeredDuration' => null,
        'leftDuration' => null,
        'isInheritSatisfying' => null,
        'version' => null,
        'children' => null,
        'childrenCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rootId' => 'root_id',
        'parentId' => 'parent_id',
        'projectId' => 'project_id',
        'ident' => 'ident',
        'title' => 'title',
        'issueStateId' => 'issue_state_id',
        'programId' => 'program_id',
        'state' => 'state',
        'commentsCount' => 'comments_count',
        'priority' => 'priority',
        'branch' => 'branch',
        'priorityHuman' => 'priority_human',
        'assignee' => 'assignee',
        'duration' => 'duration',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'collaborators' => 'collaborators',
        'author' => 'author',
        'milestone' => 'milestone',
        'issueState' => 'issue_state',
        'issueType' => 'issue_type',
        'labels' => 'labels',
        'issueExtra' => 'issue_extra',
        'planStartedAt' => 'plan_started_at',
        'deadline' => 'deadline',
        'finishedAt' => 'finished_at',
        'startedAt' => 'started_at',
        'securityHole' => 'security_hole',
        'isStar' => 'is_star',
        'kanbanInfo' => 'kanban_info',
        'scrumSprint' => 'scrum_sprint',
        'description' => 'description',
        'descriptionHtml' => 'description_html',
        'descriptionJson' => 'description_json',
        'descriptionType' => 'description_type',
        'issueUrl' => 'issue_url',
        'program' => 'program',
        'project' => 'project',
        'parent' => 'parent',
        'operateLogsCount' => 'operate_logs_count',
        'reactions' => 'reactions',
        'attachFileIds' => 'attach_file_ids',
        'securityHoleOperater' => 'security_hole_operater',
        'scrumVersion' => 'scrum_version',
        'starredUsers' => 'starred_users',
        'triggerExecuteInfo' => 'trigger_execute_info',
        'estimatedDuration' => 'estimated_duration',
        'registeredDuration' => 'registered_duration',
        'leftDuration' => 'left_duration',
        'isInheritSatisfying' => 'is_inherit_satisfying',
        'version' => 'version',
        'children' => 'children',
        'childrenCount' => 'children_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rootId' => 'setRootId',
        'parentId' => 'setParentId',
        'projectId' => 'setProjectId',
        'ident' => 'setIdent',
        'title' => 'setTitle',
        'issueStateId' => 'setIssueStateId',
        'programId' => 'setProgramId',
        'state' => 'setState',
        'commentsCount' => 'setCommentsCount',
        'priority' => 'setPriority',
        'branch' => 'setBranch',
        'priorityHuman' => 'setPriorityHuman',
        'assignee' => 'setAssignee',
        'duration' => 'setDuration',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'collaborators' => 'setCollaborators',
        'author' => 'setAuthor',
        'milestone' => 'setMilestone',
        'issueState' => 'setIssueState',
        'issueType' => 'setIssueType',
        'labels' => 'setLabels',
        'issueExtra' => 'setIssueExtra',
        'planStartedAt' => 'setPlanStartedAt',
        'deadline' => 'setDeadline',
        'finishedAt' => 'setFinishedAt',
        'startedAt' => 'setStartedAt',
        'securityHole' => 'setSecurityHole',
        'isStar' => 'setIsStar',
        'kanbanInfo' => 'setKanbanInfo',
        'scrumSprint' => 'setScrumSprint',
        'description' => 'setDescription',
        'descriptionHtml' => 'setDescriptionHtml',
        'descriptionJson' => 'setDescriptionJson',
        'descriptionType' => 'setDescriptionType',
        'issueUrl' => 'setIssueUrl',
        'program' => 'setProgram',
        'project' => 'setProject',
        'parent' => 'setParent',
        'operateLogsCount' => 'setOperateLogsCount',
        'reactions' => 'setReactions',
        'attachFileIds' => 'setAttachFileIds',
        'securityHoleOperater' => 'setSecurityHoleOperater',
        'scrumVersion' => 'setScrumVersion',
        'starredUsers' => 'setStarredUsers',
        'triggerExecuteInfo' => 'setTriggerExecuteInfo',
        'estimatedDuration' => 'setEstimatedDuration',
        'registeredDuration' => 'setRegisteredDuration',
        'leftDuration' => 'setLeftDuration',
        'isInheritSatisfying' => 'setIsInheritSatisfying',
        'version' => 'setVersion',
        'children' => 'setChildren',
        'childrenCount' => 'setChildrenCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rootId' => 'getRootId',
        'parentId' => 'getParentId',
        'projectId' => 'getProjectId',
        'ident' => 'getIdent',
        'title' => 'getTitle',
        'issueStateId' => 'getIssueStateId',
        'programId' => 'getProgramId',
        'state' => 'getState',
        'commentsCount' => 'getCommentsCount',
        'priority' => 'getPriority',
        'branch' => 'getBranch',
        'priorityHuman' => 'getPriorityHuman',
        'assignee' => 'getAssignee',
        'duration' => 'getDuration',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'collaborators' => 'getCollaborators',
        'author' => 'getAuthor',
        'milestone' => 'getMilestone',
        'issueState' => 'getIssueState',
        'issueType' => 'getIssueType',
        'labels' => 'getLabels',
        'issueExtra' => 'getIssueExtra',
        'planStartedAt' => 'getPlanStartedAt',
        'deadline' => 'getDeadline',
        'finishedAt' => 'getFinishedAt',
        'startedAt' => 'getStartedAt',
        'securityHole' => 'getSecurityHole',
        'isStar' => 'getIsStar',
        'kanbanInfo' => 'getKanbanInfo',
        'scrumSprint' => 'getScrumSprint',
        'description' => 'getDescription',
        'descriptionHtml' => 'getDescriptionHtml',
        'descriptionJson' => 'getDescriptionJson',
        'descriptionType' => 'getDescriptionType',
        'issueUrl' => 'getIssueUrl',
        'program' => 'getProgram',
        'project' => 'getProject',
        'parent' => 'getParent',
        'operateLogsCount' => 'getOperateLogsCount',
        'reactions' => 'getReactions',
        'attachFileIds' => 'getAttachFileIds',
        'securityHoleOperater' => 'getSecurityHoleOperater',
        'scrumVersion' => 'getScrumVersion',
        'starredUsers' => 'getStarredUsers',
        'triggerExecuteInfo' => 'getTriggerExecuteInfo',
        'estimatedDuration' => 'getEstimatedDuration',
        'registeredDuration' => 'getRegisteredDuration',
        'leftDuration' => 'getLeftDuration',
        'isInheritSatisfying' => 'getIsInheritSatisfying',
        'version' => 'getVersion',
        'children' => 'getChildren',
        'childrenCount' => 'getChildrenCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['rootId'] = isset($data['rootId']) ? $data['rootId'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['ident'] = isset($data['ident']) ? $data['ident'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['issueStateId'] = isset($data['issueStateId']) ? $data['issueStateId'] : null;
        $this->container['programId'] = isset($data['programId']) ? $data['programId'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['commentsCount'] = isset($data['commentsCount']) ? $data['commentsCount'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['priorityHuman'] = isset($data['priorityHuman']) ? $data['priorityHuman'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['collaborators'] = isset($data['collaborators']) ? $data['collaborators'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['milestone'] = isset($data['milestone']) ? $data['milestone'] : null;
        $this->container['issueState'] = isset($data['issueState']) ? $data['issueState'] : null;
        $this->container['issueType'] = isset($data['issueType']) ? $data['issueType'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['issueExtra'] = isset($data['issueExtra']) ? $data['issueExtra'] : null;
        $this->container['planStartedAt'] = isset($data['planStartedAt']) ? $data['planStartedAt'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['finishedAt'] = isset($data['finishedAt']) ? $data['finishedAt'] : null;
        $this->container['startedAt'] = isset($data['startedAt']) ? $data['startedAt'] : null;
        $this->container['securityHole'] = isset($data['securityHole']) ? $data['securityHole'] : null;
        $this->container['isStar'] = isset($data['isStar']) ? $data['isStar'] : null;
        $this->container['kanbanInfo'] = isset($data['kanbanInfo']) ? $data['kanbanInfo'] : null;
        $this->container['scrumSprint'] = isset($data['scrumSprint']) ? $data['scrumSprint'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['descriptionHtml'] = isset($data['descriptionHtml']) ? $data['descriptionHtml'] : null;
        $this->container['descriptionJson'] = isset($data['descriptionJson']) ? $data['descriptionJson'] : null;
        $this->container['descriptionType'] = isset($data['descriptionType']) ? $data['descriptionType'] : null;
        $this->container['issueUrl'] = isset($data['issueUrl']) ? $data['issueUrl'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['operateLogsCount'] = isset($data['operateLogsCount']) ? $data['operateLogsCount'] : null;
        $this->container['reactions'] = isset($data['reactions']) ? $data['reactions'] : null;
        $this->container['attachFileIds'] = isset($data['attachFileIds']) ? $data['attachFileIds'] : null;
        $this->container['securityHoleOperater'] = isset($data['securityHoleOperater']) ? $data['securityHoleOperater'] : null;
        $this->container['scrumVersion'] = isset($data['scrumVersion']) ? $data['scrumVersion'] : null;
        $this->container['starredUsers'] = isset($data['starredUsers']) ? $data['starredUsers'] : null;
        $this->container['triggerExecuteInfo'] = isset($data['triggerExecuteInfo']) ? $data['triggerExecuteInfo'] : null;
        $this->container['estimatedDuration'] = isset($data['estimatedDuration']) ? $data['estimatedDuration'] : null;
        $this->container['registeredDuration'] = isset($data['registeredDuration']) ? $data['registeredDuration'] : null;
        $this->container['leftDuration'] = isset($data['leftDuration']) ? $data['leftDuration'] : null;
        $this->container['isInheritSatisfying'] = isset($data['isInheritSatisfying']) ? $data['isInheritSatisfying'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['childrenCount'] = isset($data['childrenCount']) ? $data['childrenCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 任务 ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rootId
     *
     * @return int
     */
    public function getRootId()
    {
        return $this->container['rootId'];
    }

    /**
     * Sets rootId
     *
     * @param int $rootId 根结点 ID
     *
     * @return $this
     */
    public function setRootId($rootId)
    {
        $this->container['rootId'] = $rootId;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId 父任务 ID
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId 关联项目 ID
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets ident
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string $ident 任务全局唯一标识符
     *
     * @return $this
     */
    public function setIdent($ident)
    {
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 任务标题
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets issueStateId
     *
     * @return int
     */
    public function getIssueStateId()
    {
        return $this->container['issueStateId'];
    }

    /**
     * Sets issueStateId
     *
     * @param int $issueStateId 任务状态id
     *
     * @return $this
     */
    public function setIssueStateId($issueStateId)
    {
        $this->container['issueStateId'] = $issueStateId;

        return $this;
    }

    /**
     * Gets programId
     *
     * @return int
     */
    public function getProgramId()
    {
        return $this->container['programId'];
    }

    /**
     * Sets programId
     *
     * @param int $programId 项目id
     *
     * @return $this
     */
    public function setProgramId($programId)
    {
        $this->container['programId'] = $programId;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state 任务状态标识符: open, progressing, closed, rejected
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets commentsCount
     *
     * @return int
     */
    public function getCommentsCount()
    {
        return $this->container['commentsCount'];
    }

    /**
     * Sets commentsCount
     *
     * @param int $commentsCount 评论数量
     *
     * @return $this
     */
    public function setCommentsCount($commentsCount)
    {
        $this->container['commentsCount'] = $commentsCount;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority 优先级标识符
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch 关联的分支名
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets priorityHuman
     *
     * @return string
     */
    public function getPriorityHuman()
    {
        return $this->container['priorityHuman'];
    }

    /**
     * Sets priorityHuman
     *
     * @param string $priorityHuman 优先级中文名称
     *
     * @return $this
     */
    public function setPriorityHuman($priorityHuman)
    {
        $this->container['priorityHuman'] = $priorityHuman;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $assignee 任务负责人
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration 预计工时。（单位：分钟）
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt 任务创建时间
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt 任务更新时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets collaborators
     *
     * @return \GiteeEnterprise\Model\UserWithRemark[]
     */
    public function getCollaborators()
    {
        return $this->container['collaborators'];
    }

    /**
     * Sets collaborators
     *
     * @param \GiteeEnterprise\Model\UserWithRemark[] $collaborators 任务协作者
     *
     * @return $this
     */
    public function setCollaborators($collaborators)
    {
        $this->container['collaborators'] = $collaborators;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $author 任务创建者
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \GiteeEnterprise\Model\Milestone
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \GiteeEnterprise\Model\Milestone $milestone 关联的里程碑
     *
     * @return $this
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets issueState
     *
     * @return \GiteeEnterprise\Model\IssueState
     */
    public function getIssueState()
    {
        return $this->container['issueState'];
    }

    /**
     * Sets issueState
     *
     * @param \GiteeEnterprise\Model\IssueState $issueState 任务状态
     *
     * @return $this
     */
    public function setIssueState($issueState)
    {
        $this->container['issueState'] = $issueState;

        return $this;
    }

    /**
     * Gets issueType
     *
     * @return \GiteeEnterprise\Model\IssueType
     */
    public function getIssueType()
    {
        return $this->container['issueType'];
    }

    /**
     * Sets issueType
     *
     * @param \GiteeEnterprise\Model\IssueType $issueType 任务类型
     *
     * @return $this
     */
    public function setIssueType($issueType)
    {
        $this->container['issueType'] = $issueType;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \GiteeEnterprise\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \GiteeEnterprise\Model\Label[] $labels 任务关联的标签
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets issueExtra
     *
     * @return null[]
     */
    public function getIssueExtra()
    {
        return $this->container['issueExtra'];
    }

    /**
     * Sets issueExtra
     *
     * @param null[] $issueExtra 任务自定义字段值
     *
     * @return $this
     */
    public function setIssueExtra($issueExtra)
    {
        $this->container['issueExtra'] = $issueExtra;

        return $this;
    }

    /**
     * Gets planStartedAt
     *
     * @return string
     */
    public function getPlanStartedAt()
    {
        return $this->container['planStartedAt'];
    }

    /**
     * Sets planStartedAt
     *
     * @param string $planStartedAt 计划开始时间
     *
     * @return $this
     */
    public function setPlanStartedAt($planStartedAt)
    {
        $this->container['planStartedAt'] = $planStartedAt;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return string
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param string $deadline 计划完成时间
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets finishedAt
     *
     * @return string
     */
    public function getFinishedAt()
    {
        return $this->container['finishedAt'];
    }

    /**
     * Sets finishedAt
     *
     * @param string $finishedAt 实际完成时间
     *
     * @return $this
     */
    public function setFinishedAt($finishedAt)
    {
        $this->container['finishedAt'] = $finishedAt;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return string
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param string $startedAt 实际开始时间
     *
     * @return $this
     */
    public function setStartedAt($startedAt)
    {
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets securityHole
     *
     * @return bool
     */
    public function getSecurityHole()
    {
        return $this->container['securityHole'];
    }

    /**
     * Sets securityHole
     *
     * @param bool $securityHole 是否是私有Issue
     *
     * @return $this
     */
    public function setSecurityHole($securityHole)
    {
        $this->container['securityHole'] = $securityHole;

        return $this;
    }

    /**
     * Gets isStar
     *
     * @return bool
     */
    public function getIsStar()
    {
        return $this->container['isStar'];
    }

    /**
     * Sets isStar
     *
     * @param bool $isStar 当前用户是否收藏过此任务
     *
     * @return $this
     */
    public function setIsStar($isStar)
    {
        $this->container['isStar'] = $isStar;

        return $this;
    }

    /**
     * Gets kanbanInfo
     *
     * @return object
     */
    public function getKanbanInfo()
    {
        return $this->container['kanbanInfo'];
    }

    /**
     * Sets kanbanInfo
     *
     * @param object $kanbanInfo 所属看板
     *
     * @return $this
     */
    public function setKanbanInfo($kanbanInfo)
    {
        $this->container['kanbanInfo'] = $kanbanInfo;

        return $this;
    }

    /**
     * Gets scrumSprint
     *
     * @return \GiteeEnterprise\Model\ScrumSprint
     */
    public function getScrumSprint()
    {
        return $this->container['scrumSprint'];
    }

    /**
     * Sets scrumSprint
     *
     * @param \GiteeEnterprise\Model\ScrumSprint $scrumSprint 关联迭代
     *
     * @return $this
     */
    public function setScrumSprint($scrumSprint)
    {
        $this->container['scrumSprint'] = $scrumSprint;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 任务内容(markdown 格式)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionHtml
     *
     * @return string
     */
    public function getDescriptionHtml()
    {
        return $this->container['descriptionHtml'];
    }

    /**
     * Sets descriptionHtml
     *
     * @param string $descriptionHtml 任务内容(html 格式)
     *
     * @return $this
     */
    public function setDescriptionHtml($descriptionHtml)
    {
        $this->container['descriptionHtml'] = $descriptionHtml;

        return $this;
    }

    /**
     * Gets descriptionJson
     *
     * @return string
     */
    public function getDescriptionJson()
    {
        return $this->container['descriptionJson'];
    }

    /**
     * Sets descriptionJson
     *
     * @param string $descriptionJson 工作项 JSON 格式内容
     *
     * @return $this
     */
    public function setDescriptionJson($descriptionJson)
    {
        $this->container['descriptionJson'] = $descriptionJson;

        return $this;
    }

    /**
     * Gets descriptionType
     *
     * @return string
     */
    public function getDescriptionType()
    {
        return $this->container['descriptionType'];
    }

    /**
     * Sets descriptionType
     *
     * @param string $descriptionType 工作项描述文本类型
     *
     * @return $this
     */
    public function setDescriptionType($descriptionType)
    {
        $this->container['descriptionType'] = $descriptionType;

        return $this;
    }

    /**
     * Gets issueUrl
     *
     * @return string
     */
    public function getIssueUrl()
    {
        return $this->container['issueUrl'];
    }

    /**
     * Sets issueUrl
     *
     * @param string $issueUrl PC的任务详情链接
     *
     * @return $this
     */
    public function setIssueUrl($issueUrl)
    {
        $this->container['issueUrl'] = $issueUrl;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \GiteeEnterprise\Model\ProgramWithComponents
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \GiteeEnterprise\Model\ProgramWithComponents $program 关联的项目
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \GiteeEnterprise\Model\Project
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \GiteeEnterprise\Model\Project $project 关联的仓库
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \GiteeEnterprise\Model\Issue
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \GiteeEnterprise\Model\Issue $parent 父级任务
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets operateLogsCount
     *
     * @return int
     */
    public function getOperateLogsCount()
    {
        return $this->container['operateLogsCount'];
    }

    /**
     * Sets operateLogsCount
     *
     * @param int $operateLogsCount 操作日志的数量
     *
     * @return $this
     */
    public function setOperateLogsCount($operateLogsCount)
    {
        $this->container['operateLogsCount'] = $operateLogsCount;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return object
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param object $reactions 表态
     *
     * @return $this
     */
    public function setReactions($reactions)
    {
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets attachFileIds
     *
     * @return int
     */
    public function getAttachFileIds()
    {
        return $this->container['attachFileIds'];
    }

    /**
     * Sets attachFileIds
     *
     * @param int $attachFileIds issue附件id列表
     *
     * @return $this
     */
    public function setAttachFileIds($attachFileIds)
    {
        $this->container['attachFileIds'] = $attachFileIds;

        return $this;
    }

    /**
     * Gets securityHoleOperater
     *
     * @return bool
     */
    public function getSecurityHoleOperater()
    {
        return $this->container['securityHoleOperater'];
    }

    /**
     * Sets securityHoleOperater
     *
     * @param bool $securityHoleOperater 私有issue操作者
     *
     * @return $this
     */
    public function setSecurityHoleOperater($securityHoleOperater)
    {
        $this->container['securityHoleOperater'] = $securityHoleOperater;

        return $this;
    }

    /**
     * Gets scrumVersion
     *
     * @return \GiteeEnterprise\Model\EnterpriseScrumVersion
     */
    public function getScrumVersion()
    {
        return $this->container['scrumVersion'];
    }

    /**
     * Sets scrumVersion
     *
     * @param \GiteeEnterprise\Model\EnterpriseScrumVersion $scrumVersion 关联版本
     *
     * @return $this
     */
    public function setScrumVersion($scrumVersion)
    {
        $this->container['scrumVersion'] = $scrumVersion;

        return $this;
    }

    /**
     * Gets starredUsers
     *
     * @return \GiteeEnterprise\Model\UserWithRemark[]
     */
    public function getStarredUsers()
    {
        return $this->container['starredUsers'];
    }

    /**
     * Sets starredUsers
     *
     * @param \GiteeEnterprise\Model\UserWithRemark[] $starredUsers 收藏了该任务的用户列表
     *
     * @return $this
     */
    public function setStarredUsers($starredUsers)
    {
        $this->container['starredUsers'] = $starredUsers;

        return $this;
    }

    /**
     * Gets triggerExecuteInfo
     *
     * @return bool
     */
    public function getTriggerExecuteInfo()
    {
        return $this->container['triggerExecuteInfo'];
    }

    /**
     * Sets triggerExecuteInfo
     *
     * @param bool $triggerExecuteInfo 是否有异步执行的触发器
     *
     * @return $this
     */
    public function setTriggerExecuteInfo($triggerExecuteInfo)
    {
        $this->container['triggerExecuteInfo'] = $triggerExecuteInfo;

        return $this;
    }

    /**
     * Gets estimatedDuration
     *
     * @return float
     */
    public function getEstimatedDuration()
    {
        return $this->container['estimatedDuration'];
    }

    /**
     * Sets estimatedDuration
     *
     * @param float $estimatedDuration 预估工时(单位小时)
     *
     * @return $this
     */
    public function setEstimatedDuration($estimatedDuration)
    {
        $this->container['estimatedDuration'] = $estimatedDuration;

        return $this;
    }

    /**
     * Gets registeredDuration
     *
     * @return float
     */
    public function getRegisteredDuration()
    {
        return $this->container['registeredDuration'];
    }

    /**
     * Sets registeredDuration
     *
     * @param float $registeredDuration 登记工时(单位小时)
     *
     * @return $this
     */
    public function setRegisteredDuration($registeredDuration)
    {
        $this->container['registeredDuration'] = $registeredDuration;

        return $this;
    }

    /**
     * Gets leftDuration
     *
     * @return float
     */
    public function getLeftDuration()
    {
        return $this->container['leftDuration'];
    }

    /**
     * Sets leftDuration
     *
     * @param float $leftDuration 剩余工时(单位小时)
     *
     * @return $this
     */
    public function setLeftDuration($leftDuration)
    {
        $this->container['leftDuration'] = $leftDuration;

        return $this;
    }

    /**
     * Gets isInheritSatisfying
     *
     * @return bool
     */
    public function getIsInheritSatisfying()
    {
        return $this->container['isInheritSatisfying'];
    }

    /**
     * Sets isInheritSatisfying
     *
     * @param bool $isInheritSatisfying 子工作项是否符合层级关系
     *
     * @return $this
     */
    public function setIsInheritSatisfying($isInheritSatisfying)
    {
        $this->container['isInheritSatisfying'] = $isInheritSatisfying;

        return $this;
    }

    /**
     * Gets version
     *
     * @return null[]
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param null[] $version 版本号集合
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \GiteeEnterprise\Model\Issue[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \GiteeEnterprise\Model\Issue[] $children 子任务
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets childrenCount
     *
     * @return int
     */
    public function getChildrenCount()
    {
        return $this->container['childrenCount'];
    }

    /**
     * Sets childrenCount
     *
     * @param int $childrenCount 子任务数量
     *
     * @return $this
     */
    public function setChildrenCount($childrenCount)
    {
        $this->container['childrenCount'] = $childrenCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


