<?php
/**
 * CheckRunOutOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * CheckRunOutOut Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckRunOutOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckRunOutOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checkRunId' => 'int',
        'title' => 'string',
        'summary' => 'string',
        'summaryHtml' => 'string',
        'text' => 'string',
        'textHtml' => 'string',
        'images' => 'null[]',
        'annotations' => '\GiteeEnterprise\Model\Annotation[]',
        'loadMoreAnnotationsPath' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checkRunId' => 'int32',
        'title' => null,
        'summary' => null,
        'summaryHtml' => null,
        'text' => null,
        'textHtml' => null,
        'images' => null,
        'annotations' => null,
        'loadMoreAnnotationsPath' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checkRunId' => 'check_run_id',
        'title' => 'title',
        'summary' => 'summary',
        'summaryHtml' => 'summary_html',
        'text' => 'text',
        'textHtml' => 'text_html',
        'images' => 'images',
        'annotations' => 'annotations',
        'loadMoreAnnotationsPath' => 'load_more_annotations_path'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checkRunId' => 'setCheckRunId',
        'title' => 'setTitle',
        'summary' => 'setSummary',
        'summaryHtml' => 'setSummaryHtml',
        'text' => 'setText',
        'textHtml' => 'setTextHtml',
        'images' => 'setImages',
        'annotations' => 'setAnnotations',
        'loadMoreAnnotationsPath' => 'setLoadMoreAnnotationsPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checkRunId' => 'getCheckRunId',
        'title' => 'getTitle',
        'summary' => 'getSummary',
        'summaryHtml' => 'getSummaryHtml',
        'text' => 'getText',
        'textHtml' => 'getTextHtml',
        'images' => 'getImages',
        'annotations' => 'getAnnotations',
        'loadMoreAnnotationsPath' => 'getLoadMoreAnnotationsPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checkRunId'] = isset($data['checkRunId']) ? $data['checkRunId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['summaryHtml'] = isset($data['summaryHtml']) ? $data['summaryHtml'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['textHtml'] = isset($data['textHtml']) ? $data['textHtml'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['annotations'] = isset($data['annotations']) ? $data['annotations'] : null;
        $this->container['loadMoreAnnotationsPath'] = isset($data['loadMoreAnnotationsPath']) ? $data['loadMoreAnnotationsPath'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checkRunId
     *
     * @return int
     */
    public function getCheckRunId()
    {
        return $this->container['checkRunId'];
    }

    /**
     * Sets checkRunId
     *
     * @param int $checkRunId 门禁ID
     *
     * @return $this
     */
    public function setCheckRunId($checkRunId)
    {
        $this->container['checkRunId'] = $checkRunId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 门禁名称
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary 总结
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets summaryHtml
     *
     * @return string
     */
    public function getSummaryHtml()
    {
        return $this->container['summaryHtml'];
    }

    /**
     * Sets summaryHtml
     *
     * @param string $summaryHtml 总结html
     *
     * @return $this
     */
    public function setSummaryHtml($summaryHtml)
    {
        $this->container['summaryHtml'] = $summaryHtml;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text 内容
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets textHtml
     *
     * @return string
     */
    public function getTextHtml()
    {
        return $this->container['textHtml'];
    }

    /**
     * Sets textHtml
     *
     * @param string $textHtml 内容html
     *
     * @return $this
     */
    public function setTextHtml($textHtml)
    {
        $this->container['textHtml'] = $textHtml;

        return $this;
    }

    /**
     * Gets images
     *
     * @return null[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param null[] $images 图片
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets annotations
     *
     * @return \GiteeEnterprise\Model\Annotation[]
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     *
     * @param \GiteeEnterprise\Model\Annotation[] $annotations 门禁注释详情
     *
     * @return $this
     */
    public function setAnnotations($annotations)
    {
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets loadMoreAnnotationsPath
     *
     * @return string
     */
    public function getLoadMoreAnnotationsPath()
    {
        return $this->container['loadMoreAnnotationsPath'];
    }

    /**
     * Sets loadMoreAnnotationsPath
     *
     * @param string $loadMoreAnnotationsPath 获取更多门禁详情路径
     *
     * @return $this
     */
    public function setLoadMoreAnnotationsPath($loadMoreAnnotationsPath)
    {
        $this->container['loadMoreAnnotationsPath'] = $loadMoreAnnotationsPath;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


