<?php
/**
 * ProjectGroupDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectGroupDetail Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectGroupDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectGroupDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'completeName' => 'string',
        'completePath' => 'string',
        'name' => 'string',
        'parentId' => 'int',
        'path' => 'string',
        'description' => 'string',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'isExtra' => 'bool',
        'isLeaf' => 'bool',
        'owner' => '\GiteeEnterprise\Model\User',
        'root' => '\GiteeEnterprise\Model\ProjectGroupRoot',
        'memberCount' => 'int',
        'projectCount' => 'int',
        'creator' => '\GiteeEnterprise\Model\UserWithRemark',
        'parent' => '\GiteeEnterprise\Model\ModelNamespace',
        'completeNameWithoutNamespace' => 'string',
        'subGroupCount' => 'int',
        'hasChildren' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'completeName' => null,
        'completePath' => null,
        'name' => null,
        'parentId' => 'int32',
        'path' => null,
        'description' => null,
        'createdAt' => 'DateTime',
        'updatedAt' => 'DateTime',
        'isExtra' => null,
        'isLeaf' => null,
        'owner' => null,
        'root' => null,
        'memberCount' => 'int32',
        'projectCount' => 'int32',
        'creator' => null,
        'parent' => null,
        'completeNameWithoutNamespace' => null,
        'subGroupCount' => 'int32',
        'hasChildren' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'completeName' => 'complete_name',
        'completePath' => 'complete_path',
        'name' => 'name',
        'parentId' => 'parent_id',
        'path' => 'path',
        'description' => 'description',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'isExtra' => 'is_extra',
        'isLeaf' => 'is_leaf',
        'owner' => 'owner',
        'root' => 'root',
        'memberCount' => 'member_count',
        'projectCount' => 'project_count',
        'creator' => 'creator',
        'parent' => 'parent',
        'completeNameWithoutNamespace' => 'complete_name_without_namespace',
        'subGroupCount' => 'sub_group_count',
        'hasChildren' => 'has_children'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'completeName' => 'setCompleteName',
        'completePath' => 'setCompletePath',
        'name' => 'setName',
        'parentId' => 'setParentId',
        'path' => 'setPath',
        'description' => 'setDescription',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'isExtra' => 'setIsExtra',
        'isLeaf' => 'setIsLeaf',
        'owner' => 'setOwner',
        'root' => 'setRoot',
        'memberCount' => 'setMemberCount',
        'projectCount' => 'setProjectCount',
        'creator' => 'setCreator',
        'parent' => 'setParent',
        'completeNameWithoutNamespace' => 'setCompleteNameWithoutNamespace',
        'subGroupCount' => 'setSubGroupCount',
        'hasChildren' => 'setHasChildren'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'completeName' => 'getCompleteName',
        'completePath' => 'getCompletePath',
        'name' => 'getName',
        'parentId' => 'getParentId',
        'path' => 'getPath',
        'description' => 'getDescription',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'isExtra' => 'getIsExtra',
        'isLeaf' => 'getIsLeaf',
        'owner' => 'getOwner',
        'root' => 'getRoot',
        'memberCount' => 'getMemberCount',
        'projectCount' => 'getProjectCount',
        'creator' => 'getCreator',
        'parent' => 'getParent',
        'completeNameWithoutNamespace' => 'getCompleteNameWithoutNamespace',
        'subGroupCount' => 'getSubGroupCount',
        'hasChildren' => 'getHasChildren'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['completeName'] = isset($data['completeName']) ? $data['completeName'] : null;
        $this->container['completePath'] = isset($data['completePath']) ? $data['completePath'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['isExtra'] = isset($data['isExtra']) ? $data['isExtra'] : null;
        $this->container['isLeaf'] = isset($data['isLeaf']) ? $data['isLeaf'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['root'] = isset($data['root']) ? $data['root'] : null;
        $this->container['memberCount'] = isset($data['memberCount']) ? $data['memberCount'] : null;
        $this->container['projectCount'] = isset($data['projectCount']) ? $data['projectCount'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['completeNameWithoutNamespace'] = isset($data['completeNameWithoutNamespace']) ? $data['completeNameWithoutNamespace'] : null;
        $this->container['subGroupCount'] = isset($data['subGroupCount']) ? $data['subGroupCount'] : null;
        $this->container['hasChildren'] = isset($data['hasChildren']) ? $data['hasChildren'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 仓库组 id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets completeName
     *
     * @return string
     */
    public function getCompleteName()
    {
        return $this->container['completeName'];
    }

    /**
     * Sets completeName
     *
     * @param string $completeName 仓库组完整名称
     *
     * @return $this
     */
    public function setCompleteName($completeName)
    {
        $this->container['completeName'] = $completeName;

        return $this;
    }

    /**
     * Gets completePath
     *
     * @return string
     */
    public function getCompletePath()
    {
        return $this->container['completePath'];
    }

    /**
     * Sets completePath
     *
     * @param string $completePath 仓库组完整路径
     *
     * @return $this
     */
    public function setCompletePath($completePath)
    {
        $this->container['completePath'] = $completePath;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 仓库组名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId 仓库组上级id
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 仓库组路径
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 仓库组简介
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt 创建时间
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt 更新时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets isExtra
     *
     * @return bool
     */
    public function getIsExtra()
    {
        return $this->container['isExtra'];
    }

    /**
     * Sets isExtra
     *
     * @param bool $isExtra 是否为断层仓库组
     *
     * @return $this
     */
    public function setIsExtra($isExtra)
    {
        $this->container['isExtra'] = $isExtra;

        return $this;
    }

    /**
     * Gets isLeaf
     *
     * @return bool
     */
    public function getIsLeaf()
    {
        return $this->container['isLeaf'];
    }

    /**
     * Sets isLeaf
     *
     * @param bool $isLeaf 是否为叶子节点
     *
     * @return $this
     */
    public function setIsLeaf($isLeaf)
    {
        $this->container['isLeaf'] = $isLeaf;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \GiteeEnterprise\Model\User
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \GiteeEnterprise\Model\User $owner 负责人
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets root
     *
     * @return \GiteeEnterprise\Model\ProjectGroupRoot
     */
    public function getRoot()
    {
        return $this->container['root'];
    }

    /**
     * Sets root
     *
     * @param \GiteeEnterprise\Model\ProjectGroupRoot $root 归属团队
     *
     * @return $this
     */
    public function setRoot($root)
    {
        $this->container['root'] = $root;

        return $this;
    }

    /**
     * Gets memberCount
     *
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['memberCount'];
    }

    /**
     * Sets memberCount
     *
     * @param int $memberCount 成员数量
     *
     * @return $this
     */
    public function setMemberCount($memberCount)
    {
        $this->container['memberCount'] = $memberCount;

        return $this;
    }

    /**
     * Gets projectCount
     *
     * @return int
     */
    public function getProjectCount()
    {
        return $this->container['projectCount'];
    }

    /**
     * Sets projectCount
     *
     * @param int $projectCount 项目数量
     *
     * @return $this
     */
    public function setProjectCount($projectCount)
    {
        $this->container['projectCount'] = $projectCount;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $creator 创建者
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \GiteeEnterprise\Model\ModelNamespace
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \GiteeEnterprise\Model\ModelNamespace $parent 父级 namespace
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets completeNameWithoutNamespace
     *
     * @return string
     */
    public function getCompleteNameWithoutNamespace()
    {
        return $this->container['completeNameWithoutNamespace'];
    }

    /**
     * Sets completeNameWithoutNamespace
     *
     * @param string $completeNameWithoutNamespace 不包含归属名称的全名称
     *
     * @return $this
     */
    public function setCompleteNameWithoutNamespace($completeNameWithoutNamespace)
    {
        $this->container['completeNameWithoutNamespace'] = $completeNameWithoutNamespace;

        return $this;
    }

    /**
     * Gets subGroupCount
     *
     * @return int
     */
    public function getSubGroupCount()
    {
        return $this->container['subGroupCount'];
    }

    /**
     * Sets subGroupCount
     *
     * @param int $subGroupCount 子组数量
     *
     * @return $this
     */
    public function setSubGroupCount($subGroupCount)
    {
        $this->container['subGroupCount'] = $subGroupCount;

        return $this;
    }

    /**
     * Gets hasChildren
     *
     * @return bool
     */
    public function getHasChildren()
    {
        return $this->container['hasChildren'];
    }

    /**
     * Sets hasChildren
     *
     * @param bool $hasChildren 是否包含子组
     *
     * @return $this
     */
    public function setHasChildren($hasChildren)
    {
        $this->container['hasChildren'] = $hasChildren;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


