<?php
/**
 * EnterpriseRoleDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.333
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * EnterpriseRoleDetail Class Doc Comment
 *
 * @category Class
 * @description 更新企业角色
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseRoleDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnterpriseRoleDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'isSystemDefault' => 'bool',
        'ident' => 'string',
        'isDefault' => 'bool',
        'weekReport' => '\GiteeEnterprise\Model\WeekReport',
        'issue' => '\GiteeEnterprise\Model\Issue',
        'program' => '\GiteeEnterprise\Model\Program',
        'project' => '\GiteeEnterprise\Model\Project',
        'projectGroup' => '\GiteeEnterprise\Model\ProjectGroup',
        'doc' => '\GiteeEnterprise\Model\Doc',
        'member' => '\GiteeEnterprise\Model\Member',
        'statistic' => '\GiteeEnterprise\Model\Statistic',
        'isAdmin' => 'bool',
        'testPlan' => '\GiteeEnterprise\Model\TestPlan',
        'testRepository' => '\GiteeEnterprise\Model\TestRepository',
        'giteegoPipeline' => '\GiteeEnterprise\Model\GiteegoPipeline',
        'adminRules' => 'string',
        'access' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'description' => null,
        'isSystemDefault' => null,
        'ident' => null,
        'isDefault' => null,
        'weekReport' => null,
        'issue' => null,
        'program' => null,
        'project' => null,
        'projectGroup' => null,
        'doc' => null,
        'member' => null,
        'statistic' => null,
        'isAdmin' => null,
        'testPlan' => null,
        'testRepository' => null,
        'giteegoPipeline' => null,
        'adminRules' => null,
        'access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'isSystemDefault' => 'is_system_default',
        'ident' => 'ident',
        'isDefault' => 'is_default',
        'weekReport' => 'week_report',
        'issue' => 'issue',
        'program' => 'program',
        'project' => 'project',
        'projectGroup' => 'project_group',
        'doc' => 'doc',
        'member' => 'member',
        'statistic' => 'statistic',
        'isAdmin' => 'is_admin',
        'testPlan' => 'test_plan',
        'testRepository' => 'test_repository',
        'giteegoPipeline' => 'giteego_pipeline',
        'adminRules' => 'admin_rules',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'isSystemDefault' => 'setIsSystemDefault',
        'ident' => 'setIdent',
        'isDefault' => 'setIsDefault',
        'weekReport' => 'setWeekReport',
        'issue' => 'setIssue',
        'program' => 'setProgram',
        'project' => 'setProject',
        'projectGroup' => 'setProjectGroup',
        'doc' => 'setDoc',
        'member' => 'setMember',
        'statistic' => 'setStatistic',
        'isAdmin' => 'setIsAdmin',
        'testPlan' => 'setTestPlan',
        'testRepository' => 'setTestRepository',
        'giteegoPipeline' => 'setGiteegoPipeline',
        'adminRules' => 'setAdminRules',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'isSystemDefault' => 'getIsSystemDefault',
        'ident' => 'getIdent',
        'isDefault' => 'getIsDefault',
        'weekReport' => 'getWeekReport',
        'issue' => 'getIssue',
        'program' => 'getProgram',
        'project' => 'getProject',
        'projectGroup' => 'getProjectGroup',
        'doc' => 'getDoc',
        'member' => 'getMember',
        'statistic' => 'getStatistic',
        'isAdmin' => 'getIsAdmin',
        'testPlan' => 'getTestPlan',
        'testRepository' => 'getTestRepository',
        'giteegoPipeline' => 'getGiteegoPipeline',
        'adminRules' => 'getAdminRules',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['isSystemDefault'] = isset($data['isSystemDefault']) ? $data['isSystemDefault'] : null;
        $this->container['ident'] = isset($data['ident']) ? $data['ident'] : null;
        $this->container['isDefault'] = isset($data['isDefault']) ? $data['isDefault'] : null;
        $this->container['weekReport'] = isset($data['weekReport']) ? $data['weekReport'] : null;
        $this->container['issue'] = isset($data['issue']) ? $data['issue'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['projectGroup'] = isset($data['projectGroup']) ? $data['projectGroup'] : null;
        $this->container['doc'] = isset($data['doc']) ? $data['doc'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['statistic'] = isset($data['statistic']) ? $data['statistic'] : null;
        $this->container['isAdmin'] = isset($data['isAdmin']) ? $data['isAdmin'] : null;
        $this->container['testPlan'] = isset($data['testPlan']) ? $data['testPlan'] : null;
        $this->container['testRepository'] = isset($data['testRepository']) ? $data['testRepository'] : null;
        $this->container['giteegoPipeline'] = isset($data['giteegoPipeline']) ? $data['giteegoPipeline'] : null;
        $this->container['adminRules'] = isset($data['adminRules']) ? $data['adminRules'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 角色 id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 角色名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 角色备注信息
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isSystemDefault
     *
     * @return bool
     */
    public function getIsSystemDefault()
    {
        return $this->container['isSystemDefault'];
    }

    /**
     * Sets isSystemDefault
     *
     * @param bool $isSystemDefault 是否系统默认角色
     *
     * @return $this
     */
    public function setIsSystemDefault($isSystemDefault)
    {
        $this->container['isSystemDefault'] = $isSystemDefault;

        return $this;
    }

    /**
     * Gets ident
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string $ident 角色类型标识符
     *
     * @return $this
     */
    public function setIdent($ident)
    {
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets isDefault
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['isDefault'];
    }

    /**
     * Sets isDefault
     *
     * @param bool $isDefault 是否企业默认角色
     *
     * @return $this
     */
    public function setIsDefault($isDefault)
    {
        $this->container['isDefault'] = $isDefault;

        return $this;
    }

    /**
     * Gets weekReport
     *
     * @return \GiteeEnterprise\Model\WeekReport
     */
    public function getWeekReport()
    {
        return $this->container['weekReport'];
    }

    /**
     * Sets weekReport
     *
     * @param \GiteeEnterprise\Model\WeekReport $weekReport 周报的权限属性
     *
     * @return $this
     */
    public function setWeekReport($weekReport)
    {
        $this->container['weekReport'] = $weekReport;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return \GiteeEnterprise\Model\Issue
     */
    public function getIssue()
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param \GiteeEnterprise\Model\Issue $issue 任务的权限属性
     *
     * @return $this
     */
    public function setIssue($issue)
    {
        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \GiteeEnterprise\Model\Program
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \GiteeEnterprise\Model\Program $program 项目的权限属性
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \GiteeEnterprise\Model\Project
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \GiteeEnterprise\Model\Project $project 仓库的权限属性
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets projectGroup
     *
     * @return \GiteeEnterprise\Model\ProjectGroup
     */
    public function getProjectGroup()
    {
        return $this->container['projectGroup'];
    }

    /**
     * Sets projectGroup
     *
     * @param \GiteeEnterprise\Model\ProjectGroup $projectGroup 仓库组的权限属性
     *
     * @return $this
     */
    public function setProjectGroup($projectGroup)
    {
        $this->container['projectGroup'] = $projectGroup;

        return $this;
    }

    /**
     * Gets doc
     *
     * @return \GiteeEnterprise\Model\Doc
     */
    public function getDoc()
    {
        return $this->container['doc'];
    }

    /**
     * Sets doc
     *
     * @param \GiteeEnterprise\Model\Doc $doc 文档的权限属性
     *
     * @return $this
     */
    public function setDoc($doc)
    {
        $this->container['doc'] = $doc;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \GiteeEnterprise\Model\Member
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \GiteeEnterprise\Model\Member $member 文档的权限属性
     *
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets statistic
     *
     * @return \GiteeEnterprise\Model\Statistic
     */
    public function getStatistic()
    {
        return $this->container['statistic'];
    }

    /**
     * Sets statistic
     *
     * @param \GiteeEnterprise\Model\Statistic $statistic 统计的权限属性
     *
     * @return $this
     */
    public function setStatistic($statistic)
    {
        $this->container['statistic'] = $statistic;

        return $this;
    }

    /**
     * Gets isAdmin
     *
     * @return bool
     */
    public function getIsAdmin()
    {
        return $this->container['isAdmin'];
    }

    /**
     * Sets isAdmin
     *
     * @param bool $isAdmin 是否是企业管理员角色
     *
     * @return $this
     */
    public function setIsAdmin($isAdmin)
    {
        $this->container['isAdmin'] = $isAdmin;

        return $this;
    }

    /**
     * Gets testPlan
     *
     * @return \GiteeEnterprise\Model\TestPlan
     */
    public function getTestPlan()
    {
        return $this->container['testPlan'];
    }

    /**
     * Sets testPlan
     *
     * @param \GiteeEnterprise\Model\TestPlan $testPlan 测试用例计划权限属性
     *
     * @return $this
     */
    public function setTestPlan($testPlan)
    {
        $this->container['testPlan'] = $testPlan;

        return $this;
    }

    /**
     * Gets testRepository
     *
     * @return \GiteeEnterprise\Model\TestRepository
     */
    public function getTestRepository()
    {
        return $this->container['testRepository'];
    }

    /**
     * Sets testRepository
     *
     * @param \GiteeEnterprise\Model\TestRepository $testRepository 测试用例库权限属性
     *
     * @return $this
     */
    public function setTestRepository($testRepository)
    {
        $this->container['testRepository'] = $testRepository;

        return $this;
    }

    /**
     * Gets giteegoPipeline
     *
     * @return \GiteeEnterprise\Model\GiteegoPipeline
     */
    public function getGiteegoPipeline()
    {
        return $this->container['giteegoPipeline'];
    }

    /**
     * Sets giteegoPipeline
     *
     * @param \GiteeEnterprise\Model\GiteegoPipeline $giteegoPipeline Gitee Go 流水线
     *
     * @return $this
     */
    public function setGiteegoPipeline($giteegoPipeline)
    {
        $this->container['giteegoPipeline'] = $giteegoPipeline;

        return $this;
    }

    /**
     * Gets adminRules
     *
     * @return string
     */
    public function getAdminRules()
    {
        return $this->container['adminRules'];
    }

    /**
     * Sets adminRules
     *
     * @param string $adminRules adminRules
     *
     * @return $this
     */
    public function setAdminRules($adminRules)
    {
        $this->container['adminRules'] = $adminRules;

        return $this;
    }

    /**
     * Gets access
     *
     * @return object
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param object $access 能否访问企业
     *
     * @return $this
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


