<?php
/**
 * IssueTypeInEnterprise
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * IssueTypeInEnterprise Class Doc Comment
 *
 * @category Class
 * @description 获取企业任务类型列表
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssueTypeInEnterprise implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IssueTypeInEnterprise';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'title' => 'string',
        'template' => 'string',
        'ident' => 'string',
        'color' => 'string',
        'isSystem' => 'bool',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'category' => 'string',
        'description' => 'string',
        'programsCount' => 'int',
        'state' => 'int',
        'isMigrating' => 'bool',
        'isAnyissueUsing' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'title' => null,
        'template' => null,
        'ident' => null,
        'color' => null,
        'isSystem' => null,
        'createdAt' => 'DateTime',
        'updatedAt' => 'DateTime',
        'category' => null,
        'description' => null,
        'programsCount' => 'int32',
        'state' => 'int32',
        'isMigrating' => null,
        'isAnyissueUsing' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'template' => 'template',
        'ident' => 'ident',
        'color' => 'color',
        'isSystem' => 'is_system',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'category' => 'category',
        'description' => 'description',
        'programsCount' => 'programs_count',
        'state' => 'state',
        'isMigrating' => 'is_migrating',
        'isAnyissueUsing' => 'is_anyissue_using'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'template' => 'setTemplate',
        'ident' => 'setIdent',
        'color' => 'setColor',
        'isSystem' => 'setIsSystem',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'category' => 'setCategory',
        'description' => 'setDescription',
        'programsCount' => 'setProgramsCount',
        'state' => 'setState',
        'isMigrating' => 'setIsMigrating',
        'isAnyissueUsing' => 'setIsAnyissueUsing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'template' => 'getTemplate',
        'ident' => 'getIdent',
        'color' => 'getColor',
        'isSystem' => 'getIsSystem',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'category' => 'getCategory',
        'description' => 'getDescription',
        'programsCount' => 'getProgramsCount',
        'state' => 'getState',
        'isMigrating' => 'getIsMigrating',
        'isAnyissueUsing' => 'getIsAnyissueUsing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['ident'] = isset($data['ident']) ? $data['ident'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['isSystem'] = isset($data['isSystem']) ? $data['isSystem'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['programsCount'] = isset($data['programsCount']) ? $data['programsCount'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['isMigrating'] = isset($data['isMigrating']) ? $data['isMigrating'] : null;
        $this->container['isAnyissueUsing'] = isset($data['isAnyissueUsing']) ? $data['isAnyissueUsing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 任务类型 ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 任务类型的名称
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string $template 任务类型模板
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets ident
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string $ident 唯一标识符
     *
     * @return $this
     */
    public function setIdent($ident)
    {
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color 颜色
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets isSystem
     *
     * @return bool
     */
    public function getIsSystem()
    {
        return $this->container['isSystem'];
    }

    /**
     * Sets isSystem
     *
     * @param bool $isSystem 是否系统默认类型
     *
     * @return $this
     */
    public function setIsSystem($isSystem)
    {
        $this->container['isSystem'] = $isSystem;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt 任务类型创建时间
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt 任务类型更新时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category 类型属性
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 任务类型描述
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets programsCount
     *
     * @return int
     */
    public function getProgramsCount()
    {
        return $this->container['programsCount'];
    }

    /**
     * Sets programsCount
     *
     * @param int $programsCount 使用的项目数量
     *
     * @return $this
     */
    public function setProgramsCount($programsCount)
    {
        $this->container['programsCount'] = $programsCount;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state 任务类型的状态
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets isMigrating
     *
     * @return bool
     */
    public function getIsMigrating()
    {
        return $this->container['isMigrating'];
    }

    /**
     * Sets isMigrating
     *
     * @param bool $isMigrating 是否正在迁移
     *
     * @return $this
     */
    public function setIsMigrating($isMigrating)
    {
        $this->container['isMigrating'] = $isMigrating;

        return $this;
    }

    /**
     * Gets isAnyissueUsing
     *
     * @return bool
     */
    public function getIsAnyissueUsing()
    {
        return $this->container['isAnyissueUsing'];
    }

    /**
     * Sets isAnyissueUsing
     *
     * @param bool $isAnyissueUsing 是否有工作项正在使用
     *
     * @return $this
     */
    public function setIsAnyissueUsing($isAnyissueUsing)
    {
        $this->container['isAnyissueUsing'] = $isAnyissueUsing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


