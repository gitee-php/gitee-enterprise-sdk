<?php
/**
 * EnterpriseProgramsList
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * EnterpriseProgramsList Class Doc Comment
 *
 * @category Class
 * @description 获取企业项目的统计信息
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseProgramsList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnterpriseProgramsList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'closeIssueCount' => 'null[]',
        'codeLineCount' => 'null[]',
        'commitCount' => 'null[]',
        'delayIssueCount' => 'null[]',
        'finishIssueCount' => 'null[]',
        'dateList' => 'null[]',
        'programIds' => 'null[]',
        'programs' => '\GiteeEnterprise\Model\EnterpriseProgram',
        'startDate' => 'string',
        'endDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'closeIssueCount' => null,
        'codeLineCount' => null,
        'commitCount' => null,
        'delayIssueCount' => null,
        'finishIssueCount' => null,
        'dateList' => null,
        'programIds' => null,
        'programs' => null,
        'startDate' => 'DateTime',
        'endDate' => 'DateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closeIssueCount' => 'close_issue_count',
        'codeLineCount' => 'code_line_count',
        'commitCount' => 'commit_count',
        'delayIssueCount' => 'delay_issue_count',
        'finishIssueCount' => 'finish_issue_count',
        'dateList' => 'date_list',
        'programIds' => 'program_ids',
        'programs' => 'programs',
        'startDate' => 'start_date',
        'endDate' => 'end_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closeIssueCount' => 'setCloseIssueCount',
        'codeLineCount' => 'setCodeLineCount',
        'commitCount' => 'setCommitCount',
        'delayIssueCount' => 'setDelayIssueCount',
        'finishIssueCount' => 'setFinishIssueCount',
        'dateList' => 'setDateList',
        'programIds' => 'setProgramIds',
        'programs' => 'setPrograms',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closeIssueCount' => 'getCloseIssueCount',
        'codeLineCount' => 'getCodeLineCount',
        'commitCount' => 'getCommitCount',
        'delayIssueCount' => 'getDelayIssueCount',
        'finishIssueCount' => 'getFinishIssueCount',
        'dateList' => 'getDateList',
        'programIds' => 'getProgramIds',
        'programs' => 'getPrograms',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closeIssueCount'] = isset($data['closeIssueCount']) ? $data['closeIssueCount'] : null;
        $this->container['codeLineCount'] = isset($data['codeLineCount']) ? $data['codeLineCount'] : null;
        $this->container['commitCount'] = isset($data['commitCount']) ? $data['commitCount'] : null;
        $this->container['delayIssueCount'] = isset($data['delayIssueCount']) ? $data['delayIssueCount'] : null;
        $this->container['finishIssueCount'] = isset($data['finishIssueCount']) ? $data['finishIssueCount'] : null;
        $this->container['dateList'] = isset($data['dateList']) ? $data['dateList'] : null;
        $this->container['programIds'] = isset($data['programIds']) ? $data['programIds'] : null;
        $this->container['programs'] = isset($data['programs']) ? $data['programs'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closeIssueCount
     *
     * @return null[]
     */
    public function getCloseIssueCount()
    {
        return $this->container['closeIssueCount'];
    }

    /**
     * Sets closeIssueCount
     *
     * @param null[] $closeIssueCount 实际完成任务数
     *
     * @return $this
     */
    public function setCloseIssueCount($closeIssueCount)
    {
        $this->container['closeIssueCount'] = $closeIssueCount;

        return $this;
    }

    /**
     * Gets codeLineCount
     *
     * @return null[]
     */
    public function getCodeLineCount()
    {
        return $this->container['codeLineCount'];
    }

    /**
     * Sets codeLineCount
     *
     * @param null[] $codeLineCount 代码行数
     *
     * @return $this
     */
    public function setCodeLineCount($codeLineCount)
    {
        $this->container['codeLineCount'] = $codeLineCount;

        return $this;
    }

    /**
     * Gets commitCount
     *
     * @return null[]
     */
    public function getCommitCount()
    {
        return $this->container['commitCount'];
    }

    /**
     * Sets commitCount
     *
     * @param null[] $commitCount 提交数量
     *
     * @return $this
     */
    public function setCommitCount($commitCount)
    {
        $this->container['commitCount'] = $commitCount;

        return $this;
    }

    /**
     * Gets delayIssueCount
     *
     * @return null[]
     */
    public function getDelayIssueCount()
    {
        return $this->container['delayIssueCount'];
    }

    /**
     * Sets delayIssueCount
     *
     * @param null[] $delayIssueCount 时间列表
     *
     * @return $this
     */
    public function setDelayIssueCount($delayIssueCount)
    {
        $this->container['delayIssueCount'] = $delayIssueCount;

        return $this;
    }

    /**
     * Gets finishIssueCount
     *
     * @return null[]
     */
    public function getFinishIssueCount()
    {
        return $this->container['finishIssueCount'];
    }

    /**
     * Sets finishIssueCount
     *
     * @param null[] $finishIssueCount 按期完成任务数
     *
     * @return $this
     */
    public function setFinishIssueCount($finishIssueCount)
    {
        $this->container['finishIssueCount'] = $finishIssueCount;

        return $this;
    }

    /**
     * Gets dateList
     *
     * @return null[]
     */
    public function getDateList()
    {
        return $this->container['dateList'];
    }

    /**
     * Sets dateList
     *
     * @param null[] $dateList 时间列表
     *
     * @return $this
     */
    public function setDateList($dateList)
    {
        $this->container['dateList'] = $dateList;

        return $this;
    }

    /**
     * Gets programIds
     *
     * @return null[]
     */
    public function getProgramIds()
    {
        return $this->container['programIds'];
    }

    /**
     * Sets programIds
     *
     * @param null[] $programIds 项目id
     *
     * @return $this
     */
    public function setProgramIds($programIds)
    {
        $this->container['programIds'] = $programIds;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \GiteeEnterprise\Model\EnterpriseProgram
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \GiteeEnterprise\Model\EnterpriseProgram $programs 项目列表
     *
     * @return $this
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate 开始时间
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string $endDate 结束时间
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


