<?php
/**
 * CommitNoteDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.333
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * CommitNoteDetail Class Doc Comment
 *
 * @category Class
 * @description 评论、回复 Commit
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommitNoteDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommitNoteDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'author' => '\GiteeEnterprise\Model\UserWithRemark',
        'content' => 'string',
        'contentHtml' => 'string',
        'suggestions' => 'null[]',
        'reactions' => '\GiteeEnterprise\Model\Reaction',
        'lineCode' => 'string',
        'diffPositionId' => 'int',
        'ancestryIds' => 'null[]',
        'outdated' => 'bool',
        'resolved' => 'bool',
        'resolvedUser' => '\GiteeEnterprise\Model\UserWithRemark'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'type' => null,
        'author' => null,
        'content' => null,
        'contentHtml' => null,
        'suggestions' => null,
        'reactions' => null,
        'lineCode' => null,
        'diffPositionId' => 'int32',
        'ancestryIds' => null,
        'outdated' => null,
        'resolved' => null,
        'resolvedUser' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'author' => 'author',
        'content' => 'content',
        'contentHtml' => 'content_html',
        'suggestions' => 'suggestions',
        'reactions' => 'reactions',
        'lineCode' => 'line_code',
        'diffPositionId' => 'diff_position_id',
        'ancestryIds' => 'ancestry_ids',
        'outdated' => 'outdated',
        'resolved' => 'resolved',
        'resolvedUser' => 'resolved_user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'author' => 'setAuthor',
        'content' => 'setContent',
        'contentHtml' => 'setContentHtml',
        'suggestions' => 'setSuggestions',
        'reactions' => 'setReactions',
        'lineCode' => 'setLineCode',
        'diffPositionId' => 'setDiffPositionId',
        'ancestryIds' => 'setAncestryIds',
        'outdated' => 'setOutdated',
        'resolved' => 'setResolved',
        'resolvedUser' => 'setResolvedUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'author' => 'getAuthor',
        'content' => 'getContent',
        'contentHtml' => 'getContentHtml',
        'suggestions' => 'getSuggestions',
        'reactions' => 'getReactions',
        'lineCode' => 'getLineCode',
        'diffPositionId' => 'getDiffPositionId',
        'ancestryIds' => 'getAncestryIds',
        'outdated' => 'getOutdated',
        'resolved' => 'getResolved',
        'resolvedUser' => 'getResolvedUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['contentHtml'] = isset($data['contentHtml']) ? $data['contentHtml'] : null;
        $this->container['suggestions'] = isset($data['suggestions']) ? $data['suggestions'] : null;
        $this->container['reactions'] = isset($data['reactions']) ? $data['reactions'] : null;
        $this->container['lineCode'] = isset($data['lineCode']) ? $data['lineCode'] : null;
        $this->container['diffPositionId'] = isset($data['diffPositionId']) ? $data['diffPositionId'] : null;
        $this->container['ancestryIds'] = isset($data['ancestryIds']) ? $data['ancestryIds'] : null;
        $this->container['outdated'] = isset($data['outdated']) ? $data['outdated'] : null;
        $this->container['resolved'] = isset($data['resolved']) ? $data['resolved'] : null;
        $this->container['resolvedUser'] = isset($data['resolvedUser']) ? $data['resolvedUser'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 评论的 id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type 评论类型
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $author 评论发起人
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content 评论内容(markdown 格式)
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets contentHtml
     *
     * @return string
     */
    public function getContentHtml()
    {
        return $this->container['contentHtml'];
    }

    /**
     * Sets contentHtml
     *
     * @param string $contentHtml 评论内容(html 格式)
     *
     * @return $this
     */
    public function setContentHtml($contentHtml)
    {
        $this->container['contentHtml'] = $contentHtml;

        return $this;
    }

    /**
     * Gets suggestions
     *
     * @return null[]
     */
    public function getSuggestions()
    {
        return $this->container['suggestions'];
    }

    /**
     * Sets suggestions
     *
     * @param null[] $suggestions 代码建议汇集信息{changed: boolean 代码是否不一致, raw: string 建议的code}
     *
     * @return $this
     */
    public function setSuggestions($suggestions)
    {
        $this->container['suggestions'] = $suggestions;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \GiteeEnterprise\Model\Reaction
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \GiteeEnterprise\Model\Reaction $reactions 表态
     *
     * @return $this
     */
    public function setReactions($reactions)
    {
        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets lineCode
     *
     * @return string
     */
    public function getLineCode()
    {
        return $this->container['lineCode'];
    }

    /**
     * Sets lineCode
     *
     * @param string $lineCode 代码行标记
     *
     * @return $this
     */
    public function setLineCode($lineCode)
    {
        $this->container['lineCode'] = $lineCode;

        return $this;
    }

    /**
     * Gets diffPositionId
     *
     * @return int
     */
    public function getDiffPositionId()
    {
        return $this->container['diffPositionId'];
    }

    /**
     * Sets diffPositionId
     *
     * @param int $diffPositionId 评论引用的代码块 id
     *
     * @return $this
     */
    public function setDiffPositionId($diffPositionId)
    {
        $this->container['diffPositionId'] = $diffPositionId;

        return $this;
    }

    /**
     * Gets ancestryIds
     *
     * @return null[]
     */
    public function getAncestryIds()
    {
        return $this->container['ancestryIds'];
    }

    /**
     * Sets ancestryIds
     *
     * @param null[] $ancestryIds 上级评论的ids，上下级关系为树组index顺序
     *
     * @return $this
     */
    public function setAncestryIds($ancestryIds)
    {
        $this->container['ancestryIds'] = $ancestryIds;

        return $this;
    }

    /**
     * Gets outdated
     *
     * @return bool
     */
    public function getOutdated()
    {
        return $this->container['outdated'];
    }

    /**
     * Sets outdated
     *
     * @param bool $outdated 代码评论是否过期
     *
     * @return $this
     */
    public function setOutdated($outdated)
    {
        $this->container['outdated'] = $outdated;

        return $this;
    }

    /**
     * Gets resolved
     *
     * @return bool
     */
    public function getResolved()
    {
        return $this->container['resolved'];
    }

    /**
     * Sets resolved
     *
     * @param bool $resolved 代码评论是否解决
     *
     * @return $this
     */
    public function setResolved($resolved)
    {
        $this->container['resolved'] = $resolved;

        return $this;
    }

    /**
     * Gets resolvedUser
     *
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getResolvedUser()
    {
        return $this->container['resolvedUser'];
    }

    /**
     * Sets resolvedUser
     *
     * @param \GiteeEnterprise\Model\UserWithRemark $resolvedUser 评论解决人
     *
     * @return $this
     */
    public function setResolvedUser($resolvedUser)
    {
        $this->container['resolvedUser'] = $resolvedUser;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


