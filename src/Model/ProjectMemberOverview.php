<?php
/**
 * ProjectMemberOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Model;

use \ArrayAccess;
use \GiteeEnterprise\ObjectSerializer;

/**
 * ProjectMemberOverview Class Doc Comment
 *
 * @category Class
 * @description 成员概览
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectMemberOverview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectMemberOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'viewer' => 'int',
        'reporter' => 'int',
        'developer' => 'int',
        'master' => 'int',
        'all' => 'int',
        'paddingApplyCount' => 'int',
        'allowExternalApply' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'viewer' => 'int32',
        'reporter' => 'int32',
        'developer' => 'int32',
        'master' => 'int32',
        'all' => 'int32',
        'paddingApplyCount' => 'int32',
        'allowExternalApply' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'viewer' => 'viewer',
        'reporter' => 'reporter',
        'developer' => 'developer',
        'master' => 'master',
        'all' => 'all',
        'paddingApplyCount' => 'padding_apply_count',
        'allowExternalApply' => 'allow_external_apply'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'viewer' => 'setViewer',
        'reporter' => 'setReporter',
        'developer' => 'setDeveloper',
        'master' => 'setMaster',
        'all' => 'setAll',
        'paddingApplyCount' => 'setPaddingApplyCount',
        'allowExternalApply' => 'setAllowExternalApply'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'viewer' => 'getViewer',
        'reporter' => 'getReporter',
        'developer' => 'getDeveloper',
        'master' => 'getMaster',
        'all' => 'getAll',
        'paddingApplyCount' => 'getPaddingApplyCount',
        'allowExternalApply' => 'getAllowExternalApply'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['viewer'] = isset($data['viewer']) ? $data['viewer'] : null;
        $this->container['reporter'] = isset($data['reporter']) ? $data['reporter'] : null;
        $this->container['developer'] = isset($data['developer']) ? $data['developer'] : null;
        $this->container['master'] = isset($data['master']) ? $data['master'] : null;
        $this->container['all'] = isset($data['all']) ? $data['all'] : null;
        $this->container['paddingApplyCount'] = isset($data['paddingApplyCount']) ? $data['paddingApplyCount'] : null;
        $this->container['allowExternalApply'] = isset($data['allowExternalApply']) ? $data['allowExternalApply'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets viewer
     *
     * @return int
     */
    public function getViewer()
    {
        return $this->container['viewer'];
    }

    /**
     * Sets viewer
     *
     * @param int $viewer 观察者数量
     *
     * @return $this
     */
    public function setViewer($viewer)
    {
        $this->container['viewer'] = $viewer;

        return $this;
    }

    /**
     * Gets reporter
     *
     * @return int
     */
    public function getReporter()
    {
        return $this->container['reporter'];
    }

    /**
     * Sets reporter
     *
     * @param int $reporter 报告者数量
     *
     * @return $this
     */
    public function setReporter($reporter)
    {
        $this->container['reporter'] = $reporter;

        return $this;
    }

    /**
     * Gets developer
     *
     * @return int
     */
    public function getDeveloper()
    {
        return $this->container['developer'];
    }

    /**
     * Sets developer
     *
     * @param int $developer 开发者数量
     *
     * @return $this
     */
    public function setDeveloper($developer)
    {
        $this->container['developer'] = $developer;

        return $this;
    }

    /**
     * Gets master
     *
     * @return int
     */
    public function getMaster()
    {
        return $this->container['master'];
    }

    /**
     * Sets master
     *
     * @param int $master 管理者数量
     *
     * @return $this
     */
    public function setMaster($master)
    {
        $this->container['master'] = $master;

        return $this;
    }

    /**
     * Gets all
     *
     * @return int
     */
    public function getAll()
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     *
     * @param int $all 所有成员数量
     *
     * @return $this
     */
    public function setAll($all)
    {
        $this->container['all'] = $all;

        return $this;
    }

    /**
     * Gets paddingApplyCount
     *
     * @return int
     */
    public function getPaddingApplyCount()
    {
        return $this->container['paddingApplyCount'];
    }

    /**
     * Sets paddingApplyCount
     *
     * @param int $paddingApplyCount 待处理成员申请数量
     *
     * @return $this
     */
    public function setPaddingApplyCount($paddingApplyCount)
    {
        $this->container['paddingApplyCount'] = $paddingApplyCount;

        return $this;
    }

    /**
     * Gets allowExternalApply
     *
     * @return bool
     */
    public function getAllowExternalApply()
    {
        return $this->container['allowExternalApply'];
    }

    /**
     * Sets allowExternalApply
     *
     * @param bool $allowExternalApply 允许外部成员申请加
     *
     * @return $this
     */
    public function setAllowExternalApply($allowExternalApply)
    {
        $this->container['allowExternalApply'] = $allowExternalApply;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


