<?php
/**
 * GitDataApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * GitDataApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GitDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdReleasesReleaseId
     *
     * 删除发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Release
     */
    public function deleteEnterpriseIdProjectsProjectIdReleasesReleaseId($enterpriseId, $projectId, $releaseId, $accessToken = null, $qt = null)
    {
        list($response) = $this->deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdWithHttpInfo($enterpriseId, $projectId, $releaseId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdWithHttpInfo
     *
     * 删除发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Release, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdWithHttpInfo($enterpriseId, $projectId, $releaseId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdRequest($enterpriseId, $projectId, $releaseId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Release',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdAsync
     *
     * 删除发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdAsync($enterpriseId, $projectId, $releaseId, $accessToken = null, $qt = null)
    {
        return $this->deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdAsyncWithHttpInfo($enterpriseId, $projectId, $releaseId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdAsyncWithHttpInfo
     *
     * 删除发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdAsyncWithHttpInfo($enterpriseId, $projectId, $releaseId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdRequest($enterpriseId, $projectId, $releaseId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectsProjectIdReleasesReleaseId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectsProjectIdReleasesReleaseIdRequest($enterpriseId, $projectId, $releaseId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling deleteEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }
        // verify the required parameter 'releaseId' is set
        if ($releaseId === null || (is_array($releaseId) && count($releaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $releaseId when calling deleteEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/releases/{release_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($releaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'release_id' . '}',
                ObjectSerializer::toPathValue($releaseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjects
     *
     * 获取授权用户参与的仓库列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $namespaceScope 归属搜索的scope， 配合group_id使用, belongs_to: 搜索归属包含下级，only_this: 搜索归属仅包含当前层级 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectDetail
     */
    public function getEnterpriseIdProjects($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $namespaceScope = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsWithHttpInfo($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $namespaceScope, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsWithHttpInfo
     *
     * 获取授权用户参与的仓库列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $namespaceScope 归属搜索的scope， 配合group_id使用, belongs_to: 搜索归属包含下级，only_this: 搜索归属仅包含当前层级 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsWithHttpInfo($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $namespaceScope = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectDetail';
        $request = $this->getEnterpriseIdProjectsRequest($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $namespaceScope, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsAsync
     *
     * 获取授权用户参与的仓库列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $namespaceScope 归属搜索的scope， 配合group_id使用, belongs_to: 搜索归属包含下级，only_this: 搜索归属仅包含当前层级 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsAsync($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $namespaceScope = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsAsyncWithHttpInfo($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $namespaceScope, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsAsyncWithHttpInfo
     *
     * 获取授权用户参与的仓库列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $namespaceScope 归属搜索的scope， 配合group_id使用, belongs_to: 搜索归属包含下级，only_this: 搜索归属仅包含当前层级 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $namespaceScope = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectDetail';
        $request = $this->getEnterpriseIdProjectsRequest($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $namespaceScope, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjects'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $namespaceScope 归属搜索的scope， 配合group_id使用, belongs_to: 搜索归属包含下级，only_this: 搜索归属仅包含当前层级 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsRequest($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $namespaceScope = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjects'
            );
        }

        $resourcePath = '/{enterprise_id}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($creatorId !== null) {
            $queryParams['creator_id'] = ObjectSerializer::toQueryValue($creatorId);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($forkFilter !== null) {
            $queryParams['fork_filter'] = ObjectSerializer::toQueryValue($forkFilter);
        }
        // query params
        if ($outsourced !== null) {
            $queryParams['outsourced'] = ObjectSerializer::toQueryValue($outsourced);
        }
        // query params
        if ($groupId !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($groupId);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($namespaceScope !== null) {
            $queryParams['namespace_scope'] = ObjectSerializer::toQueryValue($namespaceScope);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsAsTree
     *
     * 获取授权用户参与的仓库列表(按层级获取)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\UserProjectList
     */
    public function getEnterpriseIdProjectsAsTree($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsAsTreeWithHttpInfo($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsAsTreeWithHttpInfo
     *
     * 获取授权用户参与的仓库列表(按层级获取)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\UserProjectList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsAsTreeWithHttpInfo($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\UserProjectList';
        $request = $this->getEnterpriseIdProjectsAsTreeRequest($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\UserProjectList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsAsTreeAsync
     *
     * 获取授权用户参与的仓库列表(按层级获取)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsAsTreeAsync($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsAsTreeAsyncWithHttpInfo($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsAsTreeAsyncWithHttpInfo
     *
     * 获取授权用户参与的仓库列表(按层级获取)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsAsTreeAsyncWithHttpInfo($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\UserProjectList';
        $request = $this->getEnterpriseIdProjectsAsTreeRequest($enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsAsTree'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsAsTreeRequest($enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsAsTree'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/as_tree';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($creatorId !== null) {
            $queryParams['creator_id'] = ObjectSerializer::toQueryValue($creatorId);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($forkFilter !== null) {
            $queryParams['fork_filter'] = ObjectSerializer::toQueryValue($forkFilter);
        }
        // query params
        if ($outsourced !== null) {
            $queryParams['outsourced'] = ObjectSerializer::toQueryValue($outsourced);
        }
        // query params
        if ($groupId !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($groupId);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsForPullRequest
     *
     * 获取当前用户有权限提pr的仓库
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectDetail
     */
    public function getEnterpriseIdProjectsForPullRequest($enterpriseId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsForPullRequestWithHttpInfo($enterpriseId, $accessToken, $search, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsForPullRequestWithHttpInfo
     *
     * 获取当前用户有权限提pr的仓库
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsForPullRequestWithHttpInfo($enterpriseId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectDetail';
        $request = $this->getEnterpriseIdProjectsForPullRequestRequest($enterpriseId, $accessToken, $search, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsForPullRequestAsync
     *
     * 获取当前用户有权限提pr的仓库
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsForPullRequestAsync($enterpriseId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsForPullRequestAsyncWithHttpInfo($enterpriseId, $accessToken, $search, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsForPullRequestAsyncWithHttpInfo
     *
     * 获取当前用户有权限提pr的仓库
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsForPullRequestAsyncWithHttpInfo($enterpriseId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectDetail';
        $request = $this->getEnterpriseIdProjectsForPullRequestRequest($enterpriseId, $accessToken, $search, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsForPullRequest'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsForPullRequestRequest($enterpriseId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsForPullRequest'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/for_pull_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectId
     *
     * 仓库概览信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectOverview
     */
    public function getEnterpriseIdProjectsProjectId($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdWithHttpInfo
     *
     * 仓库概览信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectOverview, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectOverview';
        $request = $this->getEnterpriseIdProjectsProjectIdRequest($enterpriseId, $projectId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectOverview',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdAsync
     *
     * 仓库概览信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdAsync($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdAsyncWithHttpInfo
     *
     * 仓库概览信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectOverview';
        $request = $this->getEnterpriseIdProjectsProjectIdRequest($enterpriseId, $projectId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdRequest($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCanPull
     *
     * 获取可创建 Pull Request 的仓库
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Project
     */
    public function getEnterpriseIdProjectsProjectIdCanPull($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdCanPullWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCanPullWithHttpInfo
     *
     * 获取可创建 Pull Request 的仓库
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCanPullWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Project';
        $request = $this->getEnterpriseIdProjectsProjectIdCanPullRequest($enterpriseId, $projectId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCanPullAsync
     *
     * 获取可创建 Pull Request 的仓库
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCanPullAsync($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCanPullAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCanPullAsyncWithHttpInfo
     *
     * 获取可创建 Pull Request 的仓库
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCanPullAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Project';
        $request = $this->getEnterpriseIdProjectsProjectIdCanPullRequest($enterpriseId, $projectId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCanPull'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCanPullRequest($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCanPull'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCanPull'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/can_pull';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCheckReleases
     *
     * 检查发行版是否存在
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProjectsProjectIdCheckReleases($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        $this->getEnterpriseIdProjectsProjectIdCheckReleasesWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken, $qt);
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCheckReleasesWithHttpInfo
     *
     * 检查发行版是否存在
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCheckReleasesWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdCheckReleasesRequest($enterpriseId, $projectId, $tagVersion, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCheckReleasesAsync
     *
     * 检查发行版是否存在
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCheckReleasesAsync($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCheckReleasesAsyncWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCheckReleasesAsyncWithHttpInfo
     *
     * 检查发行版是否存在
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCheckReleasesAsyncWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdCheckReleasesRequest($enterpriseId, $projectId, $tagVersion, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCheckReleases'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCheckReleasesRequest($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCheckReleases'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCheckReleases'
            );
        }
        // verify the required parameter 'tagVersion' is set
        if ($tagVersion === null || (is_array($tagVersion) && count($tagVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagVersion when calling getEnterpriseIdProjectsProjectIdCheckReleases'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/check_releases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($tagVersion !== null) {
            $queryParams['tag_version'] = ObjectSerializer::toQueryValue($tagVersion);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdContributors
     *
     * 获取仓库贡献者列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $ref 分支, 不传则取仓库的默认分支 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectContributor[]
     */
    public function getEnterpriseIdProjectsProjectIdContributors($enterpriseId, $projectId, $accessToken = null, $qt = null, $ref = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdContributorsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $ref, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdContributorsWithHttpInfo
     *
     * 获取仓库贡献者列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $ref 分支, 不传则取仓库的默认分支 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectContributor[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdContributorsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $ref = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectContributor[]';
        $request = $this->getEnterpriseIdProjectsProjectIdContributorsRequest($enterpriseId, $projectId, $accessToken, $qt, $ref, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectContributor[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdContributorsAsync
     *
     * 获取仓库贡献者列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $ref 分支, 不传则取仓库的默认分支 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdContributorsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $ref = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdContributorsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $ref, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdContributorsAsyncWithHttpInfo
     *
     * 获取仓库贡献者列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $ref 分支, 不传则取仓库的默认分支 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdContributorsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $ref = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectContributor[]';
        $request = $this->getEnterpriseIdProjectsProjectIdContributorsRequest($enterpriseId, $projectId, $accessToken, $qt, $ref, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdContributors'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $ref 分支, 不传则取仓库的默认分支 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdContributorsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $ref = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdContributors'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdContributors'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/contributors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($ref !== null) {
            $queryParams['ref'] = ObjectSerializer::toQueryValue($ref);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEvents
     *
     * 获取仓库动态
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Event
     */
    public function getEnterpriseIdProjectsProjectIdEvents($enterpriseId, $projectId, $accessToken = null, $qt = null, $startDate = null, $endDate = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdEventsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $startDate, $endDate, $page, $perPage, $prevId, $limit);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEventsWithHttpInfo
     *
     * 获取仓库动态
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Event, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdEventsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $startDate = null, $endDate = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        $returnType = '\GiteeEnterprise\Model\Event';
        $request = $this->getEnterpriseIdProjectsProjectIdEventsRequest($enterpriseId, $projectId, $accessToken, $qt, $startDate, $endDate, $page, $perPage, $prevId, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Event',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEventsAsync
     *
     * 获取仓库动态
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdEventsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $startDate = null, $endDate = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdEventsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $startDate, $endDate, $page, $perPage, $prevId, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEventsAsyncWithHttpInfo
     *
     * 获取仓库动态
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdEventsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $startDate = null, $endDate = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        $returnType = '\GiteeEnterprise\Model\Event';
        $request = $this->getEnterpriseIdProjectsProjectIdEventsRequest($enterpriseId, $projectId, $accessToken, $qt, $startDate, $endDate, $page, $perPage, $prevId, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdEvents'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdEventsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $startDate = null, $endDate = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdEvents'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdEvents'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($prevId !== null) {
            $queryParams['prev_id'] = ObjectSerializer::toQueryValue($prevId);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdIssues
     *
     * 获取仓库的任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue[]
     */
    public function getEnterpriseIdProjectsProjectIdIssues($enterpriseId, $projectId, $accessToken = null, $qt = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdIssuesWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdIssuesWithHttpInfo
     *
     * 获取仓库的任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdIssuesWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdProjectsProjectIdIssuesRequest($enterpriseId, $projectId, $accessToken, $qt, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdIssuesAsync
     *
     * 获取仓库的任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdIssuesAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdIssuesAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdIssuesAsyncWithHttpInfo
     *
     * 获取仓库的任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdIssuesAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdProjectsProjectIdIssuesRequest($enterpriseId, $projectId, $accessToken, $qt, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdIssues'
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdIssuesRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdIssues'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($milestoneId !== null) {
            $queryParams['milestone_id'] = ObjectSerializer::toQueryValue($milestoneId);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($onlyRelatedMe !== null) {
            $queryParams['only_related_me'] = ObjectSerializer::toQueryValue($onlyRelatedMe);
        }
        // query params
        if ($assigneeId !== null) {
            $queryParams['assignee_id'] = ObjectSerializer::toQueryValue($assigneeId);
        }
        // query params
        if ($authorId !== null) {
            $queryParams['author_id'] = ObjectSerializer::toQueryValue($authorId);
        }
        // query params
        if ($collaboratorIds !== null) {
            $queryParams['collaborator_ids'] = ObjectSerializer::toQueryValue($collaboratorIds);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }
        // query params
        if ($planStartedAt !== null) {
            $queryParams['plan_started_at'] = ObjectSerializer::toQueryValue($planStartedAt);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($filterChild !== null) {
            $queryParams['filter_child'] = ObjectSerializer::toQueryValue($filterChild);
        }
        // query params
        if ($issueStateIds !== null) {
            $queryParams['issue_state_ids'] = ObjectSerializer::toQueryValue($issueStateIds);
        }
        // query params
        if ($issueTypeId !== null) {
            $queryParams['issue_type_id'] = ObjectSerializer::toQueryValue($issueTypeId);
        }
        // query params
        if ($labelIds !== null) {
            $queryParams['label_ids'] = ObjectSerializer::toQueryValue($labelIds);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($scrumSprintIds !== null) {
            $queryParams['scrum_sprint_ids'] = ObjectSerializer::toQueryValue($scrumSprintIds);
        }
        // query params
        if ($scrumVersionIds !== null) {
            $queryParams['scrum_version_ids'] = ObjectSerializer::toQueryValue($scrumVersionIds);
        }
        // query params
        if ($kanbanIds !== null) {
            $queryParams['kanban_ids'] = ObjectSerializer::toQueryValue($kanbanIds);
        }
        // query params
        if ($kanbanColumnIds !== null) {
            $queryParams['kanban_column_ids'] = ObjectSerializer::toQueryValue($kanbanColumnIds);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdOperateAuths
     *
     * 获取仓库的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\UsersProjects
     */
    public function getEnterpriseIdProjectsProjectIdOperateAuths($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdOperateAuthsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdOperateAuthsWithHttpInfo
     *
     * 获取仓库的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\UsersProjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdOperateAuthsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\UsersProjects';
        $request = $this->getEnterpriseIdProjectsProjectIdOperateAuthsRequest($enterpriseId, $projectId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\UsersProjects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdOperateAuthsAsync
     *
     * 获取仓库的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdOperateAuthsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdOperateAuthsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdOperateAuthsAsyncWithHttpInfo
     *
     * 获取仓库的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdOperateAuthsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\UsersProjects';
        $request = $this->getEnterpriseIdProjectsProjectIdOperateAuthsRequest($enterpriseId, $projectId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdOperateAuths'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdOperateAuthsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdOperateAuths'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdOperateAuths'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/operate_auths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPrograms
     *
     * 获取仓库的关联项目列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope not_joined (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Program
     */
    public function getEnterpriseIdProjectsProjectIdPrograms($enterpriseId, $projectId, $accessToken = null, $qt = null, $scope = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdProgramsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $scope, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdProgramsWithHttpInfo
     *
     * 获取仓库的关联项目列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope not_joined (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Program, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdProgramsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $scope = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program';
        $request = $this->getEnterpriseIdProjectsProjectIdProgramsRequest($enterpriseId, $projectId, $accessToken, $qt, $scope, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Program',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdProgramsAsync
     *
     * 获取仓库的关联项目列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope not_joined (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdProgramsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $scope = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdProgramsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $scope, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdProgramsAsyncWithHttpInfo
     *
     * 获取仓库的关联项目列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope not_joined (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdProgramsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $scope = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program';
        $request = $this->getEnterpriseIdProjectsProjectIdProgramsRequest($enterpriseId, $projectId, $accessToken, $qt, $scope, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPrograms'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope not_joined (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdProgramsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $scope = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPrograms'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequests
     *
     * 获取仓库的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequest
     */
    public function getEnterpriseIdProjectsProjectIdPullRequests($enterpriseId, $projectId, $accessToken = null, $qt = null, $state = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $state, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsWithHttpInfo
     *
     * 获取仓库的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $state = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequest';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsRequest($enterpriseId, $projectId, $accessToken, $qt, $state, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsAsync
     *
     * 获取仓库的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $state = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $state, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsAsyncWithHttpInfo
     *
     * 获取仓库的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $state = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequest';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsRequest($enterpriseId, $projectId, $accessToken, $qt, $state, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequests'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $state = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequests'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleases
     *
     * 查看发行版列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Release
     */
    public function getEnterpriseIdProjectsProjectIdReleases($enterpriseId, $projectId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdReleasesWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesWithHttpInfo
     *
     * 查看发行版列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Release, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdReleasesWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->getEnterpriseIdProjectsProjectIdReleasesRequest($enterpriseId, $projectId, $accessToken, $qt, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Release',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesAsync
     *
     * 查看发行版列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdReleasesAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdReleasesAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesAsyncWithHttpInfo
     *
     * 查看发行版列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdReleasesAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->getEnterpriseIdProjectsProjectIdReleasesRequest($enterpriseId, $projectId, $accessToken, $qt, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdReleases'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdReleasesRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdReleases'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdReleases'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/releases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesTagVersion
     *
     * 查看发行版详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Release
     */
    public function getEnterpriseIdProjectsProjectIdReleasesTagVersion($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdReleasesTagVersionWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesTagVersionWithHttpInfo
     *
     * 查看发行版详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Release, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdReleasesTagVersionWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->getEnterpriseIdProjectsProjectIdReleasesTagVersionRequest($enterpriseId, $projectId, $tagVersion, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Release',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesTagVersionAsync
     *
     * 查看发行版详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdReleasesTagVersionAsync($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdReleasesTagVersionAsyncWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdReleasesTagVersionAsyncWithHttpInfo
     *
     * 查看发行版详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdReleasesTagVersionAsyncWithHttpInfo($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->getEnterpriseIdProjectsProjectIdReleasesTagVersionRequest($enterpriseId, $projectId, $tagVersion, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdReleasesTagVersion'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $tagVersion 发行版版本 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdReleasesTagVersionRequest($enterpriseId, $projectId, $tagVersion, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdReleasesTagVersion'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdReleasesTagVersion'
            );
        }
        // verify the required parameter 'tagVersion' is set
        if ($tagVersion === null || (is_array($tagVersion) && count($tagVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagVersion when calling getEnterpriseIdProjectsProjectIdReleasesTagVersion'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/releases/{tag_version}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($tagVersion !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_version' . '}',
                ObjectSerializer::toPathValue($tagVersion),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdSettings
     *
     * 获取仓库基本设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectBaseSetting
     */
    public function getEnterpriseIdProjectsProjectIdSettings($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdSettingsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdSettingsWithHttpInfo
     *
     * 获取仓库基本设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectBaseSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdSettingsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectBaseSetting';
        $request = $this->getEnterpriseIdProjectsProjectIdSettingsRequest($enterpriseId, $projectId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectBaseSetting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdSettingsAsync
     *
     * 获取仓库基本设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdSettingsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdSettingsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdSettingsAsyncWithHttpInfo
     *
     * 获取仓库基本设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdSettingsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectBaseSetting';
        $request = $this->getEnterpriseIdProjectsProjectIdSettingsRequest($enterpriseId, $projectId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdSettings'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdSettingsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdSettings'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdSettings'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdUsers
     *
     * 获取仓库的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\UsersProjects
     */
    public function getEnterpriseIdProjectsProjectIdUsers($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdUsersWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $search, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdUsersWithHttpInfo
     *
     * 获取仓库的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\UsersProjects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdUsersWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\UsersProjects';
        $request = $this->getEnterpriseIdProjectsProjectIdUsersRequest($enterpriseId, $projectId, $accessToken, $qt, $search, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\UsersProjects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdUsersAsync
     *
     * 获取仓库的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdUsersAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdUsersAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $search, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdUsersAsyncWithHttpInfo
     *
     * 获取仓库的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdUsersAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\UsersProjects';
        $request = $this->getEnterpriseIdProjectsProjectIdUsersRequest($enterpriseId, $projectId, $accessToken, $qt, $search, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdUsers'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdUsersRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdUsers'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdUsers'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjects
     *
     * 新建仓库
     *
     * @param  string $projectName 仓库名称 (required)
     * @param  string $projectNamespacePath 归属路径 (required)
     * @param  string $projectPath 仓库路径 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $projectTemplateId 模板仓库 id (optional)
     * @param  string $projectDescription 仓库介绍 (optional)
     * @param  int $projectPublic 是否开源 (optional)
     * @param  int $projectOutsourced 类型，0：内部，1：外包 (optional)
     * @param  string $projectProgramIds 关联项目列表，英文逗号分隔 (optional)
     * @param  string $projectMemberIds 关联成员列表，英文逗号分隔 (optional)
     * @param  string $projectGroupIds 授权团队列表，英文逗号分隔 (optional)
     * @param  string $projectImportUrl 导入已有仓库路径 (optional)
     * @param  bool $normalRefs 是否包含所有分支 (optional)
     * @param  int $importProgramUsers 是否导入项目成员: 0:否，1:是 (optional)
     * @param  int $readme 是否初始化readme: 0:否，1:是 (optional)
     * @param  int $issueTemplate 是否初始化issue模版: 0:否，1:是 (optional)
     * @param  int $pullRequestTemplate 是否初始化PR模版: 0:否，1:是 (optional)
     * @param  string $userSyncCode 仓库导入-账号 (optional)
     * @param  string $passwordSyncCode 仓库导入-密码 (optional)
     * @param  int $language 语言id (optional)
     * @param  string $ignore .gitignore (optional, default to no)
     * @param  string $license 开源许可证 (optional, default to no)
     * @param  string $model 分支模型id (optional)
     * @param  string $customBranchesProd Production environment branch (optional)
     * @param  string $customBranchesDev Development branch (optional)
     * @param  string $customBranchesFeat Function branch (optional)
     * @param  string $customBranchesRel Release branch (optional)
     * @param  string $customBranchesBugfix Patch branch (optional)
     * @param  string $customBranchesTag Version tag branch (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectDetail
     */
    public function postEnterpriseIdProjects($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken = null, $projectTemplateId = null, $projectDescription = null, $projectPublic = null, $projectOutsourced = null, $projectProgramIds = null, $projectMemberIds = null, $projectGroupIds = null, $projectImportUrl = null, $normalRefs = null, $importProgramUsers = null, $readme = null, $issueTemplate = null, $pullRequestTemplate = null, $userSyncCode = null, $passwordSyncCode = null, $language = null, $ignore = 'no', $license = 'no', $model = null, $customBranchesProd = null, $customBranchesDev = null, $customBranchesFeat = null, $customBranchesRel = null, $customBranchesBugfix = null, $customBranchesTag = null)
    {
        list($response) = $this->postEnterpriseIdProjectsWithHttpInfo($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken, $projectTemplateId, $projectDescription, $projectPublic, $projectOutsourced, $projectProgramIds, $projectMemberIds, $projectGroupIds, $projectImportUrl, $normalRefs, $importProgramUsers, $readme, $issueTemplate, $pullRequestTemplate, $userSyncCode, $passwordSyncCode, $language, $ignore, $license, $model, $customBranchesProd, $customBranchesDev, $customBranchesFeat, $customBranchesRel, $customBranchesBugfix, $customBranchesTag);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsWithHttpInfo
     *
     * 新建仓库
     *
     * @param  string $projectName 仓库名称 (required)
     * @param  string $projectNamespacePath 归属路径 (required)
     * @param  string $projectPath 仓库路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $projectTemplateId 模板仓库 id (optional)
     * @param  string $projectDescription 仓库介绍 (optional)
     * @param  int $projectPublic 是否开源 (optional)
     * @param  int $projectOutsourced 类型，0：内部，1：外包 (optional)
     * @param  string $projectProgramIds 关联项目列表，英文逗号分隔 (optional)
     * @param  string $projectMemberIds 关联成员列表，英文逗号分隔 (optional)
     * @param  string $projectGroupIds 授权团队列表，英文逗号分隔 (optional)
     * @param  string $projectImportUrl 导入已有仓库路径 (optional)
     * @param  bool $normalRefs 是否包含所有分支 (optional)
     * @param  int $importProgramUsers 是否导入项目成员: 0:否，1:是 (optional)
     * @param  int $readme 是否初始化readme: 0:否，1:是 (optional)
     * @param  int $issueTemplate 是否初始化issue模版: 0:否，1:是 (optional)
     * @param  int $pullRequestTemplate 是否初始化PR模版: 0:否，1:是 (optional)
     * @param  string $userSyncCode 仓库导入-账号 (optional)
     * @param  string $passwordSyncCode 仓库导入-密码 (optional)
     * @param  int $language 语言id (optional)
     * @param  string $ignore .gitignore (optional, default to no)
     * @param  string $license 开源许可证 (optional, default to no)
     * @param  string $model 分支模型id (optional)
     * @param  string $customBranchesProd Production environment branch (optional)
     * @param  string $customBranchesDev Development branch (optional)
     * @param  string $customBranchesFeat Function branch (optional)
     * @param  string $customBranchesRel Release branch (optional)
     * @param  string $customBranchesBugfix Patch branch (optional)
     * @param  string $customBranchesTag Version tag branch (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsWithHttpInfo($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken = null, $projectTemplateId = null, $projectDescription = null, $projectPublic = null, $projectOutsourced = null, $projectProgramIds = null, $projectMemberIds = null, $projectGroupIds = null, $projectImportUrl = null, $normalRefs = null, $importProgramUsers = null, $readme = null, $issueTemplate = null, $pullRequestTemplate = null, $userSyncCode = null, $passwordSyncCode = null, $language = null, $ignore = 'no', $license = 'no', $model = null, $customBranchesProd = null, $customBranchesDev = null, $customBranchesFeat = null, $customBranchesRel = null, $customBranchesBugfix = null, $customBranchesTag = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectDetail';
        $request = $this->postEnterpriseIdProjectsRequest($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken, $projectTemplateId, $projectDescription, $projectPublic, $projectOutsourced, $projectProgramIds, $projectMemberIds, $projectGroupIds, $projectImportUrl, $normalRefs, $importProgramUsers, $readme, $issueTemplate, $pullRequestTemplate, $userSyncCode, $passwordSyncCode, $language, $ignore, $license, $model, $customBranchesProd, $customBranchesDev, $customBranchesFeat, $customBranchesRel, $customBranchesBugfix, $customBranchesTag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsAsync
     *
     * 新建仓库
     *
     * @param  string $projectName 仓库名称 (required)
     * @param  string $projectNamespacePath 归属路径 (required)
     * @param  string $projectPath 仓库路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $projectTemplateId 模板仓库 id (optional)
     * @param  string $projectDescription 仓库介绍 (optional)
     * @param  int $projectPublic 是否开源 (optional)
     * @param  int $projectOutsourced 类型，0：内部，1：外包 (optional)
     * @param  string $projectProgramIds 关联项目列表，英文逗号分隔 (optional)
     * @param  string $projectMemberIds 关联成员列表，英文逗号分隔 (optional)
     * @param  string $projectGroupIds 授权团队列表，英文逗号分隔 (optional)
     * @param  string $projectImportUrl 导入已有仓库路径 (optional)
     * @param  bool $normalRefs 是否包含所有分支 (optional)
     * @param  int $importProgramUsers 是否导入项目成员: 0:否，1:是 (optional)
     * @param  int $readme 是否初始化readme: 0:否，1:是 (optional)
     * @param  int $issueTemplate 是否初始化issue模版: 0:否，1:是 (optional)
     * @param  int $pullRequestTemplate 是否初始化PR模版: 0:否，1:是 (optional)
     * @param  string $userSyncCode 仓库导入-账号 (optional)
     * @param  string $passwordSyncCode 仓库导入-密码 (optional)
     * @param  int $language 语言id (optional)
     * @param  string $ignore .gitignore (optional, default to no)
     * @param  string $license 开源许可证 (optional, default to no)
     * @param  string $model 分支模型id (optional)
     * @param  string $customBranchesProd Production environment branch (optional)
     * @param  string $customBranchesDev Development branch (optional)
     * @param  string $customBranchesFeat Function branch (optional)
     * @param  string $customBranchesRel Release branch (optional)
     * @param  string $customBranchesBugfix Patch branch (optional)
     * @param  string $customBranchesTag Version tag branch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsAsync($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken = null, $projectTemplateId = null, $projectDescription = null, $projectPublic = null, $projectOutsourced = null, $projectProgramIds = null, $projectMemberIds = null, $projectGroupIds = null, $projectImportUrl = null, $normalRefs = null, $importProgramUsers = null, $readme = null, $issueTemplate = null, $pullRequestTemplate = null, $userSyncCode = null, $passwordSyncCode = null, $language = null, $ignore = 'no', $license = 'no', $model = null, $customBranchesProd = null, $customBranchesDev = null, $customBranchesFeat = null, $customBranchesRel = null, $customBranchesBugfix = null, $customBranchesTag = null)
    {
        return $this->postEnterpriseIdProjectsAsyncWithHttpInfo($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken, $projectTemplateId, $projectDescription, $projectPublic, $projectOutsourced, $projectProgramIds, $projectMemberIds, $projectGroupIds, $projectImportUrl, $normalRefs, $importProgramUsers, $readme, $issueTemplate, $pullRequestTemplate, $userSyncCode, $passwordSyncCode, $language, $ignore, $license, $model, $customBranchesProd, $customBranchesDev, $customBranchesFeat, $customBranchesRel, $customBranchesBugfix, $customBranchesTag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsAsyncWithHttpInfo
     *
     * 新建仓库
     *
     * @param  string $projectName 仓库名称 (required)
     * @param  string $projectNamespacePath 归属路径 (required)
     * @param  string $projectPath 仓库路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $projectTemplateId 模板仓库 id (optional)
     * @param  string $projectDescription 仓库介绍 (optional)
     * @param  int $projectPublic 是否开源 (optional)
     * @param  int $projectOutsourced 类型，0：内部，1：外包 (optional)
     * @param  string $projectProgramIds 关联项目列表，英文逗号分隔 (optional)
     * @param  string $projectMemberIds 关联成员列表，英文逗号分隔 (optional)
     * @param  string $projectGroupIds 授权团队列表，英文逗号分隔 (optional)
     * @param  string $projectImportUrl 导入已有仓库路径 (optional)
     * @param  bool $normalRefs 是否包含所有分支 (optional)
     * @param  int $importProgramUsers 是否导入项目成员: 0:否，1:是 (optional)
     * @param  int $readme 是否初始化readme: 0:否，1:是 (optional)
     * @param  int $issueTemplate 是否初始化issue模版: 0:否，1:是 (optional)
     * @param  int $pullRequestTemplate 是否初始化PR模版: 0:否，1:是 (optional)
     * @param  string $userSyncCode 仓库导入-账号 (optional)
     * @param  string $passwordSyncCode 仓库导入-密码 (optional)
     * @param  int $language 语言id (optional)
     * @param  string $ignore .gitignore (optional, default to no)
     * @param  string $license 开源许可证 (optional, default to no)
     * @param  string $model 分支模型id (optional)
     * @param  string $customBranchesProd Production environment branch (optional)
     * @param  string $customBranchesDev Development branch (optional)
     * @param  string $customBranchesFeat Function branch (optional)
     * @param  string $customBranchesRel Release branch (optional)
     * @param  string $customBranchesBugfix Patch branch (optional)
     * @param  string $customBranchesTag Version tag branch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsAsyncWithHttpInfo($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken = null, $projectTemplateId = null, $projectDescription = null, $projectPublic = null, $projectOutsourced = null, $projectProgramIds = null, $projectMemberIds = null, $projectGroupIds = null, $projectImportUrl = null, $normalRefs = null, $importProgramUsers = null, $readme = null, $issueTemplate = null, $pullRequestTemplate = null, $userSyncCode = null, $passwordSyncCode = null, $language = null, $ignore = 'no', $license = 'no', $model = null, $customBranchesProd = null, $customBranchesDev = null, $customBranchesFeat = null, $customBranchesRel = null, $customBranchesBugfix = null, $customBranchesTag = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectDetail';
        $request = $this->postEnterpriseIdProjectsRequest($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken, $projectTemplateId, $projectDescription, $projectPublic, $projectOutsourced, $projectProgramIds, $projectMemberIds, $projectGroupIds, $projectImportUrl, $normalRefs, $importProgramUsers, $readme, $issueTemplate, $pullRequestTemplate, $userSyncCode, $passwordSyncCode, $language, $ignore, $license, $model, $customBranchesProd, $customBranchesDev, $customBranchesFeat, $customBranchesRel, $customBranchesBugfix, $customBranchesTag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjects'
     *
     * @param  string $projectName 仓库名称 (required)
     * @param  string $projectNamespacePath 归属路径 (required)
     * @param  string $projectPath 仓库路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $projectTemplateId 模板仓库 id (optional)
     * @param  string $projectDescription 仓库介绍 (optional)
     * @param  int $projectPublic 是否开源 (optional)
     * @param  int $projectOutsourced 类型，0：内部，1：外包 (optional)
     * @param  string $projectProgramIds 关联项目列表，英文逗号分隔 (optional)
     * @param  string $projectMemberIds 关联成员列表，英文逗号分隔 (optional)
     * @param  string $projectGroupIds 授权团队列表，英文逗号分隔 (optional)
     * @param  string $projectImportUrl 导入已有仓库路径 (optional)
     * @param  bool $normalRefs 是否包含所有分支 (optional)
     * @param  int $importProgramUsers 是否导入项目成员: 0:否，1:是 (optional)
     * @param  int $readme 是否初始化readme: 0:否，1:是 (optional)
     * @param  int $issueTemplate 是否初始化issue模版: 0:否，1:是 (optional)
     * @param  int $pullRequestTemplate 是否初始化PR模版: 0:否，1:是 (optional)
     * @param  string $userSyncCode 仓库导入-账号 (optional)
     * @param  string $passwordSyncCode 仓库导入-密码 (optional)
     * @param  int $language 语言id (optional)
     * @param  string $ignore .gitignore (optional, default to no)
     * @param  string $license 开源许可证 (optional, default to no)
     * @param  string $model 分支模型id (optional)
     * @param  string $customBranchesProd Production environment branch (optional)
     * @param  string $customBranchesDev Development branch (optional)
     * @param  string $customBranchesFeat Function branch (optional)
     * @param  string $customBranchesRel Release branch (optional)
     * @param  string $customBranchesBugfix Patch branch (optional)
     * @param  string $customBranchesTag Version tag branch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsRequest($projectName, $projectNamespacePath, $projectPath, $enterpriseId, $accessToken = null, $projectTemplateId = null, $projectDescription = null, $projectPublic = null, $projectOutsourced = null, $projectProgramIds = null, $projectMemberIds = null, $projectGroupIds = null, $projectImportUrl = null, $normalRefs = null, $importProgramUsers = null, $readme = null, $issueTemplate = null, $pullRequestTemplate = null, $userSyncCode = null, $passwordSyncCode = null, $language = null, $ignore = 'no', $license = 'no', $model = null, $customBranchesProd = null, $customBranchesDev = null, $customBranchesFeat = null, $customBranchesRel = null, $customBranchesBugfix = null, $customBranchesTag = null)
    {
        // verify the required parameter 'projectName' is set
        if ($projectName === null || (is_array($projectName) && count($projectName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectName when calling postEnterpriseIdProjects'
            );
        }
        // verify the required parameter 'projectNamespacePath' is set
        if ($projectNamespacePath === null || (is_array($projectNamespacePath) && count($projectNamespacePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectNamespacePath when calling postEnterpriseIdProjects'
            );
        }
        // verify the required parameter 'projectPath' is set
        if ($projectPath === null || (is_array($projectPath) && count($projectPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectPath when calling postEnterpriseIdProjects'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjects'
            );
        }

        $resourcePath = '/{enterprise_id}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($projectName !== null) {
            $formParams['project[name]'] = ObjectSerializer::toFormValue($projectName);
        }
        // form params
        if ($projectNamespacePath !== null) {
            $formParams['project[namespace_path]'] = ObjectSerializer::toFormValue($projectNamespacePath);
        }
        // form params
        if ($projectPath !== null) {
            $formParams['project[path]'] = ObjectSerializer::toFormValue($projectPath);
        }
        // form params
        if ($projectTemplateId !== null) {
            $formParams['project[template_id]'] = ObjectSerializer::toFormValue($projectTemplateId);
        }
        // form params
        if ($projectDescription !== null) {
            $formParams['project[description]'] = ObjectSerializer::toFormValue($projectDescription);
        }
        // form params
        if ($projectPublic !== null) {
            $formParams['project[public]'] = ObjectSerializer::toFormValue($projectPublic);
        }
        // form params
        if ($projectOutsourced !== null) {
            $formParams['project[outsourced]'] = ObjectSerializer::toFormValue($projectOutsourced);
        }
        // form params
        if ($projectProgramIds !== null) {
            $formParams['project[program_ids]'] = ObjectSerializer::toFormValue($projectProgramIds);
        }
        // form params
        if ($projectMemberIds !== null) {
            $formParams['project[member_ids]'] = ObjectSerializer::toFormValue($projectMemberIds);
        }
        // form params
        if ($projectGroupIds !== null) {
            $formParams['project[group_ids]'] = ObjectSerializer::toFormValue($projectGroupIds);
        }
        // form params
        if ($projectImportUrl !== null) {
            $formParams['project[import_url]'] = ObjectSerializer::toFormValue($projectImportUrl);
        }
        // form params
        if ($normalRefs !== null) {
            $formParams['normal_refs'] = ObjectSerializer::toFormValue($normalRefs);
        }
        // form params
        if ($importProgramUsers !== null) {
            $formParams['import_program_users'] = ObjectSerializer::toFormValue($importProgramUsers);
        }
        // form params
        if ($readme !== null) {
            $formParams['readme'] = ObjectSerializer::toFormValue($readme);
        }
        // form params
        if ($issueTemplate !== null) {
            $formParams['issue_template'] = ObjectSerializer::toFormValue($issueTemplate);
        }
        // form params
        if ($pullRequestTemplate !== null) {
            $formParams['pull_request_template'] = ObjectSerializer::toFormValue($pullRequestTemplate);
        }
        // form params
        if ($userSyncCode !== null) {
            $formParams['user_sync_code'] = ObjectSerializer::toFormValue($userSyncCode);
        }
        // form params
        if ($passwordSyncCode !== null) {
            $formParams['password_sync_code'] = ObjectSerializer::toFormValue($passwordSyncCode);
        }
        // form params
        if ($language !== null) {
            $formParams['language'] = ObjectSerializer::toFormValue($language);
        }
        // form params
        if ($ignore !== null) {
            $formParams['ignore'] = ObjectSerializer::toFormValue($ignore);
        }
        // form params
        if ($license !== null) {
            $formParams['license'] = ObjectSerializer::toFormValue($license);
        }
        // form params
        if ($model !== null) {
            $formParams['model'] = ObjectSerializer::toFormValue($model);
        }
        // form params
        if ($customBranchesProd !== null) {
            $formParams['custom_branches[prod]'] = ObjectSerializer::toFormValue($customBranchesProd);
        }
        // form params
        if ($customBranchesDev !== null) {
            $formParams['custom_branches[dev]'] = ObjectSerializer::toFormValue($customBranchesDev);
        }
        // form params
        if ($customBranchesFeat !== null) {
            $formParams['custom_branches[feat]'] = ObjectSerializer::toFormValue($customBranchesFeat);
        }
        // form params
        if ($customBranchesRel !== null) {
            $formParams['custom_branches[rel]'] = ObjectSerializer::toFormValue($customBranchesRel);
        }
        // form params
        if ($customBranchesBugfix !== null) {
            $formParams['custom_branches[bugfix]'] = ObjectSerializer::toFormValue($customBranchesBugfix);
        }
        // form params
        if ($customBranchesTag !== null) {
            $formParams['custom_branches[tag]'] = ObjectSerializer::toFormValue($customBranchesTag);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectCanImport
     *
     * 新建仓库-导入仓库参数是否有效
     *
     * @param  string $importUrl 待导入仓库克隆路径 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userSyncCode 仓库导入-账号（私有仓库需要） (optional)
     * @param  string $passwordSyncCode 仓库导入-密码（私有仓库需要） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ResultResponse
     */
    public function postEnterpriseIdProjectsCheckProjectCanImport($importUrl, $enterpriseId, $accessToken = null, $userSyncCode = null, $passwordSyncCode = null)
    {
        list($response) = $this->postEnterpriseIdProjectsCheckProjectCanImportWithHttpInfo($importUrl, $enterpriseId, $accessToken, $userSyncCode, $passwordSyncCode);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectCanImportWithHttpInfo
     *
     * 新建仓库-导入仓库参数是否有效
     *
     * @param  string $importUrl 待导入仓库克隆路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userSyncCode 仓库导入-账号（私有仓库需要） (optional)
     * @param  string $passwordSyncCode 仓库导入-密码（私有仓库需要） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsCheckProjectCanImportWithHttpInfo($importUrl, $enterpriseId, $accessToken = null, $userSyncCode = null, $passwordSyncCode = null)
    {
        $returnType = '\GiteeEnterprise\Model\ResultResponse';
        $request = $this->postEnterpriseIdProjectsCheckProjectCanImportRequest($importUrl, $enterpriseId, $accessToken, $userSyncCode, $passwordSyncCode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectCanImportAsync
     *
     * 新建仓库-导入仓库参数是否有效
     *
     * @param  string $importUrl 待导入仓库克隆路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userSyncCode 仓库导入-账号（私有仓库需要） (optional)
     * @param  string $passwordSyncCode 仓库导入-密码（私有仓库需要） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsCheckProjectCanImportAsync($importUrl, $enterpriseId, $accessToken = null, $userSyncCode = null, $passwordSyncCode = null)
    {
        return $this->postEnterpriseIdProjectsCheckProjectCanImportAsyncWithHttpInfo($importUrl, $enterpriseId, $accessToken, $userSyncCode, $passwordSyncCode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectCanImportAsyncWithHttpInfo
     *
     * 新建仓库-导入仓库参数是否有效
     *
     * @param  string $importUrl 待导入仓库克隆路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userSyncCode 仓库导入-账号（私有仓库需要） (optional)
     * @param  string $passwordSyncCode 仓库导入-密码（私有仓库需要） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsCheckProjectCanImportAsyncWithHttpInfo($importUrl, $enterpriseId, $accessToken = null, $userSyncCode = null, $passwordSyncCode = null)
    {
        $returnType = '\GiteeEnterprise\Model\ResultResponse';
        $request = $this->postEnterpriseIdProjectsCheckProjectCanImportRequest($importUrl, $enterpriseId, $accessToken, $userSyncCode, $passwordSyncCode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsCheckProjectCanImport'
     *
     * @param  string $importUrl 待导入仓库克隆路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userSyncCode 仓库导入-账号（私有仓库需要） (optional)
     * @param  string $passwordSyncCode 仓库导入-密码（私有仓库需要） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsCheckProjectCanImportRequest($importUrl, $enterpriseId, $accessToken = null, $userSyncCode = null, $passwordSyncCode = null)
    {
        // verify the required parameter 'importUrl' is set
        if ($importUrl === null || (is_array($importUrl) && count($importUrl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importUrl when calling postEnterpriseIdProjectsCheckProjectCanImport'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsCheckProjectCanImport'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/check_project_can_import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($importUrl !== null) {
            $formParams['import_url'] = ObjectSerializer::toFormValue($importUrl);
        }
        // form params
        if ($userSyncCode !== null) {
            $formParams['user_sync_code'] = ObjectSerializer::toFormValue($userSyncCode);
        }
        // form params
        if ($passwordSyncCode !== null) {
            $formParams['password_sync_code'] = ObjectSerializer::toFormValue($passwordSyncCode);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectName
     *
     * 新建仓库-仓库名/路径是否已经存在
     *
     * @param  string $namespacePath 归属路径 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 名称。二选一检验某一项 (optional)
     * @param  string $path 路径。二选一检验某一项 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdProjectsCheckProjectName($namespacePath, $enterpriseId, $accessToken = null, $name = null, $path = null)
    {
        $this->postEnterpriseIdProjectsCheckProjectNameWithHttpInfo($namespacePath, $enterpriseId, $accessToken, $name, $path);
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectNameWithHttpInfo
     *
     * 新建仓库-仓库名/路径是否已经存在
     *
     * @param  string $namespacePath 归属路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 名称。二选一检验某一项 (optional)
     * @param  string $path 路径。二选一检验某一项 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsCheckProjectNameWithHttpInfo($namespacePath, $enterpriseId, $accessToken = null, $name = null, $path = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsCheckProjectNameRequest($namespacePath, $enterpriseId, $accessToken, $name, $path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectNameAsync
     *
     * 新建仓库-仓库名/路径是否已经存在
     *
     * @param  string $namespacePath 归属路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 名称。二选一检验某一项 (optional)
     * @param  string $path 路径。二选一检验某一项 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsCheckProjectNameAsync($namespacePath, $enterpriseId, $accessToken = null, $name = null, $path = null)
    {
        return $this->postEnterpriseIdProjectsCheckProjectNameAsyncWithHttpInfo($namespacePath, $enterpriseId, $accessToken, $name, $path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsCheckProjectNameAsyncWithHttpInfo
     *
     * 新建仓库-仓库名/路径是否已经存在
     *
     * @param  string $namespacePath 归属路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 名称。二选一检验某一项 (optional)
     * @param  string $path 路径。二选一检验某一项 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsCheckProjectNameAsyncWithHttpInfo($namespacePath, $enterpriseId, $accessToken = null, $name = null, $path = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsCheckProjectNameRequest($namespacePath, $enterpriseId, $accessToken, $name, $path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsCheckProjectName'
     *
     * @param  string $namespacePath 归属路径 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 名称。二选一检验某一项 (optional)
     * @param  string $path 路径。二选一检验某一项 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsCheckProjectNameRequest($namespacePath, $enterpriseId, $accessToken = null, $name = null, $path = null)
    {
        // verify the required parameter 'namespacePath' is set
        if ($namespacePath === null || (is_array($namespacePath) && count($namespacePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespacePath when calling postEnterpriseIdProjectsCheckProjectName'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsCheckProjectName'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/check_project_name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($namespacePath !== null) {
            $formParams['namespace_path'] = ObjectSerializer::toFormValue($namespacePath);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdReleases
     *
     * 新建发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Release
     */
    public function postEnterpriseIdProjectsProjectIdReleases($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdReleasesWithHttpInfo($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdReleasesWithHttpInfo
     *
     * 新建发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Release, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdReleasesWithHttpInfo($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->postEnterpriseIdProjectsProjectIdReleasesRequest($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Release',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdReleasesAsync
     *
     * 新建发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdReleasesAsync($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdReleasesAsyncWithHttpInfo($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdReleasesAsyncWithHttpInfo
     *
     * 新建发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdReleasesAsyncWithHttpInfo($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->postEnterpriseIdProjectsProjectIdReleasesRequest($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdReleases'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdReleasesRequest($enterpriseId, $projectId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdReleases'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdReleases'
            );
        }
        // verify the required parameter 'releaseTagVersion' is set
        if ($releaseTagVersion === null || (is_array($releaseTagVersion) && count($releaseTagVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $releaseTagVersion when calling postEnterpriseIdProjectsProjectIdReleases'
            );
        }
        // verify the required parameter 'releaseTitle' is set
        if ($releaseTitle === null || (is_array($releaseTitle) && count($releaseTitle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $releaseTitle when calling postEnterpriseIdProjectsProjectIdReleases'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/releases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($releaseTagVersion !== null) {
            $formParams['release[tag_version]'] = ObjectSerializer::toFormValue($releaseTagVersion);
        }
        // form params
        if ($releaseTitle !== null) {
            $formParams['release[title]'] = ObjectSerializer::toFormValue($releaseTitle);
        }
        // form params
        if ($releaseRef !== null) {
            $formParams['release[ref]'] = ObjectSerializer::toFormValue($releaseRef);
        }
        // form params
        if ($releaseDescription !== null) {
            $formParams['release[description]'] = ObjectSerializer::toFormValue($releaseDescription);
        }
        // form params
        if ($releaseReleaseType !== null) {
            $formParams['release[release_type]'] = ObjectSerializer::toFormValue($releaseReleaseType);
        }
        // form params
        if ($attachIds !== null) {
            $formParams['attach_ids'] = ObjectSerializer::toFormValue($attachIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsTransferCode
     *
     * 获取仓库转入-转移码
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdProjectsTransferCode($enterpriseId, $accessToken = null)
    {
        $this->postEnterpriseIdProjectsTransferCodeWithHttpInfo($enterpriseId, $accessToken);
    }

    /**
     * Operation postEnterpriseIdProjectsTransferCodeWithHttpInfo
     *
     * 获取仓库转入-转移码
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsTransferCodeWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsTransferCodeRequest($enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsTransferCodeAsync
     *
     * 获取仓库转入-转移码
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsTransferCodeAsync($enterpriseId, $accessToken = null)
    {
        return $this->postEnterpriseIdProjectsTransferCodeAsyncWithHttpInfo($enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsTransferCodeAsyncWithHttpInfo
     *
     * 获取仓库转入-转移码
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsTransferCodeAsyncWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsTransferCodeRequest($enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsTransferCode'
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsTransferCodeRequest($enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsTransferCode'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/transfer_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectId
     *
     * 更新仓库设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 仓库名称 (optional)
     * @param  string $path 仓库路径 (optional)
     * @param  string $description 仓库介绍 (optional)
     * @param  string $homepage 主页 (optional)
     * @param  int $langId 语言 (optional)
     * @param  string $defaultBranch 默认分支 (optional)
     * @param  int $outsourced 类型，0：内部，1：外包 (optional)
     * @param  int $creatorId 仓库负责人 (optional)
     * @param  int $canComment 允许用户对仓库进行评论 (optional)
     * @param  int $issueComment 允许用户对\&quot;关闭\&quot;状态的Issues进行评论 (optional)
     * @param  int $issuesEnabled 轻量级的issue跟踪系统 (optional)
     * @param  int $securityHoleEnabled 允许用户创建涉及敏感信息的Issue，提交后不公开此Issue（可见范围：仓库成员、企业成员） (optional)
     * @param  int $forkEnabled 是否允许仓库被Fork (optional)
     * @param  int $onlineEditEnabled 是否允许仓库文件在线编辑 (optional)
     * @param  int $pullRequestsEnabled 接受pull request，协作开发 (optional)
     * @param  int $wikiEnabled 可以编写文档 (optional)
     * @param  int $lightweightPrEnabled 接受轻量级 Pull Request (optional)
     * @param  int $prMasterOnly 开启的Pull Request，仅管理员、审查者、测试者可见 (optional)
     * @param  int $forbidForcePush 禁止强制推送 (optional)
     * @param  string $importUrl 仓库远程地址 (optional)
     * @param  int $forbidForceSync 禁止仓库同步 (optional)
     * @param  int $svnEnabled 使用SVN管理您的仓库 (optional)
     * @param  int $canReadonly 开启文件/文件夹只读功能 (optional)
     * @param  string $programAddIds 待添加的关联项目列表，英文逗号分隔 (optional)
     * @param  string $programRemoveIds 待移除的关联项目列表，英文逗号分隔 (optional)
     * @param  int $giteeGoEnabled GiteeGo 启停状态, 1表示启用，0表示停用 (optional)
     * @param  int $programPipelineEnabled 是否支持项目流水线,1表示支持，0表示不支持 (optional)
     * @param  bool $templateEnabled 仓库模板启停状态 (optional)
     * @param  bool $mergeEnabled 是否开启 merge 合并方式, 默认为开启 (optional)
     * @param  bool $squashEnabled 是否开启 squash 合并方式, 默认为开启 (optional)
     * @param  bool $rebaseEnabled 是否开启 rebase 合并方式, 默认为开启 (optional)
     * @param  string $defaultMergeMethod 选择默认合并 Pull Request 的方式,分别为 merge squash rebase (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectBaseSetting
     */
    public function putEnterpriseIdProjectsProjectId($enterpriseId, $projectId, $accessToken = null, $qt = null, $name = null, $path = null, $description = null, $homepage = null, $langId = null, $defaultBranch = null, $outsourced = null, $creatorId = null, $canComment = null, $issueComment = null, $issuesEnabled = null, $securityHoleEnabled = null, $forkEnabled = null, $onlineEditEnabled = null, $pullRequestsEnabled = null, $wikiEnabled = null, $lightweightPrEnabled = null, $prMasterOnly = null, $forbidForcePush = null, $importUrl = null, $forbidForceSync = null, $svnEnabled = null, $canReadonly = null, $programAddIds = null, $programRemoveIds = null, $giteeGoEnabled = null, $programPipelineEnabled = null, $templateEnabled = null, $mergeEnabled = null, $squashEnabled = null, $rebaseEnabled = null, $defaultMergeMethod = null)
    {
        list($response) = $this->putEnterpriseIdProjectsProjectIdWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $name, $path, $description, $homepage, $langId, $defaultBranch, $outsourced, $creatorId, $canComment, $issueComment, $issuesEnabled, $securityHoleEnabled, $forkEnabled, $onlineEditEnabled, $pullRequestsEnabled, $wikiEnabled, $lightweightPrEnabled, $prMasterOnly, $forbidForcePush, $importUrl, $forbidForceSync, $svnEnabled, $canReadonly, $programAddIds, $programRemoveIds, $giteeGoEnabled, $programPipelineEnabled, $templateEnabled, $mergeEnabled, $squashEnabled, $rebaseEnabled, $defaultMergeMethod);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdWithHttpInfo
     *
     * 更新仓库设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 仓库名称 (optional)
     * @param  string $path 仓库路径 (optional)
     * @param  string $description 仓库介绍 (optional)
     * @param  string $homepage 主页 (optional)
     * @param  int $langId 语言 (optional)
     * @param  string $defaultBranch 默认分支 (optional)
     * @param  int $outsourced 类型，0：内部，1：外包 (optional)
     * @param  int $creatorId 仓库负责人 (optional)
     * @param  int $canComment 允许用户对仓库进行评论 (optional)
     * @param  int $issueComment 允许用户对\&quot;关闭\&quot;状态的Issues进行评论 (optional)
     * @param  int $issuesEnabled 轻量级的issue跟踪系统 (optional)
     * @param  int $securityHoleEnabled 允许用户创建涉及敏感信息的Issue，提交后不公开此Issue（可见范围：仓库成员、企业成员） (optional)
     * @param  int $forkEnabled 是否允许仓库被Fork (optional)
     * @param  int $onlineEditEnabled 是否允许仓库文件在线编辑 (optional)
     * @param  int $pullRequestsEnabled 接受pull request，协作开发 (optional)
     * @param  int $wikiEnabled 可以编写文档 (optional)
     * @param  int $lightweightPrEnabled 接受轻量级 Pull Request (optional)
     * @param  int $prMasterOnly 开启的Pull Request，仅管理员、审查者、测试者可见 (optional)
     * @param  int $forbidForcePush 禁止强制推送 (optional)
     * @param  string $importUrl 仓库远程地址 (optional)
     * @param  int $forbidForceSync 禁止仓库同步 (optional)
     * @param  int $svnEnabled 使用SVN管理您的仓库 (optional)
     * @param  int $canReadonly 开启文件/文件夹只读功能 (optional)
     * @param  string $programAddIds 待添加的关联项目列表，英文逗号分隔 (optional)
     * @param  string $programRemoveIds 待移除的关联项目列表，英文逗号分隔 (optional)
     * @param  int $giteeGoEnabled GiteeGo 启停状态, 1表示启用，0表示停用 (optional)
     * @param  int $programPipelineEnabled 是否支持项目流水线,1表示支持，0表示不支持 (optional)
     * @param  bool $templateEnabled 仓库模板启停状态 (optional)
     * @param  bool $mergeEnabled 是否开启 merge 合并方式, 默认为开启 (optional)
     * @param  bool $squashEnabled 是否开启 squash 合并方式, 默认为开启 (optional)
     * @param  bool $rebaseEnabled 是否开启 rebase 合并方式, 默认为开启 (optional)
     * @param  string $defaultMergeMethod 选择默认合并 Pull Request 的方式,分别为 merge squash rebase (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectBaseSetting, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $name = null, $path = null, $description = null, $homepage = null, $langId = null, $defaultBranch = null, $outsourced = null, $creatorId = null, $canComment = null, $issueComment = null, $issuesEnabled = null, $securityHoleEnabled = null, $forkEnabled = null, $onlineEditEnabled = null, $pullRequestsEnabled = null, $wikiEnabled = null, $lightweightPrEnabled = null, $prMasterOnly = null, $forbidForcePush = null, $importUrl = null, $forbidForceSync = null, $svnEnabled = null, $canReadonly = null, $programAddIds = null, $programRemoveIds = null, $giteeGoEnabled = null, $programPipelineEnabled = null, $templateEnabled = null, $mergeEnabled = null, $squashEnabled = null, $rebaseEnabled = null, $defaultMergeMethod = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectBaseSetting';
        $request = $this->putEnterpriseIdProjectsProjectIdRequest($enterpriseId, $projectId, $accessToken, $qt, $name, $path, $description, $homepage, $langId, $defaultBranch, $outsourced, $creatorId, $canComment, $issueComment, $issuesEnabled, $securityHoleEnabled, $forkEnabled, $onlineEditEnabled, $pullRequestsEnabled, $wikiEnabled, $lightweightPrEnabled, $prMasterOnly, $forbidForcePush, $importUrl, $forbidForceSync, $svnEnabled, $canReadonly, $programAddIds, $programRemoveIds, $giteeGoEnabled, $programPipelineEnabled, $templateEnabled, $mergeEnabled, $squashEnabled, $rebaseEnabled, $defaultMergeMethod);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectBaseSetting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdAsync
     *
     * 更新仓库设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 仓库名称 (optional)
     * @param  string $path 仓库路径 (optional)
     * @param  string $description 仓库介绍 (optional)
     * @param  string $homepage 主页 (optional)
     * @param  int $langId 语言 (optional)
     * @param  string $defaultBranch 默认分支 (optional)
     * @param  int $outsourced 类型，0：内部，1：外包 (optional)
     * @param  int $creatorId 仓库负责人 (optional)
     * @param  int $canComment 允许用户对仓库进行评论 (optional)
     * @param  int $issueComment 允许用户对\&quot;关闭\&quot;状态的Issues进行评论 (optional)
     * @param  int $issuesEnabled 轻量级的issue跟踪系统 (optional)
     * @param  int $securityHoleEnabled 允许用户创建涉及敏感信息的Issue，提交后不公开此Issue（可见范围：仓库成员、企业成员） (optional)
     * @param  int $forkEnabled 是否允许仓库被Fork (optional)
     * @param  int $onlineEditEnabled 是否允许仓库文件在线编辑 (optional)
     * @param  int $pullRequestsEnabled 接受pull request，协作开发 (optional)
     * @param  int $wikiEnabled 可以编写文档 (optional)
     * @param  int $lightweightPrEnabled 接受轻量级 Pull Request (optional)
     * @param  int $prMasterOnly 开启的Pull Request，仅管理员、审查者、测试者可见 (optional)
     * @param  int $forbidForcePush 禁止强制推送 (optional)
     * @param  string $importUrl 仓库远程地址 (optional)
     * @param  int $forbidForceSync 禁止仓库同步 (optional)
     * @param  int $svnEnabled 使用SVN管理您的仓库 (optional)
     * @param  int $canReadonly 开启文件/文件夹只读功能 (optional)
     * @param  string $programAddIds 待添加的关联项目列表，英文逗号分隔 (optional)
     * @param  string $programRemoveIds 待移除的关联项目列表，英文逗号分隔 (optional)
     * @param  int $giteeGoEnabled GiteeGo 启停状态, 1表示启用，0表示停用 (optional)
     * @param  int $programPipelineEnabled 是否支持项目流水线,1表示支持，0表示不支持 (optional)
     * @param  bool $templateEnabled 仓库模板启停状态 (optional)
     * @param  bool $mergeEnabled 是否开启 merge 合并方式, 默认为开启 (optional)
     * @param  bool $squashEnabled 是否开启 squash 合并方式, 默认为开启 (optional)
     * @param  bool $rebaseEnabled 是否开启 rebase 合并方式, 默认为开启 (optional)
     * @param  string $defaultMergeMethod 选择默认合并 Pull Request 的方式,分别为 merge squash rebase (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $name = null, $path = null, $description = null, $homepage = null, $langId = null, $defaultBranch = null, $outsourced = null, $creatorId = null, $canComment = null, $issueComment = null, $issuesEnabled = null, $securityHoleEnabled = null, $forkEnabled = null, $onlineEditEnabled = null, $pullRequestsEnabled = null, $wikiEnabled = null, $lightweightPrEnabled = null, $prMasterOnly = null, $forbidForcePush = null, $importUrl = null, $forbidForceSync = null, $svnEnabled = null, $canReadonly = null, $programAddIds = null, $programRemoveIds = null, $giteeGoEnabled = null, $programPipelineEnabled = null, $templateEnabled = null, $mergeEnabled = null, $squashEnabled = null, $rebaseEnabled = null, $defaultMergeMethod = null)
    {
        return $this->putEnterpriseIdProjectsProjectIdAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $name, $path, $description, $homepage, $langId, $defaultBranch, $outsourced, $creatorId, $canComment, $issueComment, $issuesEnabled, $securityHoleEnabled, $forkEnabled, $onlineEditEnabled, $pullRequestsEnabled, $wikiEnabled, $lightweightPrEnabled, $prMasterOnly, $forbidForcePush, $importUrl, $forbidForceSync, $svnEnabled, $canReadonly, $programAddIds, $programRemoveIds, $giteeGoEnabled, $programPipelineEnabled, $templateEnabled, $mergeEnabled, $squashEnabled, $rebaseEnabled, $defaultMergeMethod)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdAsyncWithHttpInfo
     *
     * 更新仓库设置
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 仓库名称 (optional)
     * @param  string $path 仓库路径 (optional)
     * @param  string $description 仓库介绍 (optional)
     * @param  string $homepage 主页 (optional)
     * @param  int $langId 语言 (optional)
     * @param  string $defaultBranch 默认分支 (optional)
     * @param  int $outsourced 类型，0：内部，1：外包 (optional)
     * @param  int $creatorId 仓库负责人 (optional)
     * @param  int $canComment 允许用户对仓库进行评论 (optional)
     * @param  int $issueComment 允许用户对\&quot;关闭\&quot;状态的Issues进行评论 (optional)
     * @param  int $issuesEnabled 轻量级的issue跟踪系统 (optional)
     * @param  int $securityHoleEnabled 允许用户创建涉及敏感信息的Issue，提交后不公开此Issue（可见范围：仓库成员、企业成员） (optional)
     * @param  int $forkEnabled 是否允许仓库被Fork (optional)
     * @param  int $onlineEditEnabled 是否允许仓库文件在线编辑 (optional)
     * @param  int $pullRequestsEnabled 接受pull request，协作开发 (optional)
     * @param  int $wikiEnabled 可以编写文档 (optional)
     * @param  int $lightweightPrEnabled 接受轻量级 Pull Request (optional)
     * @param  int $prMasterOnly 开启的Pull Request，仅管理员、审查者、测试者可见 (optional)
     * @param  int $forbidForcePush 禁止强制推送 (optional)
     * @param  string $importUrl 仓库远程地址 (optional)
     * @param  int $forbidForceSync 禁止仓库同步 (optional)
     * @param  int $svnEnabled 使用SVN管理您的仓库 (optional)
     * @param  int $canReadonly 开启文件/文件夹只读功能 (optional)
     * @param  string $programAddIds 待添加的关联项目列表，英文逗号分隔 (optional)
     * @param  string $programRemoveIds 待移除的关联项目列表，英文逗号分隔 (optional)
     * @param  int $giteeGoEnabled GiteeGo 启停状态, 1表示启用，0表示停用 (optional)
     * @param  int $programPipelineEnabled 是否支持项目流水线,1表示支持，0表示不支持 (optional)
     * @param  bool $templateEnabled 仓库模板启停状态 (optional)
     * @param  bool $mergeEnabled 是否开启 merge 合并方式, 默认为开启 (optional)
     * @param  bool $squashEnabled 是否开启 squash 合并方式, 默认为开启 (optional)
     * @param  bool $rebaseEnabled 是否开启 rebase 合并方式, 默认为开启 (optional)
     * @param  string $defaultMergeMethod 选择默认合并 Pull Request 的方式,分别为 merge squash rebase (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $name = null, $path = null, $description = null, $homepage = null, $langId = null, $defaultBranch = null, $outsourced = null, $creatorId = null, $canComment = null, $issueComment = null, $issuesEnabled = null, $securityHoleEnabled = null, $forkEnabled = null, $onlineEditEnabled = null, $pullRequestsEnabled = null, $wikiEnabled = null, $lightweightPrEnabled = null, $prMasterOnly = null, $forbidForcePush = null, $importUrl = null, $forbidForceSync = null, $svnEnabled = null, $canReadonly = null, $programAddIds = null, $programRemoveIds = null, $giteeGoEnabled = null, $programPipelineEnabled = null, $templateEnabled = null, $mergeEnabled = null, $squashEnabled = null, $rebaseEnabled = null, $defaultMergeMethod = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectBaseSetting';
        $request = $this->putEnterpriseIdProjectsProjectIdRequest($enterpriseId, $projectId, $accessToken, $qt, $name, $path, $description, $homepage, $langId, $defaultBranch, $outsourced, $creatorId, $canComment, $issueComment, $issuesEnabled, $securityHoleEnabled, $forkEnabled, $onlineEditEnabled, $pullRequestsEnabled, $wikiEnabled, $lightweightPrEnabled, $prMasterOnly, $forbidForcePush, $importUrl, $forbidForceSync, $svnEnabled, $canReadonly, $programAddIds, $programRemoveIds, $giteeGoEnabled, $programPipelineEnabled, $templateEnabled, $mergeEnabled, $squashEnabled, $rebaseEnabled, $defaultMergeMethod);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 仓库名称 (optional)
     * @param  string $path 仓库路径 (optional)
     * @param  string $description 仓库介绍 (optional)
     * @param  string $homepage 主页 (optional)
     * @param  int $langId 语言 (optional)
     * @param  string $defaultBranch 默认分支 (optional)
     * @param  int $outsourced 类型，0：内部，1：外包 (optional)
     * @param  int $creatorId 仓库负责人 (optional)
     * @param  int $canComment 允许用户对仓库进行评论 (optional)
     * @param  int $issueComment 允许用户对\&quot;关闭\&quot;状态的Issues进行评论 (optional)
     * @param  int $issuesEnabled 轻量级的issue跟踪系统 (optional)
     * @param  int $securityHoleEnabled 允许用户创建涉及敏感信息的Issue，提交后不公开此Issue（可见范围：仓库成员、企业成员） (optional)
     * @param  int $forkEnabled 是否允许仓库被Fork (optional)
     * @param  int $onlineEditEnabled 是否允许仓库文件在线编辑 (optional)
     * @param  int $pullRequestsEnabled 接受pull request，协作开发 (optional)
     * @param  int $wikiEnabled 可以编写文档 (optional)
     * @param  int $lightweightPrEnabled 接受轻量级 Pull Request (optional)
     * @param  int $prMasterOnly 开启的Pull Request，仅管理员、审查者、测试者可见 (optional)
     * @param  int $forbidForcePush 禁止强制推送 (optional)
     * @param  string $importUrl 仓库远程地址 (optional)
     * @param  int $forbidForceSync 禁止仓库同步 (optional)
     * @param  int $svnEnabled 使用SVN管理您的仓库 (optional)
     * @param  int $canReadonly 开启文件/文件夹只读功能 (optional)
     * @param  string $programAddIds 待添加的关联项目列表，英文逗号分隔 (optional)
     * @param  string $programRemoveIds 待移除的关联项目列表，英文逗号分隔 (optional)
     * @param  int $giteeGoEnabled GiteeGo 启停状态, 1表示启用，0表示停用 (optional)
     * @param  int $programPipelineEnabled 是否支持项目流水线,1表示支持，0表示不支持 (optional)
     * @param  bool $templateEnabled 仓库模板启停状态 (optional)
     * @param  bool $mergeEnabled 是否开启 merge 合并方式, 默认为开启 (optional)
     * @param  bool $squashEnabled 是否开启 squash 合并方式, 默认为开启 (optional)
     * @param  bool $rebaseEnabled 是否开启 rebase 合并方式, 默认为开启 (optional)
     * @param  string $defaultMergeMethod 选择默认合并 Pull Request 的方式,分别为 merge squash rebase (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $name = null, $path = null, $description = null, $homepage = null, $langId = null, $defaultBranch = null, $outsourced = null, $creatorId = null, $canComment = null, $issueComment = null, $issuesEnabled = null, $securityHoleEnabled = null, $forkEnabled = null, $onlineEditEnabled = null, $pullRequestsEnabled = null, $wikiEnabled = null, $lightweightPrEnabled = null, $prMasterOnly = null, $forbidForcePush = null, $importUrl = null, $forbidForceSync = null, $svnEnabled = null, $canReadonly = null, $programAddIds = null, $programRemoveIds = null, $giteeGoEnabled = null, $programPipelineEnabled = null, $templateEnabled = null, $mergeEnabled = null, $squashEnabled = null, $rebaseEnabled = null, $defaultMergeMethod = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($homepage !== null) {
            $formParams['homepage'] = ObjectSerializer::toFormValue($homepage);
        }
        // form params
        if ($langId !== null) {
            $formParams['lang_id'] = ObjectSerializer::toFormValue($langId);
        }
        // form params
        if ($defaultBranch !== null) {
            $formParams['default_branch'] = ObjectSerializer::toFormValue($defaultBranch);
        }
        // form params
        if ($outsourced !== null) {
            $formParams['outsourced'] = ObjectSerializer::toFormValue($outsourced);
        }
        // form params
        if ($creatorId !== null) {
            $formParams['creator_id'] = ObjectSerializer::toFormValue($creatorId);
        }
        // form params
        if ($canComment !== null) {
            $formParams['can_comment'] = ObjectSerializer::toFormValue($canComment);
        }
        // form params
        if ($issueComment !== null) {
            $formParams['issue_comment'] = ObjectSerializer::toFormValue($issueComment);
        }
        // form params
        if ($issuesEnabled !== null) {
            $formParams['issues_enabled'] = ObjectSerializer::toFormValue($issuesEnabled);
        }
        // form params
        if ($securityHoleEnabled !== null) {
            $formParams['security_hole_enabled'] = ObjectSerializer::toFormValue($securityHoleEnabled);
        }
        // form params
        if ($forkEnabled !== null) {
            $formParams['fork_enabled'] = ObjectSerializer::toFormValue($forkEnabled);
        }
        // form params
        if ($onlineEditEnabled !== null) {
            $formParams['online_edit_enabled'] = ObjectSerializer::toFormValue($onlineEditEnabled);
        }
        // form params
        if ($pullRequestsEnabled !== null) {
            $formParams['pull_requests_enabled'] = ObjectSerializer::toFormValue($pullRequestsEnabled);
        }
        // form params
        if ($wikiEnabled !== null) {
            $formParams['wiki_enabled'] = ObjectSerializer::toFormValue($wikiEnabled);
        }
        // form params
        if ($lightweightPrEnabled !== null) {
            $formParams['lightweight_pr_enabled'] = ObjectSerializer::toFormValue($lightweightPrEnabled);
        }
        // form params
        if ($prMasterOnly !== null) {
            $formParams['pr_master_only'] = ObjectSerializer::toFormValue($prMasterOnly);
        }
        // form params
        if ($forbidForcePush !== null) {
            $formParams['forbid_force_push'] = ObjectSerializer::toFormValue($forbidForcePush);
        }
        // form params
        if ($importUrl !== null) {
            $formParams['import_url'] = ObjectSerializer::toFormValue($importUrl);
        }
        // form params
        if ($forbidForceSync !== null) {
            $formParams['forbid_force_sync'] = ObjectSerializer::toFormValue($forbidForceSync);
        }
        // form params
        if ($svnEnabled !== null) {
            $formParams['svn_enabled'] = ObjectSerializer::toFormValue($svnEnabled);
        }
        // form params
        if ($canReadonly !== null) {
            $formParams['can_readonly'] = ObjectSerializer::toFormValue($canReadonly);
        }
        // form params
        if ($programAddIds !== null) {
            $formParams['program_add_ids'] = ObjectSerializer::toFormValue($programAddIds);
        }
        // form params
        if ($programRemoveIds !== null) {
            $formParams['program_remove_ids'] = ObjectSerializer::toFormValue($programRemoveIds);
        }
        // form params
        if ($giteeGoEnabled !== null) {
            $formParams['gitee_go_enabled'] = ObjectSerializer::toFormValue($giteeGoEnabled);
        }
        // form params
        if ($programPipelineEnabled !== null) {
            $formParams['program_pipeline_enabled'] = ObjectSerializer::toFormValue($programPipelineEnabled);
        }
        // form params
        if ($templateEnabled !== null) {
            $formParams['template_enabled'] = ObjectSerializer::toFormValue($templateEnabled);
        }
        // form params
        if ($mergeEnabled !== null) {
            $formParams['merge_enabled'] = ObjectSerializer::toFormValue($mergeEnabled);
        }
        // form params
        if ($squashEnabled !== null) {
            $formParams['squash_enabled'] = ObjectSerializer::toFormValue($squashEnabled);
        }
        // form params
        if ($rebaseEnabled !== null) {
            $formParams['rebase_enabled'] = ObjectSerializer::toFormValue($rebaseEnabled);
        }
        // form params
        if ($defaultMergeMethod !== null) {
            $formParams['default_merge_method'] = ObjectSerializer::toFormValue($defaultMergeMethod);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdReleasesReleaseId
     *
     * 编辑发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Release
     */
    public function putEnterpriseIdProjectsProjectIdReleasesReleaseId($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        list($response) = $this->putEnterpriseIdProjectsProjectIdReleasesReleaseIdWithHttpInfo($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdReleasesReleaseIdWithHttpInfo
     *
     * 编辑发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Release, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdReleasesReleaseIdWithHttpInfo($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->putEnterpriseIdProjectsProjectIdReleasesReleaseIdRequest($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Release',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdReleasesReleaseIdAsync
     *
     * 编辑发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdReleasesReleaseIdAsync($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        return $this->putEnterpriseIdProjectsProjectIdReleasesReleaseIdAsyncWithHttpInfo($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdReleasesReleaseIdAsyncWithHttpInfo
     *
     * 编辑发行版
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdReleasesReleaseIdAsyncWithHttpInfo($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Release';
        $request = $this->putEnterpriseIdProjectsProjectIdReleasesReleaseIdRequest($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken, $qt, $releaseRef, $releaseDescription, $releaseReleaseType, $attachIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectIdReleasesReleaseId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $releaseId 发行版 id (required)
     * @param  string $releaseTagVersion 发行版版本 (required)
     * @param  string $releaseTitle 发行版标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $releaseRef 发行版所属分支 (optional, default to master)
     * @param  string $releaseDescription 发行版描述 (optional)
     * @param  string $releaseReleaseType 发行版类型, 0：发行版、1：预发行版 (optional)
     * @param  string $attachIds 附件id列表，英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdReleasesReleaseIdRequest($enterpriseId, $projectId, $releaseId, $releaseTagVersion, $releaseTitle, $accessToken = null, $qt = null, $releaseRef = 'master', $releaseDescription = null, $releaseReleaseType = null, $attachIds = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }
        // verify the required parameter 'releaseId' is set
        if ($releaseId === null || (is_array($releaseId) && count($releaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $releaseId when calling putEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }
        // verify the required parameter 'releaseTagVersion' is set
        if ($releaseTagVersion === null || (is_array($releaseTagVersion) && count($releaseTagVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $releaseTagVersion when calling putEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }
        // verify the required parameter 'releaseTitle' is set
        if ($releaseTitle === null || (is_array($releaseTitle) && count($releaseTitle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $releaseTitle when calling putEnterpriseIdProjectsProjectIdReleasesReleaseId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/releases/{release_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($releaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'release_id' . '}',
                ObjectSerializer::toPathValue($releaseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($releaseTagVersion !== null) {
            $formParams['release[tag_version]'] = ObjectSerializer::toFormValue($releaseTagVersion);
        }
        // form params
        if ($releaseTitle !== null) {
            $formParams['release[title]'] = ObjectSerializer::toFormValue($releaseTitle);
        }
        // form params
        if ($releaseRef !== null) {
            $formParams['release[ref]'] = ObjectSerializer::toFormValue($releaseRef);
        }
        // form params
        if ($releaseDescription !== null) {
            $formParams['release[description]'] = ObjectSerializer::toFormValue($releaseDescription);
        }
        // form params
        if ($releaseReleaseType !== null) {
            $formParams['release[release_type]'] = ObjectSerializer::toFormValue($releaseReleaseType);
        }
        // form params
        if ($attachIds !== null) {
            $formParams['attach_ids'] = ObjectSerializer::toFormValue($attachIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
