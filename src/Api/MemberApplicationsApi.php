<?php
/**
 * MemberApplicationsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * MemberApplicationsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MemberApplicationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEnterpriseIdMemberApplications
     *
     * 企业/仓库/团队的成员加入申请列表
     *
     * @param  string $targetType 申请加入的类型: Enterprise,Project,Group (required)
     * @param  int $targetId 申请加入的主体 ID (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MemberApplication[]
     */
    public function getEnterpriseIdMemberApplications($targetType, $targetId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdMemberApplicationsWithHttpInfo($targetType, $targetId, $enterpriseId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdMemberApplicationsWithHttpInfo
     *
     * 企业/仓库/团队的成员加入申请列表
     *
     * @param  string $targetType 申请加入的类型: Enterprise,Project,Group (required)
     * @param  int $targetId 申请加入的主体 ID (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MemberApplication[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdMemberApplicationsWithHttpInfo($targetType, $targetId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\MemberApplication[]';
        $request = $this->getEnterpriseIdMemberApplicationsRequest($targetType, $targetId, $enterpriseId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MemberApplication[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdMemberApplicationsAsync
     *
     * 企业/仓库/团队的成员加入申请列表
     *
     * @param  string $targetType 申请加入的类型: Enterprise,Project,Group (required)
     * @param  int $targetId 申请加入的主体 ID (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMemberApplicationsAsync($targetType, $targetId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdMemberApplicationsAsyncWithHttpInfo($targetType, $targetId, $enterpriseId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdMemberApplicationsAsyncWithHttpInfo
     *
     * 企业/仓库/团队的成员加入申请列表
     *
     * @param  string $targetType 申请加入的类型: Enterprise,Project,Group (required)
     * @param  int $targetId 申请加入的主体 ID (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMemberApplicationsAsyncWithHttpInfo($targetType, $targetId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\MemberApplication[]';
        $request = $this->getEnterpriseIdMemberApplicationsRequest($targetType, $targetId, $enterpriseId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdMemberApplications'
     *
     * @param  string $targetType 申请加入的类型: Enterprise,Project,Group (required)
     * @param  int $targetId 申请加入的主体 ID (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdMemberApplicationsRequest($targetType, $targetId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'targetType' is set
        if ($targetType === null || (is_array($targetType) && count($targetType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetType when calling getEnterpriseIdMemberApplications'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling getEnterpriseIdMemberApplications'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdMemberApplications'
            );
        }

        $resourcePath = '/{enterprise_id}/member_applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($targetType !== null) {
            $queryParams['target_type'] = ObjectSerializer::toQueryValue($targetType);
        }
        // query params
        if ($targetId !== null) {
            $queryParams['target_id'] = ObjectSerializer::toQueryValue($targetId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsBulkOperate
     *
     * 批量处理申请记录
     *
     * @param  string $selectedIds 申请记录id, 逗号隔开 (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\BulkResponseWithKey
     */
    public function postEnterpriseIdMemberApplicationsBulkOperate($selectedIds, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        list($response) = $this->postEnterpriseIdMemberApplicationsBulkOperateWithHttpInfo($selectedIds, $state, $enterpriseId, $accessToken, $roleId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsBulkOperateWithHttpInfo
     *
     * 批量处理申请记录
     *
     * @param  string $selectedIds 申请记录id, 逗号隔开 (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\BulkResponseWithKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdMemberApplicationsBulkOperateWithHttpInfo($selectedIds, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        $returnType = '\GiteeEnterprise\Model\BulkResponseWithKey';
        $request = $this->postEnterpriseIdMemberApplicationsBulkOperateRequest($selectedIds, $state, $enterpriseId, $accessToken, $roleId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\BulkResponseWithKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsBulkOperateAsync
     *
     * 批量处理申请记录
     *
     * @param  string $selectedIds 申请记录id, 逗号隔开 (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdMemberApplicationsBulkOperateAsync($selectedIds, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        return $this->postEnterpriseIdMemberApplicationsBulkOperateAsyncWithHttpInfo($selectedIds, $state, $enterpriseId, $accessToken, $roleId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsBulkOperateAsyncWithHttpInfo
     *
     * 批量处理申请记录
     *
     * @param  string $selectedIds 申请记录id, 逗号隔开 (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdMemberApplicationsBulkOperateAsyncWithHttpInfo($selectedIds, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        $returnType = '\GiteeEnterprise\Model\BulkResponseWithKey';
        $request = $this->postEnterpriseIdMemberApplicationsBulkOperateRequest($selectedIds, $state, $enterpriseId, $accessToken, $roleId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdMemberApplicationsBulkOperate'
     *
     * @param  string $selectedIds 申请记录id, 逗号隔开 (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdMemberApplicationsBulkOperateRequest($selectedIds, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        // verify the required parameter 'selectedIds' is set
        if ($selectedIds === null || (is_array($selectedIds) && count($selectedIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $selectedIds when calling postEnterpriseIdMemberApplicationsBulkOperate'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling postEnterpriseIdMemberApplicationsBulkOperate'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdMemberApplicationsBulkOperate'
            );
        }

        $resourcePath = '/{enterprise_id}/member_applications/bulk_operate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($selectedIds !== null) {
            $formParams['selected_ids'] = ObjectSerializer::toFormValue($selectedIds);
        }
        // form params
        if ($roleId !== null) {
            $formParams['role_id'] = ObjectSerializer::toFormValue($roleId);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsSetForceVerify
     *
     * 强制审核开关
     *
     * @param  bool $on 是否开启强制审核: 开启此选项后，所有邀请(包括之前已生成的邀请)都将需要管理员审核通过后才可加入企业 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Enterprise
     */
    public function postEnterpriseIdMemberApplicationsSetForceVerify($on, $enterpriseId, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdMemberApplicationsSetForceVerifyWithHttpInfo($on, $enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsSetForceVerifyWithHttpInfo
     *
     * 强制审核开关
     *
     * @param  bool $on 是否开启强制审核: 开启此选项后，所有邀请(包括之前已生成的邀请)都将需要管理员审核通过后才可加入企业 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Enterprise, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdMemberApplicationsSetForceVerifyWithHttpInfo($on, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\Enterprise';
        $request = $this->postEnterpriseIdMemberApplicationsSetForceVerifyRequest($on, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Enterprise',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsSetForceVerifyAsync
     *
     * 强制审核开关
     *
     * @param  bool $on 是否开启强制审核: 开启此选项后，所有邀请(包括之前已生成的邀请)都将需要管理员审核通过后才可加入企业 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdMemberApplicationsSetForceVerifyAsync($on, $enterpriseId, $accessToken = null)
    {
        return $this->postEnterpriseIdMemberApplicationsSetForceVerifyAsyncWithHttpInfo($on, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdMemberApplicationsSetForceVerifyAsyncWithHttpInfo
     *
     * 强制审核开关
     *
     * @param  bool $on 是否开启强制审核: 开启此选项后，所有邀请(包括之前已生成的邀请)都将需要管理员审核通过后才可加入企业 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdMemberApplicationsSetForceVerifyAsyncWithHttpInfo($on, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\Enterprise';
        $request = $this->postEnterpriseIdMemberApplicationsSetForceVerifyRequest($on, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdMemberApplicationsSetForceVerify'
     *
     * @param  bool $on 是否开启强制审核: 开启此选项后，所有邀请(包括之前已生成的邀请)都将需要管理员审核通过后才可加入企业 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdMemberApplicationsSetForceVerifyRequest($on, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'on' is set
        if ($on === null || (is_array($on) && count($on) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $on when calling postEnterpriseIdMemberApplicationsSetForceVerify'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdMemberApplicationsSetForceVerify'
            );
        }

        $resourcePath = '/{enterprise_id}/member_applications/set_force_verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($on !== null) {
            $formParams['on'] = ObjectSerializer::toFormValue($on);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdMemberApplicationsMemberApplicationId
     *
     * 处理申请记录
     *
     * @param  int $memberApplicationId 申请记录id (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MemberApplication
     */
    public function putEnterpriseIdMemberApplicationsMemberApplicationId($memberApplicationId, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        list($response) = $this->putEnterpriseIdMemberApplicationsMemberApplicationIdWithHttpInfo($memberApplicationId, $state, $enterpriseId, $accessToken, $roleId);
        return $response;
    }

    /**
     * Operation putEnterpriseIdMemberApplicationsMemberApplicationIdWithHttpInfo
     *
     * 处理申请记录
     *
     * @param  int $memberApplicationId 申请记录id (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MemberApplication, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdMemberApplicationsMemberApplicationIdWithHttpInfo($memberApplicationId, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        $returnType = '\GiteeEnterprise\Model\MemberApplication';
        $request = $this->putEnterpriseIdMemberApplicationsMemberApplicationIdRequest($memberApplicationId, $state, $enterpriseId, $accessToken, $roleId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MemberApplication',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdMemberApplicationsMemberApplicationIdAsync
     *
     * 处理申请记录
     *
     * @param  int $memberApplicationId 申请记录id (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdMemberApplicationsMemberApplicationIdAsync($memberApplicationId, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        return $this->putEnterpriseIdMemberApplicationsMemberApplicationIdAsyncWithHttpInfo($memberApplicationId, $state, $enterpriseId, $accessToken, $roleId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdMemberApplicationsMemberApplicationIdAsyncWithHttpInfo
     *
     * 处理申请记录
     *
     * @param  int $memberApplicationId 申请记录id (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdMemberApplicationsMemberApplicationIdAsyncWithHttpInfo($memberApplicationId, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        $returnType = '\GiteeEnterprise\Model\MemberApplication';
        $request = $this->putEnterpriseIdMemberApplicationsMemberApplicationIdRequest($memberApplicationId, $state, $enterpriseId, $accessToken, $roleId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdMemberApplicationsMemberApplicationId'
     *
     * @param  int $memberApplicationId 申请记录id (required)
     * @param  string $state 通过/拒绝 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $roleId 角色id。企业角色列表 scope: can_invite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdMemberApplicationsMemberApplicationIdRequest($memberApplicationId, $state, $enterpriseId, $accessToken = null, $roleId = null)
    {
        // verify the required parameter 'memberApplicationId' is set
        if ($memberApplicationId === null || (is_array($memberApplicationId) && count($memberApplicationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberApplicationId when calling putEnterpriseIdMemberApplicationsMemberApplicationId'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling putEnterpriseIdMemberApplicationsMemberApplicationId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdMemberApplicationsMemberApplicationId'
            );
        }

        $resourcePath = '/{enterprise_id}/member_applications/{member_application_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($memberApplicationId !== null) {
            $resourcePath = str_replace(
                '{' . 'member_application_id' . '}',
                ObjectSerializer::toPathValue($memberApplicationId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($roleId !== null) {
            $formParams['role_id'] = ObjectSerializer::toFormValue($roleId);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
