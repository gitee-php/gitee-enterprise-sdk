<?php
/**
 * ProjectCommitsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.335
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * ProjectCommitsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectCommitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitId
     *
     * commit详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitDetail
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitId($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdWithHttpInfo
     *
     * commit详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitDetail';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdAsync
     *
     * commit详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdAsync($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCommitCommitIdAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdAsyncWithHttpInfo
     *
     * commit详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitDetail';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCommitCommitId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCommitCommitIdRequest($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCommitCommitId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCommitCommitId'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdProjectsProjectIdCommitCommitId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdBranches
     *
     * 获取commit的分支和tag
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitBranch
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdBranches($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesWithHttpInfo
     *
     * 获取commit的分支和tag
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitBranch, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitBranch';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitBranch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesAsync
     *
     * 获取commit的分支和tag
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesAsync($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesAsyncWithHttpInfo
     *
     * 获取commit的分支和tag
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitBranch';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCommitCommitIdBranches'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCommitCommitIdBranchesRequest($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdBranches'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdBranches'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdBranches'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/branches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath
     *
     * 获取 commit 详情中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        $this->getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathWithHttpInfo($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt);
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathWithHttpInfo
     *
     * 获取 commit 详情中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathWithHttpInfo($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathRequest($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathAsync
     *
     * 获取 commit 详情中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathAsync($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathAsyncWithHttpInfo
     *
     * 获取 commit 详情中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathRequest($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPathRequest($enterpriseId, $projectId, $commitId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
            );
        }
        // verify the required parameter 'fileIdentifier' is set
        if ($fileIdentifier === null || (is_array($fileIdentifier) && count($fileIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileIdentifier when calling getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
            );
        }
        // verify the required parameter 'newPath' is set
        if ($newPath === null || (is_array($newPath) && count($newPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newPath when calling getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
            );
        }
        // verify the required parameter 'oldPath' is set
        if ($oldPath === null || (is_array($oldPath) && count($oldPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldPath when calling getEnterpriseIdProjectsProjectIdCommitCommitIdDiffForPath'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/diff_for_path';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($fileIdentifier !== null) {
            $queryParams['file_identifier'] = ObjectSerializer::toQueryValue($fileIdentifier);
        }
        // query params
        if ($newPath !== null) {
            $queryParams['new_path'] = ObjectSerializer::toQueryValue($newPath);
        }
        // query params
        if ($oldPath !== null) {
            $queryParams['old_path'] = ObjectSerializer::toQueryValue($oldPath);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotes
     *
     * Commit 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitNote
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotes($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesWithHttpInfo
     *
     * Commit 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitNote';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsync
     *
     * Commit 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsync($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsyncWithHttpInfo
     *
     * Commit 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitNote';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesRequest($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees
     *
     * Commit 评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt);
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesWithHttpInfo
     *
     * Commit 评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsync
     *
     * Commit 评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsync($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsyncWithHttpInfo
     *
     * Commit 评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesRequest($enterpriseId, $projectId, $commitId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesRequest($enterpriseId, $projectId, $commitId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/notes/trees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitsRef
     *
     * commits列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ref 提交起始的SHA值或者分支名及文件路径. 默认: 仓库的默认分支 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $author 提交作者的邮箱或个人空间地址(username/login) (optional)
     * @param  string $startDate 提交的起始时间，时间格式为 ISO 8601 (optional)
     * @param  string $endDate 提交的最后时间，时间格式为 ISO 8601 (optional)
     * @param  string $search Commit message 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitList[]
     */
    public function getEnterpriseIdProjectsProjectIdCommitsRef($enterpriseId, $projectId, $ref, $accessToken = null, $qt = null, $author = null, $startDate = null, $endDate = null, $search = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdCommitsRefWithHttpInfo($enterpriseId, $projectId, $ref, $accessToken, $qt, $author, $startDate, $endDate, $search, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitsRefWithHttpInfo
     *
     * commits列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ref 提交起始的SHA值或者分支名及文件路径. 默认: 仓库的默认分支 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $author 提交作者的邮箱或个人空间地址(username/login) (optional)
     * @param  string $startDate 提交的起始时间，时间格式为 ISO 8601 (optional)
     * @param  string $endDate 提交的最后时间，时间格式为 ISO 8601 (optional)
     * @param  string $search Commit message 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCommitsRefWithHttpInfo($enterpriseId, $projectId, $ref, $accessToken = null, $qt = null, $author = null, $startDate = null, $endDate = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitsRefRequest($enterpriseId, $projectId, $ref, $accessToken, $qt, $author, $startDate, $endDate, $search, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitsRefAsync
     *
     * commits列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ref 提交起始的SHA值或者分支名及文件路径. 默认: 仓库的默认分支 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $author 提交作者的邮箱或个人空间地址(username/login) (optional)
     * @param  string $startDate 提交的起始时间，时间格式为 ISO 8601 (optional)
     * @param  string $endDate 提交的最后时间，时间格式为 ISO 8601 (optional)
     * @param  string $search Commit message 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitsRefAsync($enterpriseId, $projectId, $ref, $accessToken = null, $qt = null, $author = null, $startDate = null, $endDate = null, $search = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCommitsRefAsyncWithHttpInfo($enterpriseId, $projectId, $ref, $accessToken, $qt, $author, $startDate, $endDate, $search, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCommitsRefAsyncWithHttpInfo
     *
     * commits列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ref 提交起始的SHA值或者分支名及文件路径. 默认: 仓库的默认分支 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $author 提交作者的邮箱或个人空间地址(username/login) (optional)
     * @param  string $startDate 提交的起始时间，时间格式为 ISO 8601 (optional)
     * @param  string $endDate 提交的最后时间，时间格式为 ISO 8601 (optional)
     * @param  string $search Commit message 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCommitsRefAsyncWithHttpInfo($enterpriseId, $projectId, $ref, $accessToken = null, $qt = null, $author = null, $startDate = null, $endDate = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdCommitsRefRequest($enterpriseId, $projectId, $ref, $accessToken, $qt, $author, $startDate, $endDate, $search, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCommitsRef'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ref 提交起始的SHA值或者分支名及文件路径. 默认: 仓库的默认分支 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $author 提交作者的邮箱或个人空间地址(username/login) (optional)
     * @param  string $startDate 提交的起始时间，时间格式为 ISO 8601 (optional)
     * @param  string $endDate 提交的最后时间，时间格式为 ISO 8601 (optional)
     * @param  string $search Commit message 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCommitsRefRequest($enterpriseId, $projectId, $ref, $accessToken = null, $qt = null, $author = null, $startDate = null, $endDate = null, $search = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCommitsRef'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCommitsRef'
            );
        }
        // verify the required parameter 'ref' is set
        if ($ref === null || (is_array($ref) && count($ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ref when calling getEnterpriseIdProjectsProjectIdCommitsRef'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commits/{ref}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($ref !== null) {
            $resourcePath = str_replace(
                '{' . 'ref' . '}',
                ObjectSerializer::toPathValue($ref),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCompareFromTo
     *
     * 对比commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $from 起始 commit (required)
     * @param  string $to 结束 commit (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitCompare
     */
    public function getEnterpriseIdProjectsProjectIdCompareFromTo($enterpriseId, $projectId, $from, $to, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdCompareFromToWithHttpInfo($enterpriseId, $projectId, $from, $to, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCompareFromToWithHttpInfo
     *
     * 对比commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $from 起始 commit (required)
     * @param  string $to 结束 commit (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitCompare, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdCompareFromToWithHttpInfo($enterpriseId, $projectId, $from, $to, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitCompare';
        $request = $this->getEnterpriseIdProjectsProjectIdCompareFromToRequest($enterpriseId, $projectId, $from, $to, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitCompare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCompareFromToAsync
     *
     * 对比commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $from 起始 commit (required)
     * @param  string $to 结束 commit (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCompareFromToAsync($enterpriseId, $projectId, $from, $to, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdCompareFromToAsyncWithHttpInfo($enterpriseId, $projectId, $from, $to, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdCompareFromToAsyncWithHttpInfo
     *
     * 对比commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $from 起始 commit (required)
     * @param  string $to 结束 commit (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdCompareFromToAsyncWithHttpInfo($enterpriseId, $projectId, $from, $to, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitCompare';
        $request = $this->getEnterpriseIdProjectsProjectIdCompareFromToRequest($enterpriseId, $projectId, $from, $to, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdCompareFromTo'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $from 起始 commit (required)
     * @param  string $to 结束 commit (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdCompareFromToRequest($enterpriseId, $projectId, $from, $to, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdCompareFromTo'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdCompareFromTo'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling getEnterpriseIdProjectsProjectIdCompareFromTo'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling getEnterpriseIdProjectsProjectIdCompareFromTo'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/compare/{from}...{to}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($from !== null) {
            $resourcePath = str_replace(
                '{' . 'from' . '}',
                ObjectSerializer::toPathValue($from),
                $resourcePath
            );
        }
        // path params
        if ($to !== null) {
            $resourcePath = str_replace(
                '{' . 'to' . '}',
                ObjectSerializer::toPathValue($to),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotes
     *
     * 评论 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitNote
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotes($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesWithHttpInfo
     *
     * 评论 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitNote';
        $request = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesRequest($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsync
     *
     * 评论 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsync($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsyncWithHttpInfo
     *
     * 评论 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitNote';
        $request = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesRequest($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesRequest($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotes'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($lineCode !== null) {
            $formParams['line_code'] = ObjectSerializer::toFormValue($lineCode);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees
     *
     * 评论、回复 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitNoteDetail
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null, $replyId = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode, $replyId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesWithHttpInfo
     *
     * 评论、回复 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitNoteDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null, $replyId = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitNoteDetail';
        $request = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesRequest($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode, $replyId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitNoteDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsync
     *
     * 评论、回复 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsync($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null, $replyId = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode, $replyId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsyncWithHttpInfo
     *
     * 评论、回复 Commit
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null, $replyId = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitNoteDetail';
        $request = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesRequest($enterpriseId, $projectId, $commitId, $body, $accessToken, $qt, $lineCode, $replyId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTreesRequest($enterpriseId, $projectId, $commitId, $body, $accessToken = null, $qt = null, $lineCode = null, $replyId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postEnterpriseIdProjectsProjectIdCommitCommitIdNotesTrees'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/notes/trees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($lineCode !== null) {
            $formParams['line_code'] = ObjectSerializer::toFormValue($lineCode);
        }
        // form params
        if ($replyId !== null) {
            $formParams['reply_id'] = ObjectSerializer::toFormValue($replyId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdRevert
     *
     * commit revert
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $startBranch start branch (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $createPullRequest 是否创建代码评审 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdRevert($enterpriseId, $projectId, $commitId, $startBranch, $accessToken = null, $qt = null, $createPullRequest = null)
    {
        $this->postEnterpriseIdProjectsProjectIdCommitCommitIdRevertWithHttpInfo($enterpriseId, $projectId, $commitId, $startBranch, $accessToken, $qt, $createPullRequest);
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdRevertWithHttpInfo
     *
     * commit revert
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $startBranch start branch (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $createPullRequest 是否创建代码评审 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdRevertWithHttpInfo($enterpriseId, $projectId, $commitId, $startBranch, $accessToken = null, $qt = null, $createPullRequest = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdRevertRequest($enterpriseId, $projectId, $commitId, $startBranch, $accessToken, $qt, $createPullRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdRevertAsync
     *
     * commit revert
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $startBranch start branch (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $createPullRequest 是否创建代码评审 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdRevertAsync($enterpriseId, $projectId, $commitId, $startBranch, $accessToken = null, $qt = null, $createPullRequest = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdCommitCommitIdRevertAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $startBranch, $accessToken, $qt, $createPullRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdCommitCommitIdRevertAsyncWithHttpInfo
     *
     * commit revert
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $startBranch start branch (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $createPullRequest 是否创建代码评审 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdCommitCommitIdRevertAsyncWithHttpInfo($enterpriseId, $projectId, $commitId, $startBranch, $accessToken = null, $qt = null, $createPullRequest = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsProjectIdCommitCommitIdRevertRequest($enterpriseId, $projectId, $commitId, $startBranch, $accessToken, $qt, $createPullRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdCommitCommitIdRevert'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $commitId commit sha (required)
     * @param  string $startBranch start branch (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $createPullRequest 是否创建代码评审 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdCommitCommitIdRevertRequest($enterpriseId, $projectId, $commitId, $startBranch, $accessToken = null, $qt = null, $createPullRequest = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdRevert'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdRevert'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling postEnterpriseIdProjectsProjectIdCommitCommitIdRevert'
            );
        }
        // verify the required parameter 'startBranch' is set
        if ($startBranch === null || (is_array($startBranch) && count($startBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startBranch when calling postEnterpriseIdProjectsProjectIdCommitCommitIdRevert'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/commit/{commit_id}/revert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($startBranch !== null) {
            $formParams['start_branch'] = ObjectSerializer::toFormValue($startBranch);
        }
        // form params
        if ($createPullRequest !== null) {
            $formParams['create_pull_request'] = ObjectSerializer::toFormValue($createPullRequest);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
