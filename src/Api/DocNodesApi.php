<?php
/**
 * DocNodesApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * DocNodesApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocNodesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdDocNodesBatchDelete
     *
     * 批量彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdDocNodesBatchDelete($enterpriseId, $docNodeIds, $accessToken = null)
    {
        $this->deleteEnterpriseIdDocNodesBatchDeleteWithHttpInfo($enterpriseId, $docNodeIds, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdDocNodesBatchDeleteWithHttpInfo
     *
     * 批量彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdDocNodesBatchDeleteWithHttpInfo($enterpriseId, $docNodeIds, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocNodesBatchDeleteRequest($enterpriseId, $docNodeIds, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdDocNodesBatchDeleteAsync
     *
     * 批量彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocNodesBatchDeleteAsync($enterpriseId, $docNodeIds, $accessToken = null)
    {
        return $this->deleteEnterpriseIdDocNodesBatchDeleteAsyncWithHttpInfo($enterpriseId, $docNodeIds, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdDocNodesBatchDeleteAsyncWithHttpInfo
     *
     * 批量彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocNodesBatchDeleteAsyncWithHttpInfo($enterpriseId, $docNodeIds, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocNodesBatchDeleteRequest($enterpriseId, $docNodeIds, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdDocNodesBatchDelete'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdDocNodesBatchDeleteRequest($enterpriseId, $docNodeIds, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdDocNodesBatchDelete'
            );
        }
        // verify the required parameter 'docNodeIds' is set
        if ($docNodeIds === null || (is_array($docNodeIds) && count($docNodeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeIds when calling deleteEnterpriseIdDocNodesBatchDelete'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/batch_delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($docNodeIds !== null) {
            $queryParams['doc_node_ids'] = ObjectSerializer::toQueryValue($docNodeIds);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeId
     *
     * 彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdDocNodesDocNodeId($enterpriseId, $docNodeId, $accessToken = null)
    {
        $this->deleteEnterpriseIdDocNodesDocNodeIdWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdWithHttpInfo
     *
     * 彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdAsync
     *
     * 彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo
     *
     * 彻底删除文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdDocNodesDocNodeId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdDocNodesDocNodeId'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling deleteEnterpriseIdDocNodesDocNodeId'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdFileVersions
     *
     * 删除历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $attachFileIds 要删除的文件id（多个用逗号分隔） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdFileVersions($enterpriseId, $docNodeId, $attachFileIds, $accessToken = null)
    {
        $this->deleteEnterpriseIdDocNodesDocNodeIdFileVersionsWithHttpInfo($enterpriseId, $docNodeId, $attachFileIds, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdFileVersionsWithHttpInfo
     *
     * 删除历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $attachFileIds 要删除的文件id（多个用逗号分隔） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdFileVersionsWithHttpInfo($enterpriseId, $docNodeId, $attachFileIds, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocNodesDocNodeIdFileVersionsRequest($enterpriseId, $docNodeId, $attachFileIds, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdFileVersionsAsync
     *
     * 删除历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $attachFileIds 要删除的文件id（多个用逗号分隔） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdFileVersionsAsync($enterpriseId, $docNodeId, $attachFileIds, $accessToken = null)
    {
        return $this->deleteEnterpriseIdDocNodesDocNodeIdFileVersionsAsyncWithHttpInfo($enterpriseId, $docNodeId, $attachFileIds, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdDocNodesDocNodeIdFileVersionsAsyncWithHttpInfo
     *
     * 删除历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $attachFileIds 要删除的文件id（多个用逗号分隔） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocNodesDocNodeIdFileVersionsAsyncWithHttpInfo($enterpriseId, $docNodeId, $attachFileIds, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocNodesDocNodeIdFileVersionsRequest($enterpriseId, $docNodeId, $attachFileIds, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdDocNodesDocNodeIdFileVersions'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $attachFileIds 要删除的文件id（多个用逗号分隔） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdDocNodesDocNodeIdFileVersionsRequest($enterpriseId, $docNodeId, $attachFileIds, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdDocNodesDocNodeIdFileVersions'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling deleteEnterpriseIdDocNodesDocNodeIdFileVersions'
            );
        }
        // verify the required parameter 'attachFileIds' is set
        if ($attachFileIds === null || (is_array($attachFileIds) && count($attachFileIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachFileIds when calling deleteEnterpriseIdDocNodesDocNodeIdFileVersions'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/file_versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($attachFileIds !== null) {
            $queryParams['attach_file_ids'] = ObjectSerializer::toQueryValue($attachFileIds);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesCheckAttachFileName
     *
     * 检测附件是否重名
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 附件名称 (required)
     * @param  int $parentId 层级 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocNodesCheckAttachFileName($enterpriseId, $name, $parentId, $accessToken = null)
    {
        $this->getEnterpriseIdDocNodesCheckAttachFileNameWithHttpInfo($enterpriseId, $name, $parentId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdDocNodesCheckAttachFileNameWithHttpInfo
     *
     * 检测附件是否重名
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 附件名称 (required)
     * @param  int $parentId 层级 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesCheckAttachFileNameWithHttpInfo($enterpriseId, $name, $parentId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesCheckAttachFileNameRequest($enterpriseId, $name, $parentId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesCheckAttachFileNameAsync
     *
     * 检测附件是否重名
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 附件名称 (required)
     * @param  int $parentId 层级 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesCheckAttachFileNameAsync($enterpriseId, $name, $parentId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocNodesCheckAttachFileNameAsyncWithHttpInfo($enterpriseId, $name, $parentId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesCheckAttachFileNameAsyncWithHttpInfo
     *
     * 检测附件是否重名
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 附件名称 (required)
     * @param  int $parentId 层级 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesCheckAttachFileNameAsyncWithHttpInfo($enterpriseId, $name, $parentId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesCheckAttachFileNameRequest($enterpriseId, $name, $parentId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesCheckAttachFileName'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 附件名称 (required)
     * @param  int $parentId 层级 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesCheckAttachFileNameRequest($enterpriseId, $name, $parentId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesCheckAttachFileName'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getEnterpriseIdDocNodesCheckAttachFileName'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling getEnterpriseIdDocNodesCheckAttachFileName'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/check_attach_file_name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesCollection
     *
     * 获取授权用户收藏的文件节点（仅顶层）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id（默认：0） (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  bool $wikiInfoOnly 是否仅展示文档 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function getEnterpriseIdDocNodesCollection($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $direction = 'desc', $scrumSprintId = null, $wikiInfoOnly = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesCollectionWithHttpInfo($enterpriseId, $accessToken, $programId, $sort, $fileType, $direction, $scrumSprintId, $wikiInfoOnly);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesCollectionWithHttpInfo
     *
     * 获取授权用户收藏的文件节点（仅顶层）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id（默认：0） (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  bool $wikiInfoOnly 是否仅展示文档 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesCollectionWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $direction = 'desc', $scrumSprintId = null, $wikiInfoOnly = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesCollectionRequest($enterpriseId, $accessToken, $programId, $sort, $fileType, $direction, $scrumSprintId, $wikiInfoOnly);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesCollectionAsync
     *
     * 获取授权用户收藏的文件节点（仅顶层）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id（默认：0） (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  bool $wikiInfoOnly 是否仅展示文档 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesCollectionAsync($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $direction = 'desc', $scrumSprintId = null, $wikiInfoOnly = null)
    {
        return $this->getEnterpriseIdDocNodesCollectionAsyncWithHttpInfo($enterpriseId, $accessToken, $programId, $sort, $fileType, $direction, $scrumSprintId, $wikiInfoOnly)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesCollectionAsyncWithHttpInfo
     *
     * 获取授权用户收藏的文件节点（仅顶层）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id（默认：0） (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  bool $wikiInfoOnly 是否仅展示文档 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesCollectionAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $direction = 'desc', $scrumSprintId = null, $wikiInfoOnly = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesCollectionRequest($enterpriseId, $accessToken, $programId, $sort, $fileType, $direction, $scrumSprintId, $wikiInfoOnly);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesCollection'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id（默认：0） (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  bool $wikiInfoOnly 是否仅展示文档 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesCollectionRequest($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $direction = 'desc', $scrumSprintId = null, $wikiInfoOnly = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesCollection'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($fileType !== null) {
            $queryParams['file_type'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($scrumSprintId !== null) {
            $queryParams['scrum_sprint_id'] = ObjectSerializer::toQueryValue($scrumSprintId);
        }
        // query params
        if ($wikiInfoOnly !== null) {
            $queryParams['wiki_info_only'] = ObjectSerializer::toQueryValue($wikiInfoOnly);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesDirectories
     *
     * 获取文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $sprintDocId 迭代默认生成的文件夹 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocDirectory[]
     */
    public function getEnterpriseIdDocNodesDirectories($enterpriseId, $accessToken = null, $programId = '0', $scrumSprintId = null, $sprintDocId = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesDirectoriesWithHttpInfo($enterpriseId, $accessToken, $programId, $scrumSprintId, $sprintDocId);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesDirectoriesWithHttpInfo
     *
     * 获取文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $sprintDocId 迭代默认生成的文件夹 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocDirectory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesDirectoriesWithHttpInfo($enterpriseId, $accessToken = null, $programId = '0', $scrumSprintId = null, $sprintDocId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocDirectory[]';
        $request = $this->getEnterpriseIdDocNodesDirectoriesRequest($enterpriseId, $accessToken, $programId, $scrumSprintId, $sprintDocId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocDirectory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesDirectoriesAsync
     *
     * 获取文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $sprintDocId 迭代默认生成的文件夹 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDirectoriesAsync($enterpriseId, $accessToken = null, $programId = '0', $scrumSprintId = null, $sprintDocId = null)
    {
        return $this->getEnterpriseIdDocNodesDirectoriesAsyncWithHttpInfo($enterpriseId, $accessToken, $programId, $scrumSprintId, $sprintDocId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesDirectoriesAsyncWithHttpInfo
     *
     * 获取文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $sprintDocId 迭代默认生成的文件夹 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDirectoriesAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programId = '0', $scrumSprintId = null, $sprintDocId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocDirectory[]';
        $request = $this->getEnterpriseIdDocNodesDirectoriesRequest($enterpriseId, $accessToken, $programId, $scrumSprintId, $sprintDocId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesDirectories'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $sprintDocId 迭代默认生成的文件夹 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesDirectoriesRequest($enterpriseId, $accessToken = null, $programId = '0', $scrumSprintId = null, $sprintDocId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesDirectories'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/directories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($scrumSprintId !== null) {
            $queryParams['scrum_sprint_id'] = ObjectSerializer::toQueryValue($scrumSprintId);
        }
        // query params
        if ($sprintDocId !== null) {
            $queryParams['sprint_doc_id'] = ObjectSerializer::toQueryValue($sprintDocId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeId
     *
     * 查看文件节点详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNodeDetail
     */
    public function getEnterpriseIdDocNodesDocNodeId($enterpriseId, $docNodeId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesDocNodeIdWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdWithHttpInfo
     *
     * 查看文件节点详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNodeDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesDocNodeIdWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNodeDetail';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNodeDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdAsync
     *
     * 查看文件节点详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo
     *
     * 查看文件节点详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNodeDetail';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesDocNodeId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesDocNodeId'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling getEnterpriseIdDocNodesDocNodeId'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdAuth
     *
     * 查看文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode
     */
    public function getEnterpriseIdDocNodesDocNodeIdAuth($enterpriseId, $docNodeId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesDocNodeIdAuthWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdAuthWithHttpInfo
     *
     * 查看文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesDocNodeIdAuthWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdAuthRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdAuthAsync
     *
     * 查看文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdAuthAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocNodesDocNodeIdAuthAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdAuthAsyncWithHttpInfo
     *
     * 查看文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdAuthAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdAuthRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesDocNodeIdAuth'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesDocNodeIdAuthRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesDocNodeIdAuth'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling getEnterpriseIdDocNodesDocNodeIdAuth'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdFileVersions
     *
     * 查看历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\FileVersion[]
     */
    public function getEnterpriseIdDocNodesDocNodeIdFileVersions($enterpriseId, $docNodeId, $accessToken = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesDocNodeIdFileVersionsWithHttpInfo($enterpriseId, $docNodeId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdFileVersionsWithHttpInfo
     *
     * 查看历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\FileVersion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesDocNodeIdFileVersionsWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\FileVersion[]';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdFileVersionsRequest($enterpriseId, $docNodeId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\FileVersion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdFileVersionsAsync
     *
     * 查看历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdFileVersionsAsync($enterpriseId, $docNodeId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdDocNodesDocNodeIdFileVersionsAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdFileVersionsAsyncWithHttpInfo
     *
     * 查看历史版本
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdFileVersionsAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\FileVersion[]';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdFileVersionsRequest($enterpriseId, $docNodeId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesDocNodeIdFileVersions'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesDocNodeIdFileVersionsRequest($enterpriseId, $docNodeId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesDocNodeIdFileVersions'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling getEnterpriseIdDocNodesDocNodeIdFileVersions'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/file_versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdOperateAuths
     *
     * 获取文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocNodesDocNodeIdOperateAuths($enterpriseId, $docNodeId, $accessToken = null)
    {
        $this->getEnterpriseIdDocNodesDocNodeIdOperateAuthsWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdOperateAuthsWithHttpInfo
     *
     * 获取文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesDocNodeIdOperateAuthsWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdOperateAuthsRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdOperateAuthsAsync
     *
     * 获取文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdOperateAuthsAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocNodesDocNodeIdOperateAuthsAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesDocNodeIdOperateAuthsAsyncWithHttpInfo
     *
     * 获取文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesDocNodeIdOperateAuthsAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesDocNodeIdOperateAuthsRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesDocNodeIdOperateAuths'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesDocNodeIdOperateAuthsRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesDocNodeIdOperateAuths'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling getEnterpriseIdDocNodesDocNodeIdOperateAuths'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/operate_auths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesFetchBackupFolderProgress
     *
     * 获取当前用户文件夹备份进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $docNodeId 文档节点 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocNodesFetchBackupFolderProgress($enterpriseId, $accessToken = null, $docNodeId = null)
    {
        $this->getEnterpriseIdDocNodesFetchBackupFolderProgressWithHttpInfo($enterpriseId, $accessToken, $docNodeId);
    }

    /**
     * Operation getEnterpriseIdDocNodesFetchBackupFolderProgressWithHttpInfo
     *
     * 获取当前用户文件夹备份进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $docNodeId 文档节点 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesFetchBackupFolderProgressWithHttpInfo($enterpriseId, $accessToken = null, $docNodeId = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesFetchBackupFolderProgressRequest($enterpriseId, $accessToken, $docNodeId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesFetchBackupFolderProgressAsync
     *
     * 获取当前用户文件夹备份进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $docNodeId 文档节点 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesFetchBackupFolderProgressAsync($enterpriseId, $accessToken = null, $docNodeId = null)
    {
        return $this->getEnterpriseIdDocNodesFetchBackupFolderProgressAsyncWithHttpInfo($enterpriseId, $accessToken, $docNodeId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesFetchBackupFolderProgressAsyncWithHttpInfo
     *
     * 获取当前用户文件夹备份进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $docNodeId 文档节点 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesFetchBackupFolderProgressAsyncWithHttpInfo($enterpriseId, $accessToken = null, $docNodeId = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesFetchBackupFolderProgressRequest($enterpriseId, $accessToken, $docNodeId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesFetchBackupFolderProgress'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $docNodeId 文档节点 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesFetchBackupFolderProgressRequest($enterpriseId, $accessToken = null, $docNodeId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesFetchBackupFolderProgress'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/fetch_backup_folder_progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($docNodeId !== null) {
            $queryParams['doc_node_id'] = ObjectSerializer::toQueryValue($docNodeId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesLevel
     *
     * 获取文件节点列表（层级）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $parentId 父级 id（默认：0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  string $scope 可筛选类型：directory, recycle (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile,Shortcut），支持多选，用逗号分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNodeLevel[]
     */
    public function getEnterpriseIdDocNodesLevel($enterpriseId, $parentId, $accessToken = null, $programId = '0', $scope = null, $fileType = null, $search = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesLevelWithHttpInfo($enterpriseId, $parentId, $accessToken, $programId, $scope, $fileType, $search);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesLevelWithHttpInfo
     *
     * 获取文件节点列表（层级）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $parentId 父级 id（默认：0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  string $scope 可筛选类型：directory, recycle (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile,Shortcut），支持多选，用逗号分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNodeLevel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesLevelWithHttpInfo($enterpriseId, $parentId, $accessToken = null, $programId = '0', $scope = null, $fileType = null, $search = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNodeLevel[]';
        $request = $this->getEnterpriseIdDocNodesLevelRequest($enterpriseId, $parentId, $accessToken, $programId, $scope, $fileType, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNodeLevel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesLevelAsync
     *
     * 获取文件节点列表（层级）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $parentId 父级 id（默认：0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  string $scope 可筛选类型：directory, recycle (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile,Shortcut），支持多选，用逗号分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesLevelAsync($enterpriseId, $parentId, $accessToken = null, $programId = '0', $scope = null, $fileType = null, $search = null)
    {
        return $this->getEnterpriseIdDocNodesLevelAsyncWithHttpInfo($enterpriseId, $parentId, $accessToken, $programId, $scope, $fileType, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesLevelAsyncWithHttpInfo
     *
     * 获取文件节点列表（层级）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $parentId 父级 id（默认：0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  string $scope 可筛选类型：directory, recycle (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile,Shortcut），支持多选，用逗号分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesLevelAsyncWithHttpInfo($enterpriseId, $parentId, $accessToken = null, $programId = '0', $scope = null, $fileType = null, $search = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNodeLevel[]';
        $request = $this->getEnterpriseIdDocNodesLevelRequest($enterpriseId, $parentId, $accessToken, $programId, $scope, $fileType, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesLevel'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $parentId 父级 id（默认：0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional, default to 0)
     * @param  string $scope 可筛选类型：directory, recycle (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,DocDirectory,AttachFile,Shortcut），支持多选，用逗号分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesLevelRequest($enterpriseId, $parentId, $accessToken = null, $programId = '0', $scope = null, $fileType = null, $search = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesLevel'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling getEnterpriseIdDocNodesLevel'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/level';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($fileType !== null) {
            $queryParams['file_type'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesPrograms
     *
     * 获取与文档有关的项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function getEnterpriseIdDocNodesPrograms($enterpriseId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesProgramsWithHttpInfo($enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsWithHttpInfo
     *
     * 获取与文档有关的项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesProgramsWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesProgramsRequest($enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsAsync
     *
     * 获取与文档有关的项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesProgramsAsync($enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocNodesProgramsAsyncWithHttpInfo($enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsAsyncWithHttpInfo
     *
     * 获取与文档有关的项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesProgramsAsyncWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesProgramsRequest($enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesPrograms'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesProgramsRequest($enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsDirectories
     *
     * 获取项目类型文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramDirectory[]
     */
    public function getEnterpriseIdDocNodesProgramsDirectories($enterpriseId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesProgramsDirectoriesWithHttpInfo($enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsDirectoriesWithHttpInfo
     *
     * 获取项目类型文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramDirectory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesProgramsDirectoriesWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramDirectory[]';
        $request = $this->getEnterpriseIdDocNodesProgramsDirectoriesRequest($enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramDirectory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsDirectoriesAsync
     *
     * 获取项目类型文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesProgramsDirectoriesAsync($enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocNodesProgramsDirectoriesAsyncWithHttpInfo($enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesProgramsDirectoriesAsyncWithHttpInfo
     *
     * 获取项目类型文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesProgramsDirectoriesAsyncWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramDirectory[]';
        $request = $this->getEnterpriseIdDocNodesProgramsDirectoriesRequest($enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesProgramsDirectories'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesProgramsDirectoriesRequest($enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesProgramsDirectories'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/programs_directories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesRecent
     *
     * 获取最近编辑的文件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocRecent[]
     */
    public function getEnterpriseIdDocNodesRecent($enterpriseId, $accessToken = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $fileType = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesRecentWithHttpInfo($enterpriseId, $accessToken, $sort, $direction, $scrumSprintId, $fileType, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentWithHttpInfo
     *
     * 获取最近编辑的文件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocRecent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesRecentWithHttpInfo($enterpriseId, $accessToken = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $fileType = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocRecent[]';
        $request = $this->getEnterpriseIdDocNodesRecentRequest($enterpriseId, $accessToken, $sort, $direction, $scrumSprintId, $fileType, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocRecent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentAsync
     *
     * 获取最近编辑的文件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesRecentAsync($enterpriseId, $accessToken = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $fileType = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdDocNodesRecentAsyncWithHttpInfo($enterpriseId, $accessToken, $sort, $direction, $scrumSprintId, $fileType, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentAsyncWithHttpInfo
     *
     * 获取最近编辑的文件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesRecentAsyncWithHttpInfo($enterpriseId, $accessToken = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $fileType = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocRecent[]';
        $request = $this->getEnterpriseIdDocNodesRecentRequest($enterpriseId, $accessToken, $sort, $direction, $scrumSprintId, $fileType, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesRecent'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesRecentRequest($enterpriseId, $accessToken = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $fileType = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesRecent'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/recent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($scrumSprintId !== null) {
            $queryParams['scrum_sprint_id'] = ObjectSerializer::toQueryValue($scrumSprintId);
        }
        // query params
        if ($fileType !== null) {
            $queryParams['file_type'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentDoc
     *
     * 获取最近编辑的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ScrumDocNode[]
     */
    public function getEnterpriseIdDocNodesRecentDoc($enterpriseId, $accessToken = null, $programId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesRecentDocWithHttpInfo($enterpriseId, $accessToken, $programId, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentDocWithHttpInfo
     *
     * 获取最近编辑的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ScrumDocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesRecentDocWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ScrumDocNode[]';
        $request = $this->getEnterpriseIdDocNodesRecentDocRequest($enterpriseId, $accessToken, $programId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ScrumDocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentDocAsync
     *
     * 获取最近编辑的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesRecentDocAsync($enterpriseId, $accessToken = null, $programId = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdDocNodesRecentDocAsyncWithHttpInfo($enterpriseId, $accessToken, $programId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesRecentDocAsyncWithHttpInfo
     *
     * 获取最近编辑的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesRecentDocAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ScrumDocNode[]';
        $request = $this->getEnterpriseIdDocNodesRecentDocRequest($enterpriseId, $accessToken, $programId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesRecentDoc'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesRecentDocRequest($enterpriseId, $accessToken = null, $programId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesRecentDoc'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/recent_doc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesRecycle
     *
     * 获取回收站的内容列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $scrumSprintId 迭代 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocNodesRecycle($enterpriseId, $accessToken = null, $parentId = null, $scrumSprintId = null)
    {
        $this->getEnterpriseIdDocNodesRecycleWithHttpInfo($enterpriseId, $accessToken, $parentId, $scrumSprintId);
    }

    /**
     * Operation getEnterpriseIdDocNodesRecycleWithHttpInfo
     *
     * 获取回收站的内容列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $scrumSprintId 迭代 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesRecycleWithHttpInfo($enterpriseId, $accessToken = null, $parentId = null, $scrumSprintId = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesRecycleRequest($enterpriseId, $accessToken, $parentId, $scrumSprintId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesRecycleAsync
     *
     * 获取回收站的内容列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $scrumSprintId 迭代 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesRecycleAsync($enterpriseId, $accessToken = null, $parentId = null, $scrumSprintId = null)
    {
        return $this->getEnterpriseIdDocNodesRecycleAsyncWithHttpInfo($enterpriseId, $accessToken, $parentId, $scrumSprintId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesRecycleAsyncWithHttpInfo
     *
     * 获取回收站的内容列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $scrumSprintId 迭代 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesRecycleAsyncWithHttpInfo($enterpriseId, $accessToken = null, $parentId = null, $scrumSprintId = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocNodesRecycleRequest($enterpriseId, $accessToken, $parentId, $scrumSprintId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesRecycle'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $scrumSprintId 迭代 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesRecycleRequest($enterpriseId, $accessToken = null, $parentId = null, $scrumSprintId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesRecycle'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/recycle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($scrumSprintId !== null) {
            $queryParams['scrum_sprint_id'] = ObjectSerializer::toQueryValue($scrumSprintId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesShared
     *
     * 获取分享给我的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型(WikiInfo Wiki DocDirectory AttachFile)，支持支持多选，用英文 , 分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $direction 排序方向 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function getEnterpriseIdDocNodesShared($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $search = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesSharedWithHttpInfo($enterpriseId, $accessToken, $programId, $sort, $fileType, $search, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesSharedWithHttpInfo
     *
     * 获取分享给我的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型(WikiInfo Wiki DocDirectory AttachFile)，支持支持多选，用英文 , 分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $direction 排序方向 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesSharedWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $search = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesSharedRequest($enterpriseId, $accessToken, $programId, $sort, $fileType, $search, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesSharedAsync
     *
     * 获取分享给我的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型(WikiInfo Wiki DocDirectory AttachFile)，支持支持多选，用英文 , 分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $direction 排序方向 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesSharedAsync($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $search = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdDocNodesSharedAsyncWithHttpInfo($enterpriseId, $accessToken, $programId, $sort, $fileType, $search, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesSharedAsyncWithHttpInfo
     *
     * 获取分享给我的文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型(WikiInfo Wiki DocDirectory AttachFile)，支持支持多选，用英文 , 分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $direction 排序方向 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesSharedAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $search = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesSharedRequest($enterpriseId, $accessToken, $programId, $sort, $fileType, $search, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesShared'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 ID (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $fileType 文件类型(WikiInfo Wiki DocDirectory AttachFile)，支持支持多选，用英文 , 分割 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $direction 排序方向 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesSharedRequest($enterpriseId, $accessToken = null, $programId = null, $sort = null, $fileType = null, $search = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesShared'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/shared';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($fileType !== null) {
            $queryParams['file_type'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocNodesTile
     *
     * 获取文件节点列表（平铺）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id（默认：0） (optional, default to 0)
     * @param  int $creatorId 创建者 id (optional)
     * @param  int $programId 项目 id(默认：0) (optional)
     * @param  string $scope 筛选项，Wiki、AttachFile（附件）、create_by_me (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function getEnterpriseIdDocNodesTile($enterpriseId, $accessToken = null, $parentId = '0', $creatorId = null, $programId = null, $scope = null, $fileType = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdDocNodesTileWithHttpInfo($enterpriseId, $accessToken, $parentId, $creatorId, $programId, $scope, $fileType, $sort, $direction, $scrumSprintId, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocNodesTileWithHttpInfo
     *
     * 获取文件节点列表（平铺）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id（默认：0） (optional, default to 0)
     * @param  int $creatorId 创建者 id (optional)
     * @param  int $programId 项目 id(默认：0) (optional)
     * @param  string $scope 筛选项，Wiki、AttachFile（附件）、create_by_me (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocNodesTileWithHttpInfo($enterpriseId, $accessToken = null, $parentId = '0', $creatorId = null, $programId = null, $scope = null, $fileType = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesTileRequest($enterpriseId, $accessToken, $parentId, $creatorId, $programId, $scope, $fileType, $sort, $direction, $scrumSprintId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocNodesTileAsync
     *
     * 获取文件节点列表（平铺）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id（默认：0） (optional, default to 0)
     * @param  int $creatorId 创建者 id (optional)
     * @param  int $programId 项目 id(默认：0) (optional)
     * @param  string $scope 筛选项，Wiki、AttachFile（附件）、create_by_me (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesTileAsync($enterpriseId, $accessToken = null, $parentId = '0', $creatorId = null, $programId = null, $scope = null, $fileType = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdDocNodesTileAsyncWithHttpInfo($enterpriseId, $accessToken, $parentId, $creatorId, $programId, $scope, $fileType, $sort, $direction, $scrumSprintId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocNodesTileAsyncWithHttpInfo
     *
     * 获取文件节点列表（平铺）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id（默认：0） (optional, default to 0)
     * @param  int $creatorId 创建者 id (optional)
     * @param  int $programId 项目 id(默认：0) (optional)
     * @param  string $scope 筛选项，Wiki、AttachFile（附件）、create_by_me (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocNodesTileAsyncWithHttpInfo($enterpriseId, $accessToken = null, $parentId = '0', $creatorId = null, $programId = null, $scope = null, $fileType = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->getEnterpriseIdDocNodesTileRequest($enterpriseId, $accessToken, $parentId, $creatorId, $programId, $scope, $fileType, $sort, $direction, $scrumSprintId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocNodesTile'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id（默认：0） (optional, default to 0)
     * @param  int $creatorId 创建者 id (optional)
     * @param  int $programId 项目 id(默认：0) (optional)
     * @param  string $scope 筛选项，Wiki、AttachFile（附件）、create_by_me (optional)
     * @param  string $fileType 文件类型（WikiInfo,Wiki,AttachFile），支持多选，用逗号分割 (optional)
     * @param  string $sort 排序字段(name size updated_at created_at creator_id public) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $scrumSprintId 迭代 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocNodesTileRequest($enterpriseId, $accessToken = null, $parentId = '0', $creatorId = null, $programId = null, $scope = null, $fileType = null, $sort = null, $direction = 'desc', $scrumSprintId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocNodesTile'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/tile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($creatorId !== null) {
            $queryParams['creator_id'] = ObjectSerializer::toQueryValue($creatorId);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($fileType !== null) {
            $queryParams['file_type'] = ObjectSerializer::toQueryValue($fileType);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($scrumSprintId !== null) {
            $queryParams['scrum_sprint_id'] = ObjectSerializer::toQueryValue($scrumSprintId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesAttachFile
     *
     * 上传附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $parentId 父级目录 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function postEnterpriseIdDocNodesAttachFile($enterpriseId, $file, $accessToken = null, $programId = null, $parentId = null)
    {
        list($response) = $this->postEnterpriseIdDocNodesAttachFileWithHttpInfo($enterpriseId, $file, $accessToken, $programId, $parentId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdDocNodesAttachFileWithHttpInfo
     *
     * 上传附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $parentId 父级目录 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesAttachFileWithHttpInfo($enterpriseId, $file, $accessToken = null, $programId = null, $parentId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->postEnterpriseIdDocNodesAttachFileRequest($enterpriseId, $file, $accessToken, $programId, $parentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesAttachFileAsync
     *
     * 上传附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $parentId 父级目录 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesAttachFileAsync($enterpriseId, $file, $accessToken = null, $programId = null, $parentId = null)
    {
        return $this->postEnterpriseIdDocNodesAttachFileAsyncWithHttpInfo($enterpriseId, $file, $accessToken, $programId, $parentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesAttachFileAsyncWithHttpInfo
     *
     * 上传附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $parentId 父级目录 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesAttachFileAsyncWithHttpInfo($enterpriseId, $file, $accessToken = null, $programId = null, $parentId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->postEnterpriseIdDocNodesAttachFileRequest($enterpriseId, $file, $accessToken, $programId, $parentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesAttachFile'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $parentId 父级目录 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesAttachFileRequest($enterpriseId, $file, $accessToken = null, $programId = null, $parentId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesAttachFile'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postEnterpriseIdDocNodesAttachFile'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/attach_file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesBatchRecycle
     *
     * 批量移除到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdDocNodesBatchRecycle($enterpriseId, $docNodeIds, $accessToken = null)
    {
        $this->postEnterpriseIdDocNodesBatchRecycleWithHttpInfo($enterpriseId, $docNodeIds, $accessToken);
    }

    /**
     * Operation postEnterpriseIdDocNodesBatchRecycleWithHttpInfo
     *
     * 批量移除到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesBatchRecycleWithHttpInfo($enterpriseId, $docNodeIds, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesBatchRecycleRequest($enterpriseId, $docNodeIds, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesBatchRecycleAsync
     *
     * 批量移除到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesBatchRecycleAsync($enterpriseId, $docNodeIds, $accessToken = null)
    {
        return $this->postEnterpriseIdDocNodesBatchRecycleAsyncWithHttpInfo($enterpriseId, $docNodeIds, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesBatchRecycleAsyncWithHttpInfo
     *
     * 批量移除到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesBatchRecycleAsyncWithHttpInfo($enterpriseId, $docNodeIds, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesBatchRecycleRequest($enterpriseId, $docNodeIds, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesBatchRecycle'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesBatchRecycleRequest($enterpriseId, $docNodeIds, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesBatchRecycle'
            );
        }
        // verify the required parameter 'docNodeIds' is set
        if ($docNodeIds === null || (is_array($docNodeIds) && count($docNodeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeIds when calling postEnterpriseIdDocNodesBatchRecycle'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/batch_recycle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($docNodeIds !== null) {
            $formParams['doc_node_ids'] = ObjectSerializer::toFormValue($docNodeIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesCoverAttachFile
     *
     * 上传附件（覆盖）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  int $parentId 上传的层级 (required)
     * @param  int $fileId 覆盖的文件节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdDocNodesCoverAttachFile($enterpriseId, $file, $parentId, $fileId, $accessToken = null)
    {
        $this->postEnterpriseIdDocNodesCoverAttachFileWithHttpInfo($enterpriseId, $file, $parentId, $fileId, $accessToken);
    }

    /**
     * Operation postEnterpriseIdDocNodesCoverAttachFileWithHttpInfo
     *
     * 上传附件（覆盖）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  int $parentId 上传的层级 (required)
     * @param  int $fileId 覆盖的文件节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesCoverAttachFileWithHttpInfo($enterpriseId, $file, $parentId, $fileId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesCoverAttachFileRequest($enterpriseId, $file, $parentId, $fileId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesCoverAttachFileAsync
     *
     * 上传附件（覆盖）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  int $parentId 上传的层级 (required)
     * @param  int $fileId 覆盖的文件节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesCoverAttachFileAsync($enterpriseId, $file, $parentId, $fileId, $accessToken = null)
    {
        return $this->postEnterpriseIdDocNodesCoverAttachFileAsyncWithHttpInfo($enterpriseId, $file, $parentId, $fileId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesCoverAttachFileAsyncWithHttpInfo
     *
     * 上传附件（覆盖）
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  int $parentId 上传的层级 (required)
     * @param  int $fileId 覆盖的文件节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesCoverAttachFileAsyncWithHttpInfo($enterpriseId, $file, $parentId, $fileId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesCoverAttachFileRequest($enterpriseId, $file, $parentId, $fileId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesCoverAttachFile'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  \SplFileObject $file 上传的文件 (required)
     * @param  int $parentId 上传的层级 (required)
     * @param  int $fileId 覆盖的文件节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesCoverAttachFileRequest($enterpriseId, $file, $parentId, $fileId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesCoverAttachFile'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postEnterpriseIdDocNodesCoverAttachFile'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling postEnterpriseIdDocNodesCoverAttachFile'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling postEnterpriseIdDocNodesCoverAttachFile'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/cover_attach_file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($fileId !== null) {
            $formParams['file_id'] = ObjectSerializer::toFormValue($fileId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesCreate
     *
     * 新建文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  int $scrumSprintId 迭代 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function postEnterpriseIdDocNodesCreate($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        list($response) = $this->postEnterpriseIdDocNodesCreateWithHttpInfo($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateWithHttpInfo
     *
     * 新建文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  int $scrumSprintId 迭代 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesCreateWithHttpInfo($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->postEnterpriseIdDocNodesCreateRequest($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateAsync
     *
     * 新建文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  int $scrumSprintId 迭代 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesCreateAsync($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        return $this->postEnterpriseIdDocNodesCreateAsyncWithHttpInfo($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateAsyncWithHttpInfo
     *
     * 新建文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  int $scrumSprintId 迭代 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesCreateAsyncWithHttpInfo($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->postEnterpriseIdDocNodesCreateRequest($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesCreate'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  int $scrumSprintId 迭代 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesCreateRequest($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdDocNodesCreate'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($authType !== null) {
            $formParams['auth_type'] = ObjectSerializer::toFormValue($authType);
        }
        // form params
        if ($scrumSprintId !== null) {
            $formParams['scrum_sprint_id'] = ObjectSerializer::toFormValue($scrumSprintId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateWiki
     *
     * 新建 Wiki
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode[]
     */
    public function postEnterpriseIdDocNodesCreateWiki($enterpriseId, $projectId, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdDocNodesCreateWikiWithHttpInfo($enterpriseId, $projectId, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateWikiWithHttpInfo
     *
     * 新建 Wiki
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesCreateWikiWithHttpInfo($enterpriseId, $projectId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->postEnterpriseIdDocNodesCreateWikiRequest($enterpriseId, $projectId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateWikiAsync
     *
     * 新建 Wiki
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesCreateWikiAsync($enterpriseId, $projectId, $accessToken = null)
    {
        return $this->postEnterpriseIdDocNodesCreateWikiAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesCreateWikiAsyncWithHttpInfo
     *
     * 新建 Wiki
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesCreateWikiAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode[]';
        $request = $this->postEnterpriseIdDocNodesCreateWikiRequest($enterpriseId, $projectId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesCreateWiki'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesCreateWikiRequest($enterpriseId, $projectId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesCreateWiki'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdDocNodesCreateWiki'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/create_wiki';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($projectId !== null) {
            $formParams['project_id'] = ObjectSerializer::toFormValue($projectId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesDirectory
     *
     * 创建文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $programId 归属的项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  string $scrumSprintId 迭代 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdDocNodesDirectory($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        $this->postEnterpriseIdDocNodesDirectoryWithHttpInfo($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId);
    }

    /**
     * Operation postEnterpriseIdDocNodesDirectoryWithHttpInfo
     *
     * 创建文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $programId 归属的项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  string $scrumSprintId 迭代 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesDirectoryWithHttpInfo($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesDirectoryRequest($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesDirectoryAsync
     *
     * 创建文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $programId 归属的项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  string $scrumSprintId 迭代 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesDirectoryAsync($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        return $this->postEnterpriseIdDocNodesDirectoryAsyncWithHttpInfo($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesDirectoryAsyncWithHttpInfo
     *
     * 创建文件夹
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $programId 归属的项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  string $scrumSprintId 迭代 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesDirectoryAsyncWithHttpInfo($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesDirectoryRequest($enterpriseId, $name, $accessToken, $parentId, $programId, $authType, $scrumSprintId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesDirectory'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id （默认：0） (optional)
     * @param  int $programId 归属的项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     * @param  string $scrumSprintId 迭代 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesDirectoryRequest($enterpriseId, $name, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit', $scrumSprintId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesDirectory'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdDocNodesDirectory'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/directory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($authType !== null) {
            $formParams['auth_type'] = ObjectSerializer::toFormValue($authType);
        }
        // form params
        if ($scrumSprintId !== null) {
            $formParams['scrum_sprint_id'] = ObjectSerializer::toFormValue($scrumSprintId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdBackup
     *
     * 备份文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode
     */
    public function postEnterpriseIdDocNodesDocNodeIdBackup($enterpriseId, $name, $docNodeId, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit')
    {
        list($response) = $this->postEnterpriseIdDocNodesDocNodeIdBackupWithHttpInfo($enterpriseId, $name, $docNodeId, $accessToken, $parentId, $programId, $authType);
        return $response;
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdBackupWithHttpInfo
     *
     * 备份文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesDocNodeIdBackupWithHttpInfo($enterpriseId, $name, $docNodeId, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit')
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->postEnterpriseIdDocNodesDocNodeIdBackupRequest($enterpriseId, $name, $docNodeId, $accessToken, $parentId, $programId, $authType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdBackupAsync
     *
     * 备份文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesDocNodeIdBackupAsync($enterpriseId, $name, $docNodeId, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit')
    {
        return $this->postEnterpriseIdDocNodesDocNodeIdBackupAsyncWithHttpInfo($enterpriseId, $name, $docNodeId, $accessToken, $parentId, $programId, $authType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdBackupAsyncWithHttpInfo
     *
     * 备份文档
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesDocNodeIdBackupAsyncWithHttpInfo($enterpriseId, $name, $docNodeId, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit')
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->postEnterpriseIdDocNodesDocNodeIdBackupRequest($enterpriseId, $name, $docNodeId, $accessToken, $parentId, $programId, $authType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesDocNodeIdBackup'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $name 文档名称 (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 所属文件夹的 doc_node 的 id，默认为 0 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $authType 权限; 继承: inherit; 私有: private; 只读 read_only; 读写: read_write (optional, default to inherit)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesDocNodeIdBackupRequest($enterpriseId, $name, $docNodeId, $accessToken = null, $parentId = null, $programId = null, $authType = 'inherit')
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesDocNodeIdBackup'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdDocNodesDocNodeIdBackup'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling postEnterpriseIdDocNodesDocNodeIdBackup'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/backup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($authType !== null) {
            $formParams['auth_type'] = ObjectSerializer::toFormValue($authType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdRecycle
     *
     * 移动到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdDocNodesDocNodeIdRecycle($enterpriseId, $docNodeId, $accessToken = null)
    {
        $this->postEnterpriseIdDocNodesDocNodeIdRecycleWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdRecycleWithHttpInfo
     *
     * 移动到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocNodesDocNodeIdRecycleWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesDocNodeIdRecycleRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdRecycleAsync
     *
     * 移动到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesDocNodeIdRecycleAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->postEnterpriseIdDocNodesDocNodeIdRecycleAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocNodesDocNodeIdRecycleAsyncWithHttpInfo
     *
     * 移动到回收站
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocNodesDocNodeIdRecycleAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdDocNodesDocNodeIdRecycleRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocNodesDocNodeIdRecycle'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocNodesDocNodeIdRecycleRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocNodesDocNodeIdRecycle'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling postEnterpriseIdDocNodesDocNodeIdRecycle'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/recycle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchAuth
     *
     * 批量更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds doc_node 节点 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocNodesBatchAuth($enterpriseId, $docNodeIds, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        $this->putEnterpriseIdDocNodesBatchAuthWithHttpInfo($enterpriseId, $docNodeIds, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel);
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchAuthWithHttpInfo
     *
     * 批量更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds doc_node 节点 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesBatchAuthWithHttpInfo($enterpriseId, $docNodeIds, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesBatchAuthRequest($enterpriseId, $docNodeIds, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchAuthAsync
     *
     * 批量更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds doc_node 节点 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesBatchAuthAsync($enterpriseId, $docNodeIds, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        return $this->putEnterpriseIdDocNodesBatchAuthAsyncWithHttpInfo($enterpriseId, $docNodeIds, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchAuthAsyncWithHttpInfo
     *
     * 批量更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds doc_node 节点 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesBatchAuthAsyncWithHttpInfo($enterpriseId, $docNodeIds, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesBatchAuthRequest($enterpriseId, $docNodeIds, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesBatchAuth'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds doc_node 节点 id，使用,，隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesBatchAuthRequest($enterpriseId, $docNodeIds, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesBatchAuth'
            );
        }
        // verify the required parameter 'docNodeIds' is set
        if ($docNodeIds === null || (is_array($docNodeIds) && count($docNodeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeIds when calling putEnterpriseIdDocNodesBatchAuth'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/batch_auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($docNodeIds !== null) {
            $formParams['doc_node_ids'] = ObjectSerializer::toFormValue($docNodeIds);
        }
        // form params
        if ($guessAccess !== null) {
            $formParams['guess_access'] = ObjectSerializer::toFormValue($guessAccess);
        }
        // form params
        if ($enterpriseAccess !== null) {
            $formParams['enterprise_access'] = ObjectSerializer::toFormValue($enterpriseAccess);
        }
        // form params
        if ($accessTargetType !== null) {
            $formParams['access[target_type]'] = ObjectSerializer::toFormValue($accessTargetType);
        }
        // form params
        if ($accessTargetId !== null) {
            $formParams['access[target_id]'] = ObjectSerializer::toFormValue($accessTargetId);
        }
        // form params
        if ($accessAccessLevel !== null) {
            $formParams['access[access_level]'] = ObjectSerializer::toFormValue($accessAccessLevel);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchCollection
     *
     * 批量收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocNodesBatchCollection($enterpriseId, $docNodeIds, $operateType, $accessToken = null)
    {
        $this->putEnterpriseIdDocNodesBatchCollectionWithHttpInfo($enterpriseId, $docNodeIds, $operateType, $accessToken);
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchCollectionWithHttpInfo
     *
     * 批量收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesBatchCollectionWithHttpInfo($enterpriseId, $docNodeIds, $operateType, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesBatchCollectionRequest($enterpriseId, $docNodeIds, $operateType, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchCollectionAsync
     *
     * 批量收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesBatchCollectionAsync($enterpriseId, $docNodeIds, $operateType, $accessToken = null)
    {
        return $this->putEnterpriseIdDocNodesBatchCollectionAsyncWithHttpInfo($enterpriseId, $docNodeIds, $operateType, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchCollectionAsyncWithHttpInfo
     *
     * 批量收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesBatchCollectionAsyncWithHttpInfo($enterpriseId, $docNodeIds, $operateType, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesBatchCollectionRequest($enterpriseId, $docNodeIds, $operateType, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesBatchCollection'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesBatchCollectionRequest($enterpriseId, $docNodeIds, $operateType, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesBatchCollection'
            );
        }
        // verify the required parameter 'docNodeIds' is set
        if ($docNodeIds === null || (is_array($docNodeIds) && count($docNodeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeIds when calling putEnterpriseIdDocNodesBatchCollection'
            );
        }
        // verify the required parameter 'operateType' is set
        if ($operateType === null || (is_array($operateType) && count($operateType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operateType when calling putEnterpriseIdDocNodesBatchCollection'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/batch_collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($docNodeIds !== null) {
            $formParams['doc_node_ids'] = ObjectSerializer::toFormValue($docNodeIds);
        }
        // form params
        if ($operateType !== null) {
            $formParams['operate_type'] = ObjectSerializer::toFormValue($operateType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchMove
     *
     * 批量移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocNodesBatchMove($enterpriseId, $docNodeIds, $parentId, $accessToken = null, $programId = null)
    {
        $this->putEnterpriseIdDocNodesBatchMoveWithHttpInfo($enterpriseId, $docNodeIds, $parentId, $accessToken, $programId);
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchMoveWithHttpInfo
     *
     * 批量移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesBatchMoveWithHttpInfo($enterpriseId, $docNodeIds, $parentId, $accessToken = null, $programId = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesBatchMoveRequest($enterpriseId, $docNodeIds, $parentId, $accessToken, $programId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchMoveAsync
     *
     * 批量移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesBatchMoveAsync($enterpriseId, $docNodeIds, $parentId, $accessToken = null, $programId = null)
    {
        return $this->putEnterpriseIdDocNodesBatchMoveAsyncWithHttpInfo($enterpriseId, $docNodeIds, $parentId, $accessToken, $programId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesBatchMoveAsyncWithHttpInfo
     *
     * 批量移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesBatchMoveAsyncWithHttpInfo($enterpriseId, $docNodeIds, $parentId, $accessToken = null, $programId = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesBatchMoveRequest($enterpriseId, $docNodeIds, $parentId, $accessToken, $programId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesBatchMove'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $docNodeIds 文件 id，使用,，隔开 (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesBatchMoveRequest($enterpriseId, $docNodeIds, $parentId, $accessToken = null, $programId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesBatchMove'
            );
        }
        // verify the required parameter 'docNodeIds' is set
        if ($docNodeIds === null || (is_array($docNodeIds) && count($docNodeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeIds when calling putEnterpriseIdDocNodesBatchMove'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling putEnterpriseIdDocNodesBatchMove'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/batch_move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($docNodeIds !== null) {
            $formParams['doc_node_ids'] = ObjectSerializer::toFormValue($docNodeIds);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeId
     *
     * 更新文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件夹名称 (optional)
     * @param  string $password 设置访问密码（此字段填入空串可取消密码） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode
     */
    public function putEnterpriseIdDocNodesDocNodeId($enterpriseId, $docNodeId, $accessToken = null, $name = null, $password = null)
    {
        list($response) = $this->putEnterpriseIdDocNodesDocNodeIdWithHttpInfo($enterpriseId, $docNodeId, $accessToken, $name, $password);
        return $response;
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdWithHttpInfo
     *
     * 更新文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件夹名称 (optional)
     * @param  string $password 设置访问密码（此字段填入空串可取消密码） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null, $name = null, $password = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken, $name, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdAsync
     *
     * 更新文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件夹名称 (optional)
     * @param  string $password 设置访问密码（此字段填入空串可取消密码） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdAsync($enterpriseId, $docNodeId, $accessToken = null, $name = null, $password = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken, $name, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo
     *
     * 更新文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件夹名称 (optional)
     * @param  string $password 设置访问密码（此字段填入空串可取消密码） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null, $name = null, $password = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken, $name, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件夹名称 (optional)
     * @param  string $password 设置访问密码（此字段填入空串可取消密码） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdRequest($enterpriseId, $docNodeId, $accessToken = null, $name = null, $password = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeId'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeId'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdAuth
     *
     * 更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode
     */
    public function putEnterpriseIdDocNodesDocNodeIdAuth($enterpriseId, $docNodeId, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        list($response) = $this->putEnterpriseIdDocNodesDocNodeIdAuthWithHttpInfo($enterpriseId, $docNodeId, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel);
        return $response;
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdAuthWithHttpInfo
     *
     * 更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdAuthWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdAuthRequest($enterpriseId, $docNodeId, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdAuthAsync
     *
     * 更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdAuthAsync($enterpriseId, $docNodeId, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdAuthAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdAuthAsyncWithHttpInfo
     *
     * 更新文件节点的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdAuthAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdAuthRequest($enterpriseId, $docNodeId, $accessToken, $guessAccess, $enterpriseAccess, $accessTargetType, $accessTargetId, $accessAccessLevel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeIdAuth'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $guessAccess 访客的访问权限; (无权限: 0; 只读: 1;) (optional)
     * @param  int $enterpriseAccess 企业成员的访问权限(无权限: 0; 只读: 1; 读写: 2) (optional)
     * @param  string[] $accessTargetType 关联类型(target_type: program|group|user) (optional)
     * @param  int[] $accessTargetId 关联类型的 id(如 target_type &#x3D; program，则此处应为对应 program 的 id) (optional)
     * @param  int[] $accessAccessLevel 访问属性（无权限: 0; 只读: 1; 读写: 2） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdAuthRequest($enterpriseId, $docNodeId, $accessToken = null, $guessAccess = null, $enterpriseAccess = null, $accessTargetType = null, $accessTargetId = null, $accessAccessLevel = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeIdAuth'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeIdAuth'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($guessAccess !== null) {
            $formParams['guess_access'] = ObjectSerializer::toFormValue($guessAccess);
        }
        // form params
        if ($enterpriseAccess !== null) {
            $formParams['enterprise_access'] = ObjectSerializer::toFormValue($enterpriseAccess);
        }
        // form params
        if ($accessTargetType !== null) {
            $formParams['access[target_type]'] = ObjectSerializer::toFormValue($accessTargetType);
        }
        // form params
        if ($accessTargetId !== null) {
            $formParams['access[target_id]'] = ObjectSerializer::toFormValue($accessTargetId);
        }
        // form params
        if ($accessAccessLevel !== null) {
            $formParams['access[access_level]'] = ObjectSerializer::toFormValue($accessAccessLevel);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdCollection
     *
     * 收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocNodesDocNodeIdCollection($enterpriseId, $docNodeId, $operateType, $accessToken = null)
    {
        $this->putEnterpriseIdDocNodesDocNodeIdCollectionWithHttpInfo($enterpriseId, $docNodeId, $operateType, $accessToken);
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdCollectionWithHttpInfo
     *
     * 收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdCollectionWithHttpInfo($enterpriseId, $docNodeId, $operateType, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdCollectionRequest($enterpriseId, $docNodeId, $operateType, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdCollectionAsync
     *
     * 收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdCollectionAsync($enterpriseId, $docNodeId, $operateType, $accessToken = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdCollectionAsyncWithHttpInfo($enterpriseId, $docNodeId, $operateType, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdCollectionAsyncWithHttpInfo
     *
     * 收藏/取消收藏文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdCollectionAsyncWithHttpInfo($enterpriseId, $docNodeId, $operateType, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdCollectionRequest($enterpriseId, $docNodeId, $operateType, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeIdCollection'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  string $operateType 收藏: set; 取消收藏: unset (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdCollectionRequest($enterpriseId, $docNodeId, $operateType, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeIdCollection'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeIdCollection'
            );
        }
        // verify the required parameter 'operateType' is set
        if ($operateType === null || (is_array($operateType) && count($operateType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operateType when calling putEnterpriseIdDocNodesDocNodeIdCollection'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($operateType !== null) {
            $formParams['operate_type'] = ObjectSerializer::toFormValue($operateType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdIsTop
     *
     * 置顶节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $value 是否置顶（置顶: 1，取消置顶: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode
     */
    public function putEnterpriseIdDocNodesDocNodeIdIsTop($enterpriseId, $docNodeId, $value, $accessToken = null)
    {
        list($response) = $this->putEnterpriseIdDocNodesDocNodeIdIsTopWithHttpInfo($enterpriseId, $docNodeId, $value, $accessToken);
        return $response;
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdIsTopWithHttpInfo
     *
     * 置顶节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $value 是否置顶（置顶: 1，取消置顶: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdIsTopWithHttpInfo($enterpriseId, $docNodeId, $value, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdIsTopRequest($enterpriseId, $docNodeId, $value, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdIsTopAsync
     *
     * 置顶节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $value 是否置顶（置顶: 1，取消置顶: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdIsTopAsync($enterpriseId, $docNodeId, $value, $accessToken = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdIsTopAsyncWithHttpInfo($enterpriseId, $docNodeId, $value, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdIsTopAsyncWithHttpInfo
     *
     * 置顶节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $value 是否置顶（置顶: 1，取消置顶: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdIsTopAsyncWithHttpInfo($enterpriseId, $docNodeId, $value, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdIsTopRequest($enterpriseId, $docNodeId, $value, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeIdIsTop'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $value 是否置顶（置顶: 1，取消置顶: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdIsTopRequest($enterpriseId, $docNodeId, $value, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeIdIsTop'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeIdIsTop'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling putEnterpriseIdDocNodesDocNodeIdIsTop'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/is_top';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdLock
     *
     * 锁定附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocNodesDocNodeIdLock($enterpriseId, $docNodeId, $accessToken = null)
    {
        $this->putEnterpriseIdDocNodesDocNodeIdLockWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdLockWithHttpInfo
     *
     * 锁定附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdLockWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdLockRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdLockAsync
     *
     * 锁定附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdLockAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdLockAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdLockAsyncWithHttpInfo
     *
     * 锁定附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdLockAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdLockRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeIdLock'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdLockRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeIdLock'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeIdLock'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdMove
     *
     * 移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNode
     */
    public function putEnterpriseIdDocNodesDocNodeIdMove($enterpriseId, $docNodeId, $parentId, $accessToken = null, $programId = null)
    {
        list($response) = $this->putEnterpriseIdDocNodesDocNodeIdMoveWithHttpInfo($enterpriseId, $docNodeId, $parentId, $accessToken, $programId);
        return $response;
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdMoveWithHttpInfo
     *
     * 移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdMoveWithHttpInfo($enterpriseId, $docNodeId, $parentId, $accessToken = null, $programId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdMoveRequest($enterpriseId, $docNodeId, $parentId, $accessToken, $programId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdMoveAsync
     *
     * 移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdMoveAsync($enterpriseId, $docNodeId, $parentId, $accessToken = null, $programId = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdMoveAsyncWithHttpInfo($enterpriseId, $docNodeId, $parentId, $accessToken, $programId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdMoveAsyncWithHttpInfo
     *
     * 移动文件节点
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdMoveAsyncWithHttpInfo($enterpriseId, $docNodeId, $parentId, $accessToken = null, $programId = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNode';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdMoveRequest($enterpriseId, $docNodeId, $parentId, $accessToken, $programId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeIdMove'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId doc_node 节点 id (required)
     * @param  int $parentId 挂载到文件下（此处填入上级的 doc_node 节点的 id; 若移动到根目录，parent_id: 0） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 挂载到某项目下（此处填入项目 id） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdMoveRequest($enterpriseId, $docNodeId, $parentId, $accessToken = null, $programId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeIdMove'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeIdMove'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling putEnterpriseIdDocNodesDocNodeIdMove'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdUnlock
     *
     * 解锁附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocNodesDocNodeIdUnlock($enterpriseId, $docNodeId, $accessToken = null)
    {
        $this->putEnterpriseIdDocNodesDocNodeIdUnlockWithHttpInfo($enterpriseId, $docNodeId, $accessToken);
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdUnlockWithHttpInfo
     *
     * 解锁附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocNodesDocNodeIdUnlockWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdUnlockRequest($enterpriseId, $docNodeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdUnlockAsync
     *
     * 解锁附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdUnlockAsync($enterpriseId, $docNodeId, $accessToken = null)
    {
        return $this->putEnterpriseIdDocNodesDocNodeIdUnlockAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocNodesDocNodeIdUnlockAsyncWithHttpInfo
     *
     * 解锁附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocNodesDocNodeIdUnlockAsyncWithHttpInfo($enterpriseId, $docNodeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocNodesDocNodeIdUnlockRequest($enterpriseId, $docNodeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocNodesDocNodeIdUnlock'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docNodeId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocNodesDocNodeIdUnlockRequest($enterpriseId, $docNodeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocNodesDocNodeIdUnlock'
            );
        }
        // verify the required parameter 'docNodeId' is set
        if ($docNodeId === null || (is_array($docNodeId) && count($docNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docNodeId when calling putEnterpriseIdDocNodesDocNodeIdUnlock'
            );
        }

        $resourcePath = '/{enterprise_id}/doc_nodes/{doc_node_id}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docNodeId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_node_id' . '}',
                ObjectSerializer::toPathValue($docNodeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
