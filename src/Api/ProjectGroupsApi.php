<?php
/**
 * ProjectGroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * ProjectGroupsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectGroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupId
     *
     * 删除仓库组（包括子仓库组、仓库，两步验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupId($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $this->deleteEnterpriseIdProjectGroupsProjectGroupIdWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt, $password, $validateType, $smsCaptcha);
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdWithHttpInfo
     *
     * 删除仓库组（包括子仓库组、仓库，两步验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectGroupsProjectGroupIdRequest($enterpriseId, $projectGroupId, $accessToken, $qt, $password, $validateType, $smsCaptcha);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdAsync
     *
     * 删除仓库组（包括子仓库组、仓库，两步验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdAsync($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        return $this->deleteEnterpriseIdProjectGroupsProjectGroupIdAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt, $password, $validateType, $smsCaptcha)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdAsyncWithHttpInfo
     *
     * 删除仓库组（包括子仓库组、仓库，两步验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectGroupsProjectGroupIdRequest($enterpriseId, $projectGroupId, $accessToken, $qt, $password, $validateType, $smsCaptcha);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectGroupsProjectGroupId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectGroupsProjectGroupIdRequest($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectGroupsProjectGroupId'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling deleteEnterpriseIdProjectGroupsProjectGroupId'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($validateType !== null) {
            $formParams['validate_type'] = ObjectSerializer::toFormValue($validateType);
        }
        // form params
        if ($smsCaptcha !== null) {
            $formParams['sms_captcha'] = ObjectSerializer::toFormValue($smsCaptcha);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId
     *
     * 移除仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId($enterpriseId, $memberId, $projectGroupId, $accessToken = null)
    {
        $this->deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdWithHttpInfo
     *
     * 移除仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdRequest($enterpriseId, $memberId, $projectGroupId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsync
     *
     * 移除仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsync($enterpriseId, $memberId, $projectGroupId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsyncWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsyncWithHttpInfo
     *
     * 移除仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsyncWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdRequest($enterpriseId, $memberId, $projectGroupId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdRequest($enterpriseId, $memberId, $projectGroupId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling deleteEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/members/{member_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectGroups
     *
     * 获取仓库组列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 仓库组搜索 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroup
     */
    public function getEnterpriseIdProjectGroups($enterpriseId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectGroupsWithHttpInfo($enterpriseId, $accessToken, $qt, $search, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectGroupsWithHttpInfo
     *
     * 获取仓库组列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 仓库组搜索 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectGroupsWithHttpInfo($enterpriseId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->getEnterpriseIdProjectGroupsRequest($enterpriseId, $accessToken, $qt, $search, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectGroupsAsync
     *
     * 获取仓库组列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 仓库组搜索 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsAsync($enterpriseId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectGroupsAsyncWithHttpInfo($enterpriseId, $accessToken, $qt, $search, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsAsyncWithHttpInfo
     *
     * 获取仓库组列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 仓库组搜索 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->getEnterpriseIdProjectGroupsRequest($enterpriseId, $accessToken, $qt, $search, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectGroups'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 仓库组搜索 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectGroupsRequest($enterpriseId, $accessToken = null, $qt = null, $search = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectGroups'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfo
     *
     * 仓库组删除前的确认数据
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        $this->getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt);
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoWithHttpInfo
     *
     * 仓库组删除前的确认数据
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoRequest($enterpriseId, $projectGroupId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoAsync
     *
     * 仓库组删除前的确认数据
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoAsync($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoAsyncWithHttpInfo
     *
     * 仓库组删除前的确认数据
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoRequest($enterpriseId, $projectGroupId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfo'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfoRequest($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfo'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling getEnterpriseIdProjectGroupsProjectGroupIdDeleteInfo'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/delete_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembers
     *
     * 仓库组成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectGroupId projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  int $authSource 授权来源 0：直接成员 1: 顶级仓库组 2: 顶级团队 (optional)
     * @param  string $search 成员搜索 (optional)
     * @param  string $sort 排序方式（expired_at： 过期时间， created_at: 授权时间（默认）） (optional)
     * @param  string $direction desc： 倒序，asc：顺序 (optional)
     * @param  string $scope not_in:获取不在本仓库组的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroupMember
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembers($enterpriseId, $projectGroupId, $accessToken = null, $accessLevel = null, $authSource = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $accessLevel, $authSource, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersWithHttpInfo
     *
     * 仓库组成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  int $authSource 授权来源 0：直接成员 1: 顶级仓库组 2: 顶级团队 (optional)
     * @param  string $search 成员搜索 (optional)
     * @param  string $sort 排序方式（expired_at： 过期时间， created_at: 授权时间（默认）） (optional)
     * @param  string $direction desc： 倒序，asc：顺序 (optional)
     * @param  string $scope not_in:获取不在本仓库组的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $accessLevel = null, $authSource = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupMember';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersRequest($enterpriseId, $projectGroupId, $accessToken, $accessLevel, $authSource, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersAsync
     *
     * 仓库组成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  int $authSource 授权来源 0：直接成员 1: 顶级仓库组 2: 顶级团队 (optional)
     * @param  string $search 成员搜索 (optional)
     * @param  string $sort 排序方式（expired_at： 过期时间， created_at: 授权时间（默认）） (optional)
     * @param  string $direction desc： 倒序，asc：顺序 (optional)
     * @param  string $scope not_in:获取不在本仓库组的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersAsync($enterpriseId, $projectGroupId, $accessToken = null, $accessLevel = null, $authSource = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $accessLevel, $authSource, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersAsyncWithHttpInfo
     *
     * 仓库组成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  int $authSource 授权来源 0：直接成员 1: 顶级仓库组 2: 顶级团队 (optional)
     * @param  string $search 成员搜索 (optional)
     * @param  string $sort 排序方式（expired_at： 过期时间， created_at: 授权时间（默认）） (optional)
     * @param  string $direction desc： 倒序，asc：顺序 (optional)
     * @param  string $scope not_in:获取不在本仓库组的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $accessLevel = null, $authSource = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupMember';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersRequest($enterpriseId, $projectGroupId, $accessToken, $accessLevel, $authSource, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectGroupsProjectGroupIdMembers'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  int $authSource 授权来源 0：直接成员 1: 顶级仓库组 2: 顶级团队 (optional)
     * @param  string $search 成员搜索 (optional)
     * @param  string $sort 排序方式（expired_at： 过期时间， created_at: 授权时间（默认）） (optional)
     * @param  string $direction desc： 倒序，asc：顺序 (optional)
     * @param  string $scope not_in:获取不在本仓库组的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectGroupsProjectGroupIdMembersRequest($enterpriseId, $projectGroupId, $accessToken = null, $accessLevel = null, $authSource = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectGroupsProjectGroupIdMembers'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling getEnterpriseIdProjectGroupsProjectGroupIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($accessLevel !== null) {
            $queryParams['access_level'] = ObjectSerializer::toQueryValue($accessLevel);
        }
        // query params
        if ($authSource !== null) {
            $queryParams['auth_source'] = ObjectSerializer::toQueryValue($authSource);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($countWithoutSearch !== null) {
            $queryParams['count_without_search'] = ObjectSerializer::toQueryValue($countWithoutSearch);
        }
        // query params
        if ($multiSearch !== null) {
            $queryParams['multi_search'] = ObjectSerializer::toQueryValue($multiSearch);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersComplement
     *
     * 获取同一企业某个仓库不在本仓库组的成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectId project id (required)
     * @param  int $projectGroupId projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectMemberList
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersComplement($enterpriseId, $projectId, $projectGroupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementWithHttpInfo($enterpriseId, $projectId, $projectGroupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementWithHttpInfo
     *
     * 获取同一企业某个仓库不在本仓库组的成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectId project id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectMemberList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementWithHttpInfo($enterpriseId, $projectId, $projectGroupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectMemberList';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementRequest($enterpriseId, $projectId, $projectGroupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectMemberList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementAsync
     *
     * 获取同一企业某个仓库不在本仓库组的成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectId project id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementAsync($enterpriseId, $projectId, $projectGroupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementAsyncWithHttpInfo($enterpriseId, $projectId, $projectGroupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementAsyncWithHttpInfo
     *
     * 获取同一企业某个仓库不在本仓库组的成员列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectId project id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementAsyncWithHttpInfo($enterpriseId, $projectId, $projectGroupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectMemberList';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementRequest($enterpriseId, $projectId, $projectGroupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectGroupsProjectGroupIdMembersComplement'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $projectId project id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectGroupsProjectGroupIdMembersComplementRequest($enterpriseId, $projectId, $projectGroupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectGroupsProjectGroupIdMembersComplement'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectGroupsProjectGroupIdMembersComplement'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling getEnterpriseIdProjectGroupsProjectGroupIdMembersComplement'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/members/complement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($countWithoutSearch !== null) {
            $queryParams['count_without_search'] = ObjectSerializer::toQueryValue($countWithoutSearch);
        }
        // query params
        if ($multiSearch !== null) {
            $queryParams['multi_search'] = ObjectSerializer::toQueryValue($multiSearch);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdOperateAuths
     *
     * 获取仓库组的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroupOperateAuths
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdOperateAuths($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsWithHttpInfo
     *
     * 获取仓库组的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroupOperateAuths, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupOperateAuths';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsRequest($enterpriseId, $projectGroupId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroupOperateAuths',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsAsync
     *
     * 获取仓库组的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsAsync($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsAsyncWithHttpInfo
     *
     * 获取仓库组的操作权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupOperateAuths';
        $request = $this->getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsRequest($enterpriseId, $projectGroupId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectGroupsProjectGroupIdOperateAuths'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectGroupsProjectGroupIdOperateAuthsRequest($enterpriseId, $projectGroupId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectGroupsProjectGroupIdOperateAuths'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling getEnterpriseIdProjectGroupsProjectGroupIdOperateAuths'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/operate_auths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectGroups
     *
     * 新建仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $name 名字 (required)
     * @param  string $path 路径 (required)
     * @param  int $parentId 上级仓库组id，为0时归属于团队根节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 简介 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroup
     */
    public function postEnterpriseIdProjectGroups($enterpriseId, $groupId, $name, $path, $parentId, $accessToken = null, $qt = null, $description = null)
    {
        list($response) = $this->postEnterpriseIdProjectGroupsWithHttpInfo($enterpriseId, $groupId, $name, $path, $parentId, $accessToken, $qt, $description);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectGroupsWithHttpInfo
     *
     * 新建仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $name 名字 (required)
     * @param  string $path 路径 (required)
     * @param  int $parentId 上级仓库组id，为0时归属于团队根节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 简介 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectGroupsWithHttpInfo($enterpriseId, $groupId, $name, $path, $parentId, $accessToken = null, $qt = null, $description = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->postEnterpriseIdProjectGroupsRequest($enterpriseId, $groupId, $name, $path, $parentId, $accessToken, $qt, $description);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectGroupsAsync
     *
     * 新建仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $name 名字 (required)
     * @param  string $path 路径 (required)
     * @param  int $parentId 上级仓库组id，为0时归属于团队根节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 简介 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectGroupsAsync($enterpriseId, $groupId, $name, $path, $parentId, $accessToken = null, $qt = null, $description = null)
    {
        return $this->postEnterpriseIdProjectGroupsAsyncWithHttpInfo($enterpriseId, $groupId, $name, $path, $parentId, $accessToken, $qt, $description)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectGroupsAsyncWithHttpInfo
     *
     * 新建仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $name 名字 (required)
     * @param  string $path 路径 (required)
     * @param  int $parentId 上级仓库组id，为0时归属于团队根节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 简介 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectGroupsAsyncWithHttpInfo($enterpriseId, $groupId, $name, $path, $parentId, $accessToken = null, $qt = null, $description = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->postEnterpriseIdProjectGroupsRequest($enterpriseId, $groupId, $name, $path, $parentId, $accessToken, $qt, $description);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectGroups'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $name 名字 (required)
     * @param  string $path 路径 (required)
     * @param  int $parentId 上级仓库组id，为0时归属于团队根节点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 简介 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectGroupsRequest($enterpriseId, $groupId, $name, $path, $parentId, $accessToken = null, $qt = null, $description = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectGroups'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling postEnterpriseIdProjectGroups'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdProjectGroups'
            );
        }
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postEnterpriseIdProjectGroups'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling postEnterpriseIdProjectGroups'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($groupId !== null) {
            $formParams['group_id'] = ObjectSerializer::toFormValue($groupId);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectGroupsProjectGroupIdMembers
     *
     * 添加仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $users 要添加的成员信息,例如[{\&quot;id\&quot;:\&quot;13\&quot;, \&quot;access_level\&quot;:\&quot;30\&quot;}] (required)
     * @param  int $projectGroupId projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\InviteProjectGroupMember
     */
    public function postEnterpriseIdProjectGroupsProjectGroupIdMembers($enterpriseId, $users, $projectGroupId, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdProjectGroupsProjectGroupIdMembersWithHttpInfo($enterpriseId, $users, $projectGroupId, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectGroupsProjectGroupIdMembersWithHttpInfo
     *
     * 添加仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $users 要添加的成员信息,例如[{\&quot;id\&quot;:\&quot;13\&quot;, \&quot;access_level\&quot;:\&quot;30\&quot;}] (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\InviteProjectGroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectGroupsProjectGroupIdMembersWithHttpInfo($enterpriseId, $users, $projectGroupId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\InviteProjectGroupMember';
        $request = $this->postEnterpriseIdProjectGroupsProjectGroupIdMembersRequest($enterpriseId, $users, $projectGroupId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\InviteProjectGroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectGroupsProjectGroupIdMembersAsync
     *
     * 添加仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $users 要添加的成员信息,例如[{\&quot;id\&quot;:\&quot;13\&quot;, \&quot;access_level\&quot;:\&quot;30\&quot;}] (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectGroupsProjectGroupIdMembersAsync($enterpriseId, $users, $projectGroupId, $accessToken = null)
    {
        return $this->postEnterpriseIdProjectGroupsProjectGroupIdMembersAsyncWithHttpInfo($enterpriseId, $users, $projectGroupId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectGroupsProjectGroupIdMembersAsyncWithHttpInfo
     *
     * 添加仓库组成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $users 要添加的成员信息,例如[{\&quot;id\&quot;:\&quot;13\&quot;, \&quot;access_level\&quot;:\&quot;30\&quot;}] (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectGroupsProjectGroupIdMembersAsyncWithHttpInfo($enterpriseId, $users, $projectGroupId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\InviteProjectGroupMember';
        $request = $this->postEnterpriseIdProjectGroupsProjectGroupIdMembersRequest($enterpriseId, $users, $projectGroupId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectGroupsProjectGroupIdMembers'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $users 要添加的成员信息,例如[{\&quot;id\&quot;:\&quot;13\&quot;, \&quot;access_level\&quot;:\&quot;30\&quot;}] (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectGroupsProjectGroupIdMembersRequest($enterpriseId, $users, $projectGroupId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectGroupsProjectGroupIdMembers'
            );
        }
        // verify the required parameter 'users' is set
        if ($users === null || (is_array($users) && count($users) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $users when calling postEnterpriseIdProjectGroupsProjectGroupIdMembers'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling postEnterpriseIdProjectGroupsProjectGroupIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($users !== null) {
            $formParams['users'] = ObjectSerializer::toFormValue($users);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupId
     *
     * 更新仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $ownerId 负责人ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroup
     */
    public function putEnterpriseIdProjectGroupsProjectGroupId($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $name = null, $description = null, $ownerId = null)
    {
        list($response) = $this->putEnterpriseIdProjectGroupsProjectGroupIdWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt, $name, $description, $ownerId);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdWithHttpInfo
     *
     * 更新仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $ownerId 负责人ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $name = null, $description = null, $ownerId = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdRequest($enterpriseId, $projectGroupId, $accessToken, $qt, $name, $description, $ownerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdAsync
     *
     * 更新仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $ownerId 负责人ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdAsync($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $name = null, $description = null, $ownerId = null)
    {
        return $this->putEnterpriseIdProjectGroupsProjectGroupIdAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken, $qt, $name, $description, $ownerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdAsyncWithHttpInfo
     *
     * 更新仓库组
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $ownerId 负责人ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdAsyncWithHttpInfo($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $name = null, $description = null, $ownerId = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdRequest($enterpriseId, $projectGroupId, $accessToken, $qt, $name, $description, $ownerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectGroupsProjectGroupId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $ownerId 负责人ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectGroupsProjectGroupIdRequest($enterpriseId, $projectGroupId, $accessToken = null, $qt = null, $name = null, $description = null, $ownerId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectGroupsProjectGroupId'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling putEnterpriseIdProjectGroupsProjectGroupId'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($ownerId !== null) {
            $formParams['owner_id'] = ObjectSerializer::toFormValue($ownerId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangeParent
     *
     * 转移仓库组（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  int $targetProjectGroupId 目标仓库组id，为0时移动到组织根下 (required)
     * @param  int $groupId 目标团队ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroup
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangeParent($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        list($response) = $this->putEnterpriseIdProjectGroupsProjectGroupIdChangeParentWithHttpInfo($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken, $qt, $password, $validateType, $smsCaptcha);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangeParentWithHttpInfo
     *
     * 转移仓库组（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  int $targetProjectGroupId 目标仓库组id，为0时移动到组织根下 (required)
     * @param  int $groupId 目标团队ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangeParentWithHttpInfo($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdChangeParentRequest($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken, $qt, $password, $validateType, $smsCaptcha);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangeParentAsync
     *
     * 转移仓库组（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  int $targetProjectGroupId 目标仓库组id，为0时移动到组织根下 (required)
     * @param  int $groupId 目标团队ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangeParentAsync($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        return $this->putEnterpriseIdProjectGroupsProjectGroupIdChangeParentAsyncWithHttpInfo($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken, $qt, $password, $validateType, $smsCaptcha)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangeParentAsyncWithHttpInfo
     *
     * 转移仓库组（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  int $targetProjectGroupId 目标仓库组id，为0时移动到组织根下 (required)
     * @param  int $groupId 目标团队ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangeParentAsyncWithHttpInfo($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdChangeParentRequest($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken, $qt, $password, $validateType, $smsCaptcha);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectGroupsProjectGroupIdChangeParent'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  int $targetProjectGroupId 目标仓库组id，为0时移动到组织根下 (required)
     * @param  int $groupId 目标团队ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectGroupsProjectGroupIdChangeParentRequest($enterpriseId, $projectGroupId, $targetProjectGroupId, $groupId, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectGroupsProjectGroupIdChangeParent'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling putEnterpriseIdProjectGroupsProjectGroupIdChangeParent'
            );
        }
        // verify the required parameter 'targetProjectGroupId' is set
        if ($targetProjectGroupId === null || (is_array($targetProjectGroupId) && count($targetProjectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetProjectGroupId when calling putEnterpriseIdProjectGroupsProjectGroupIdChangeParent'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling putEnterpriseIdProjectGroupsProjectGroupIdChangeParent'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/change_parent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($validateType !== null) {
            $formParams['validate_type'] = ObjectSerializer::toFormValue($validateType);
        }
        // form params
        if ($smsCaptcha !== null) {
            $formParams['sms_captcha'] = ObjectSerializer::toFormValue($smsCaptcha);
        }
        // form params
        if ($targetProjectGroupId !== null) {
            $formParams['target_project_group_id'] = ObjectSerializer::toFormValue($targetProjectGroupId);
        }
        // form params
        if ($groupId !== null) {
            $formParams['group_id'] = ObjectSerializer::toFormValue($groupId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangePath
     *
     * 修改仓库组路径（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $newPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroup
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangePath($enterpriseId, $projectGroupId, $newPath, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        list($response) = $this->putEnterpriseIdProjectGroupsProjectGroupIdChangePathWithHttpInfo($enterpriseId, $projectGroupId, $newPath, $accessToken, $qt, $password, $validateType, $smsCaptcha);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangePathWithHttpInfo
     *
     * 修改仓库组路径（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $newPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangePathWithHttpInfo($enterpriseId, $projectGroupId, $newPath, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdChangePathRequest($enterpriseId, $projectGroupId, $newPath, $accessToken, $qt, $password, $validateType, $smsCaptcha);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangePathAsync
     *
     * 修改仓库组路径（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $newPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangePathAsync($enterpriseId, $projectGroupId, $newPath, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        return $this->putEnterpriseIdProjectGroupsProjectGroupIdChangePathAsyncWithHttpInfo($enterpriseId, $projectGroupId, $newPath, $accessToken, $qt, $password, $validateType, $smsCaptcha)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdChangePathAsyncWithHttpInfo
     *
     * 修改仓库组路径（需要二次验证）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $newPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdChangePathAsyncWithHttpInfo($enterpriseId, $projectGroupId, $newPath, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroup';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdChangePathRequest($enterpriseId, $projectGroupId, $newPath, $accessToken, $qt, $password, $validateType, $smsCaptcha);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectGroupsProjectGroupIdChangePath'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectGroupId 仓库组id/complete_path (required)
     * @param  string $newPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectGroupsProjectGroupIdChangePathRequest($enterpriseId, $projectGroupId, $newPath, $accessToken = null, $qt = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectGroupsProjectGroupIdChangePath'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling putEnterpriseIdProjectGroupsProjectGroupIdChangePath'
            );
        }
        // verify the required parameter 'newPath' is set
        if ($newPath === null || (is_array($newPath) && count($newPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newPath when calling putEnterpriseIdProjectGroupsProjectGroupIdChangePath'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/change_path';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($newPath !== null) {
            $formParams['new_path'] = ObjectSerializer::toFormValue($newPath);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($validateType !== null) {
            $formParams['validate_type'] = ObjectSerializer::toFormValue($validateType);
        }
        // form params
        if ($smsCaptcha !== null) {
            $formParams['sms_captcha'] = ObjectSerializer::toFormValue($smsCaptcha);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId
     *
     * 修改仓库组成员信息
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 仓库角色级别, 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $expiredAt 过期时间（格式：yyyy-mm-dd，不填默认一直有效） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroupMember
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId($enterpriseId, $memberId, $projectGroupId, $accessToken = null, $accessLevel = null, $expiredAt = null)
    {
        list($response) = $this->putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken, $accessLevel, $expiredAt);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdWithHttpInfo
     *
     * 修改仓库组成员信息
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 仓库角色级别, 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $expiredAt 过期时间（格式：yyyy-mm-dd，不填默认一直有效） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken = null, $accessLevel = null, $expiredAt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupMember';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdRequest($enterpriseId, $memberId, $projectGroupId, $accessToken, $accessLevel, $expiredAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsync
     *
     * 修改仓库组成员信息
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 仓库角色级别, 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $expiredAt 过期时间（格式：yyyy-mm-dd，不填默认一直有效） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsync($enterpriseId, $memberId, $projectGroupId, $accessToken = null, $accessLevel = null, $expiredAt = null)
    {
        return $this->putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsyncWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken, $accessLevel, $expiredAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsyncWithHttpInfo
     *
     * 修改仓库组成员信息
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 仓库角色级别, 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $expiredAt 过期时间（格式：yyyy-mm-dd，不填默认一直有效） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdAsyncWithHttpInfo($enterpriseId, $memberId, $projectGroupId, $accessToken = null, $accessLevel = null, $expiredAt = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupMember';
        $request = $this->putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdRequest($enterpriseId, $memberId, $projectGroupId, $accessToken, $accessLevel, $expiredAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $memberId 成员id (required)
     * @param  int $projectGroupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $accessLevel 仓库角色级别, 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $expiredAt 过期时间（格式：yyyy-mm-dd，不填默认一直有效） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberIdRequest($enterpriseId, $memberId, $projectGroupId, $accessToken = null, $accessLevel = null, $expiredAt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
            );
        }
        // verify the required parameter 'projectGroupId' is set
        if ($projectGroupId === null || (is_array($projectGroupId) && count($projectGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectGroupId when calling putEnterpriseIdProjectGroupsProjectGroupIdMembersMemberId'
            );
        }

        $resourcePath = '/{enterprise_id}/project_groups/{project_group_id}/members/{member_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($projectGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_group_id' . '}',
                ObjectSerializer::toPathValue($projectGroupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($accessLevel !== null) {
            $formParams['access_level'] = ObjectSerializer::toFormValue($accessLevel);
        }
        // form params
        if ($expiredAt !== null) {
            $formParams['expired_at'] = ObjectSerializer::toFormValue($expiredAt);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
