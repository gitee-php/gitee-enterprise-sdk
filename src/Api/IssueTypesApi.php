<?php
/**
 * IssueTypesApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * IssueTypesApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssueTypesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeId
     *
     * 删除任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeId($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo($enterpriseId, $issueTypeId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo
     *
     * 删除任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdAsync
     *
     * 删除任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdAsync($enterpriseId, $issueTypeId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo
     *
     * 删除任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssueTypesIssueTypeId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssueTypesIssueTypeId'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling deleteEnterpriseIdIssueTypesIssueTypeId'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramId
     *
     * 移除项目下任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId programId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramId($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdWithHttpInfo
     *
     * 移除项目下任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdRequest($enterpriseId, $issueTypeId, $programId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdAsync
     *
     * 移除项目下任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdAsync($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdAsyncWithHttpInfo
     *
     * 移除项目下任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdRequest($enterpriseId, $issueTypeId, $programId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramIdRequest($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramId'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramId'
            );
        }
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling deleteEnterpriseIdIssueTypesIssueTypeIdProgramSettingProgramId'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/program_setting/{program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }
        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypes
     *
     * 获取任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $programId 项目ID (optional)
     * @param  string $scope 查询范围：all, customize (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueType[]
     */
    public function getEnterpriseIdIssueTypes($enterpriseId, $accessToken = null, $sort = null, $direction = null, $programId = null, $scope = null, $category = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesWithHttpInfo($enterpriseId, $accessToken, $sort, $direction, $programId, $scope, $category, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesWithHttpInfo
     *
     * 获取任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $programId 项目ID (optional)
     * @param  string $scope 查询范围：all, customize (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesWithHttpInfo($enterpriseId, $accessToken = null, $sort = null, $direction = null, $programId = null, $scope = null, $category = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType[]';
        $request = $this->getEnterpriseIdIssueTypesRequest($enterpriseId, $accessToken, $sort, $direction, $programId, $scope, $category, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesAsync
     *
     * 获取任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $programId 项目ID (optional)
     * @param  string $scope 查询范围：all, customize (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesAsync($enterpriseId, $accessToken = null, $sort = null, $direction = null, $programId = null, $scope = null, $category = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesAsyncWithHttpInfo($enterpriseId, $accessToken, $sort, $direction, $programId, $scope, $category, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesAsyncWithHttpInfo
     *
     * 获取任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $programId 项目ID (optional)
     * @param  string $scope 查询范围：all, customize (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesAsyncWithHttpInfo($enterpriseId, $accessToken = null, $sort = null, $direction = null, $programId = null, $scope = null, $category = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType[]';
        $request = $this->getEnterpriseIdIssueTypesRequest($enterpriseId, $accessToken, $sort, $direction, $programId, $scope, $category, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypes'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $programId 项目ID (optional)
     * @param  string $scope 查询范围：all, customize (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesRequest($enterpriseId, $accessToken = null, $sort = null, $direction = null, $programId = null, $scope = null, $category = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypes'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesDefault
     *
     * 获取项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeInProgram
     */
    public function getEnterpriseIdIssueTypesDefault($enterpriseId, $programId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesDefaultWithHttpInfo($enterpriseId, $programId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesDefaultWithHttpInfo
     *
     * 获取项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeInProgram, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesDefaultWithHttpInfo($enterpriseId, $programId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram';
        $request = $this->getEnterpriseIdIssueTypesDefaultRequest($enterpriseId, $programId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeInProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesDefaultAsync
     *
     * 获取项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesDefaultAsync($enterpriseId, $programId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssueTypesDefaultAsyncWithHttpInfo($enterpriseId, $programId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesDefaultAsyncWithHttpInfo
     *
     * 获取项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesDefaultAsyncWithHttpInfo($enterpriseId, $programId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram';
        $request = $this->getEnterpriseIdIssueTypesDefaultRequest($enterpriseId, $programId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesDefault'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesDefaultRequest($enterpriseId, $programId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesDefault'
            );
        }
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdIssueTypesDefault'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/default';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesEnterpriseIssueTypes
     *
     * 获取企业任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性,多个分类以英文逗号分隔 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeInEnterprise[]
     */
    public function getEnterpriseIdIssueTypesEnterpriseIssueTypes($enterpriseId, $accessToken = null, $sort = null, $direction = null, $category = null, $search = null, $state = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesEnterpriseIssueTypesWithHttpInfo($enterpriseId, $accessToken, $sort, $direction, $category, $search, $state, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesEnterpriseIssueTypesWithHttpInfo
     *
     * 获取企业任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性,多个分类以英文逗号分隔 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeInEnterprise[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesEnterpriseIssueTypesWithHttpInfo($enterpriseId, $accessToken = null, $sort = null, $direction = null, $category = null, $search = null, $state = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInEnterprise[]';
        $request = $this->getEnterpriseIdIssueTypesEnterpriseIssueTypesRequest($enterpriseId, $accessToken, $sort, $direction, $category, $search, $state, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeInEnterprise[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesEnterpriseIssueTypesAsync
     *
     * 获取企业任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性,多个分类以英文逗号分隔 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesEnterpriseIssueTypesAsync($enterpriseId, $accessToken = null, $sort = null, $direction = null, $category = null, $search = null, $state = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesEnterpriseIssueTypesAsyncWithHttpInfo($enterpriseId, $accessToken, $sort, $direction, $category, $search, $state, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesEnterpriseIssueTypesAsyncWithHttpInfo
     *
     * 获取企业任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性,多个分类以英文逗号分隔 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesEnterpriseIssueTypesAsyncWithHttpInfo($enterpriseId, $accessToken = null, $sort = null, $direction = null, $category = null, $search = null, $state = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInEnterprise[]';
        $request = $this->getEnterpriseIdIssueTypesEnterpriseIssueTypesRequest($enterpriseId, $accessToken, $sort, $direction, $category, $search, $state, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesEnterpriseIssueTypes'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性,多个分类以英文逗号分隔 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesEnterpriseIssueTypesRequest($enterpriseId, $accessToken = null, $sort = null, $direction = null, $category = null, $search = null, $state = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesEnterpriseIssueTypes'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/enterprise_issue_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeId
     *
     * 任务类型详情(状态管理)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeWithStateRef
     */
    public function getEnterpriseIdIssueTypesIssueTypeId($enterpriseId, $issueTypeId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo($enterpriseId, $issueTypeId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo
     *
     * 任务类型详情(状态管理)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeWithStateRef, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeWithStateRef';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeWithStateRef',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdAsync
     *
     * 任务类型详情(状态管理)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdAsync($enterpriseId, $issueTypeId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo
     *
     * 任务类型详情(状态管理)
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeWithStateRef';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeId'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeId'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssues
     *
     * 指定任务类型,任务状态下任务列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $issueStateId 任务状态 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssues($enterpriseId, $issueTypeId, $issueStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesWithHttpInfo($enterpriseId, $issueTypeId, $issueStateId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesWithHttpInfo
     *
     * 指定任务类型,任务状态下任务列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $issueStateId 任务状态 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesWithHttpInfo($enterpriseId, $issueTypeId, $issueStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesRequest($enterpriseId, $issueTypeId, $issueStateId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesAsync
     *
     * 指定任务类型,任务状态下任务列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $issueStateId 任务状态 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesAsync($enterpriseId, $issueTypeId, $issueStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesAsyncWithHttpInfo($enterpriseId, $issueTypeId, $issueStateId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesAsyncWithHttpInfo
     *
     * 指定任务类型,任务状态下任务列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $issueStateId 任务状态 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesAsyncWithHttpInfo($enterpriseId, $issueTypeId, $issueStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesRequest($enterpriseId, $issueTypeId, $issueStateId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssues'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $issueStateId 任务状态 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssuesRequest($enterpriseId, $issueTypeId, $issueStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssues'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssues'
            );
        }
        // verify the required parameter 'issueStateId' is set
        if ($issueStateId === null || (is_array($issueStateId) && count($issueStateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueStateId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateIdIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/{issue_state_id}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }
        // path params
        if ($issueStateId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_state_id' . '}',
                ObjectSerializer::toPathValue($issueStateId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgress
     *
     * 获取状态替换进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgress($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressWithHttpInfo($enterpriseId, $issueTypeId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressWithHttpInfo
     *
     * 获取状态替换进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressRequest($enterpriseId, $issueTypeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressAsync
     *
     * 获取状态替换进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressAsync($enterpriseId, $issueTypeId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressAsyncWithHttpInfo
     *
     * 获取状态替换进度
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressRequest($enterpriseId, $issueTypeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgress'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgressRequest($enterpriseId, $issueTypeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgress'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateFetchProgress'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/issue_state_migrate/fetch_progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteState
     *
     * 获取状态迁移自动分配的状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueState
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteState($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateWithHttpInfo
     *
     * 获取状态迁移自动分配的状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueState, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueState';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateRequest($enterpriseId, $issueTypeId, $sourceStateId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateAsync
     *
     * 获取状态迁移自动分配的状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateAsync($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateAsyncWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateAsyncWithHttpInfo
     *
     * 获取状态迁移自动分配的状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateAsyncWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueState';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateRequest($enterpriseId, $issueTypeId, $sourceStateId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteState'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteStateRequest($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteState'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteState'
            );
        }
        // verify the required parameter 'sourceStateId' is set
        if ($sourceStateId === null || (is_array($sourceStateId) && count($sourceStateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceStateId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateSubstituteState'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/issue_state_migrate/substitute_state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sourceStateId !== null) {
            $queryParams['source_state_id'] = ObjectSerializer::toQueryValue($sourceStateId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStates
     *
     * 获取状态替换目标状态可选下拉列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueStateForMigration
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStates($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesWithHttpInfo
     *
     * 获取状态替换目标状态可选下拉列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueStateForMigration, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueStateForMigration';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesRequest($enterpriseId, $issueTypeId, $sourceStateId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueStateForMigration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesAsync
     *
     * 获取状态替换目标状态可选下拉列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesAsync($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesAsyncWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesAsyncWithHttpInfo
     *
     * 获取状态替换目标状态可选下拉列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesAsyncWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueStateForMigration';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesRequest($enterpriseId, $issueTypeId, $sourceStateId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStates'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStatesRequest($enterpriseId, $issueTypeId, $sourceStateId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStates'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStates'
            );
        }
        // verify the required parameter 'sourceStateId' is set
        if ($sourceStateId === null || (is_array($sourceStateId) && count($sourceStateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceStateId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateTargetStates'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/issue_state_migrate/target_states';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($sourceStateId !== null) {
            $queryParams['source_state_id'] = ObjectSerializer::toQueryValue($sourceStateId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefs
     *
     * 获取单个任务类型下的任务状态引用
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueState[]
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefs($enterpriseId, $issueTypeId, $accessToken = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsWithHttpInfo
     *
     * 获取单个任务类型下的任务状态引用
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueState[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueState[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsRequest($enterpriseId, $issueTypeId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueState[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsAsync
     *
     * 获取单个任务类型下的任务状态引用
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsAsync($enterpriseId, $issueTypeId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsAsyncWithHttpInfo
     *
     * 获取单个任务类型下的任务状态引用
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueState[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsRequest($enterpriseId, $issueTypeId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefs'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefsRequest($enterpriseId, $issueTypeId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefs'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStateRefs'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/issue_state_refs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStates
     *
     * 获取单个任务类型下的任务状态列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueState[]
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStates($enterpriseId, $issueTypeId, $accessToken = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStatesWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStatesWithHttpInfo
     *
     * 获取单个任务类型下的任务状态列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueState[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStatesWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueState[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStatesRequest($enterpriseId, $issueTypeId, $accessToken, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueState[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStatesAsync
     *
     * 获取单个任务类型下的任务状态列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStatesAsync($enterpriseId, $issueTypeId, $accessToken = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStatesAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdIssueStatesAsyncWithHttpInfo
     *
     * 获取单个任务类型下的任务状态列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdIssueStatesAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueState[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdIssueStatesRequest($enterpriseId, $issueTypeId, $accessToken, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdIssueStates'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdIssueStatesRequest($enterpriseId, $issueTypeId, $accessToken = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStates'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdIssueStates'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/issue_states';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdPrograms
     *
     * 获取单个任务类型下的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Program[]
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdPrograms($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $search, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsWithHttpInfo
     *
     * 获取单个任务类型下的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Program[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsRequest($enterpriseId, $issueTypeId, $accessToken, $search, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Program[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsAsync
     *
     * 获取单个任务类型下的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsAsync($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $search, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsAsyncWithHttpInfo
     *
     * 获取单个任务类型下的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsRequest($enterpriseId, $issueTypeId, $accessToken, $search, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdPrograms'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdProgramsRequest($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdPrograms'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsUnused
     *
     * 获取任务类型下未添加的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $targetTypeId 目标类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Program[]
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsUnused($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $targetTypeId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $search, $targetTypeId, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedWithHttpInfo
     *
     * 获取任务类型下未添加的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $targetTypeId 目标类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Program[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $targetTypeId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedRequest($enterpriseId, $issueTypeId, $accessToken, $search, $targetTypeId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Program[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedAsync
     *
     * 获取任务类型下未添加的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $targetTypeId 目标类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedAsync($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $targetTypeId = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $search, $targetTypeId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedAsyncWithHttpInfo
     *
     * 获取任务类型下未添加的项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $targetTypeId 目标类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $targetTypeId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program[]';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedRequest($enterpriseId, $issueTypeId, $accessToken, $search, $targetTypeId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdProgramsUnused'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  int $targetTypeId 目标类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdProgramsUnusedRequest($enterpriseId, $issueTypeId, $accessToken = null, $search = null, $targetTypeId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdProgramsUnused'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdProgramsUnused'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/programs_unused';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($targetTypeId !== null) {
            $queryParams['target_type_id'] = ObjectSerializer::toQueryValue($targetTypeId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdWorkflow
     *
     * 获取企业任务状态的流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdWorkflow($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $this->getEnterpriseIdIssueTypesIssueTypeIdWorkflowWithHttpInfo($enterpriseId, $issueTypeId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdWorkflowWithHttpInfo
     *
     * 获取企业任务状态的流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdWorkflowWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdWorkflowRequest($enterpriseId, $issueTypeId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdWorkflowAsync
     *
     * 获取企业任务状态的流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdWorkflowAsync($enterpriseId, $issueTypeId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssueTypesIssueTypeIdWorkflowAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesIssueTypeIdWorkflowAsyncWithHttpInfo
     *
     * 获取企业任务状态的流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesIssueTypeIdWorkflowAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssueTypesIssueTypeIdWorkflowRequest($enterpriseId, $issueTypeId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesIssueTypeIdWorkflow'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesIssueTypeIdWorkflowRequest($enterpriseId, $issueTypeId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesIssueTypeIdWorkflow'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling getEnterpriseIdIssueTypesIssueTypeIdWorkflow'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/workflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssueTypesProgramIssueTypes
     *
     * 获取项目任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  bool $requirementNeedTask 需求是否需要返回任务类型 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $unused 是否只获取未添加到指定项目的任务类型 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeInProgram[]
     */
    public function getEnterpriseIdIssueTypesProgramIssueTypes($enterpriseId, $programId, $accessToken = null, $sort = null, $direction = null, $category = null, $requirementNeedTask = null, $search = null, $unused = null, $state = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssueTypesProgramIssueTypesWithHttpInfo($enterpriseId, $programId, $accessToken, $sort, $direction, $category, $requirementNeedTask, $search, $unused, $state, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssueTypesProgramIssueTypesWithHttpInfo
     *
     * 获取项目任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  bool $requirementNeedTask 需求是否需要返回任务类型 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $unused 是否只获取未添加到指定项目的任务类型 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeInProgram[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssueTypesProgramIssueTypesWithHttpInfo($enterpriseId, $programId, $accessToken = null, $sort = null, $direction = null, $category = null, $requirementNeedTask = null, $search = null, $unused = null, $state = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram[]';
        $request = $this->getEnterpriseIdIssueTypesProgramIssueTypesRequest($enterpriseId, $programId, $accessToken, $sort, $direction, $category, $requirementNeedTask, $search, $unused, $state, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeInProgram[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssueTypesProgramIssueTypesAsync
     *
     * 获取项目任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  bool $requirementNeedTask 需求是否需要返回任务类型 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $unused 是否只获取未添加到指定项目的任务类型 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesProgramIssueTypesAsync($enterpriseId, $programId, $accessToken = null, $sort = null, $direction = null, $category = null, $requirementNeedTask = null, $search = null, $unused = null, $state = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssueTypesProgramIssueTypesAsyncWithHttpInfo($enterpriseId, $programId, $accessToken, $sort, $direction, $category, $requirementNeedTask, $search, $unused, $state, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssueTypesProgramIssueTypesAsyncWithHttpInfo
     *
     * 获取项目任务类型列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  bool $requirementNeedTask 需求是否需要返回任务类型 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $unused 是否只获取未添加到指定项目的任务类型 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssueTypesProgramIssueTypesAsyncWithHttpInfo($enterpriseId, $programId, $accessToken = null, $sort = null, $direction = null, $category = null, $requirementNeedTask = null, $search = null, $unused = null, $state = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram[]';
        $request = $this->getEnterpriseIdIssueTypesProgramIssueTypesRequest($enterpriseId, $programId, $accessToken, $sort, $direction, $category, $requirementNeedTask, $search, $unused, $state, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssueTypesProgramIssueTypes'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、serial) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  bool $requirementNeedTask 需求是否需要返回任务类型 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $unused 是否只获取未添加到指定项目的任务类型 (optional)
     * @param  int $state 项目的任务类型的状态：1-开启，0-关闭 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssueTypesProgramIssueTypesRequest($enterpriseId, $programId, $accessToken = null, $sort = null, $direction = null, $category = null, $requirementNeedTask = null, $search = null, $unused = null, $state = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssueTypesProgramIssueTypes'
            );
        }
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdIssueTypesProgramIssueTypes'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/program_issue_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($requirementNeedTask !== null) {
            $queryParams['requirement_need_task'] = ObjectSerializer::toQueryValue($requirementNeedTask);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($unused !== null) {
            $queryParams['unused'] = ObjectSerializer::toQueryValue($unused);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssueTypes
     *
     * 新增任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务类型名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueType
     */
    public function postEnterpriseIdIssueTypes($enterpriseId, $title, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null)
    {
        list($response) = $this->postEnterpriseIdIssueTypesWithHttpInfo($enterpriseId, $title, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssueTypesWithHttpInfo
     *
     * 新增任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务类型名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueType, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssueTypesWithHttpInfo($enterpriseId, $title, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType';
        $request = $this->postEnterpriseIdIssueTypesRequest($enterpriseId, $title, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssueTypesAsync
     *
     * 新增任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务类型名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesAsync($enterpriseId, $title, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null)
    {
        return $this->postEnterpriseIdIssueTypesAsyncWithHttpInfo($enterpriseId, $title, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssueTypesAsyncWithHttpInfo
     *
     * 新增任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务类型名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesAsyncWithHttpInfo($enterpriseId, $title, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType';
        $request = $this->postEnterpriseIdIssueTypesRequest($enterpriseId, $title, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssueTypes'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务类型名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssueTypesRequest($enterpriseId, $title, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssueTypes'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling postEnterpriseIdIssueTypes'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($stateIds !== null) {
            $formParams['state_ids'] = ObjectSerializer::toFormValue($stateIds);
        }
        // form params
        if ($progressingIds !== null) {
            $formParams['progressing_ids'] = ObjectSerializer::toFormValue($progressingIds);
        }
        // form params
        if ($closedIds !== null) {
            $formParams['closed_ids'] = ObjectSerializer::toFormValue($closedIds);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($rejectedIds !== null) {
            $formParams['rejected_ids'] = ObjectSerializer::toFormValue($rejectedIds);
        }
        // form params
        if ($template !== null) {
            $formParams['template'] = ObjectSerializer::toFormValue($template);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate
     *
     * 工作项状态替换
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  int $targetStateId 目标任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken = null)
    {
        $this->postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken);
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateWithHttpInfo
     *
     * 工作项状态替换
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  int $targetStateId 目标任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateRequest($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateAsync
     *
     * 工作项状态替换
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  int $targetStateId 目标任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateAsync($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken = null)
    {
        return $this->postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateAsyncWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateAsyncWithHttpInfo
     *
     * 工作项状态替换
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  int $targetStateId 目标任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateAsyncWithHttpInfo($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateRequest($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $sourceStateId 源任务状态 ID (required)
     * @param  int $targetStateId 目标任务状态 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrateRequest($enterpriseId, $issueTypeId, $sourceStateId, $targetStateId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate'
            );
        }
        // verify the required parameter 'sourceStateId' is set
        if ($sourceStateId === null || (is_array($sourceStateId) && count($sourceStateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceStateId when calling postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate'
            );
        }
        // verify the required parameter 'targetStateId' is set
        if ($targetStateId === null || (is_array($targetStateId) && count($targetStateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetStateId when calling postEnterpriseIdIssueTypesIssueTypeIdIssueStateMigrateMigrate'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/issue_state_migrate/migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($sourceStateId !== null) {
            $formParams['source_state_id'] = ObjectSerializer::toFormValue($sourceStateId);
        }
        // form params
        if ($targetStateId !== null) {
            $formParams['target_state_id'] = ObjectSerializer::toFormValue($targetStateId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdPrograms
     *
     * 添加单个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $programIds 项目ids, 英文逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Program[]
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdPrograms($enterpriseId, $issueTypeId, $programIds, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdIssueTypesIssueTypeIdProgramsWithHttpInfo($enterpriseId, $issueTypeId, $programIds, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdProgramsWithHttpInfo
     *
     * 添加单个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $programIds 项目ids, 英文逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Program[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdProgramsWithHttpInfo($enterpriseId, $issueTypeId, $programIds, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program[]';
        $request = $this->postEnterpriseIdIssueTypesIssueTypeIdProgramsRequest($enterpriseId, $issueTypeId, $programIds, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Program[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdProgramsAsync
     *
     * 添加单个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $programIds 项目ids, 英文逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdProgramsAsync($enterpriseId, $issueTypeId, $programIds, $accessToken = null)
    {
        return $this->postEnterpriseIdIssueTypesIssueTypeIdProgramsAsyncWithHttpInfo($enterpriseId, $issueTypeId, $programIds, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssueTypesIssueTypeIdProgramsAsyncWithHttpInfo
     *
     * 添加单个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $programIds 项目ids, 英文逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesIssueTypeIdProgramsAsyncWithHttpInfo($enterpriseId, $issueTypeId, $programIds, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program[]';
        $request = $this->postEnterpriseIdIssueTypesIssueTypeIdProgramsRequest($enterpriseId, $issueTypeId, $programIds, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssueTypesIssueTypeIdPrograms'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $programIds 项目ids, 英文逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssueTypesIssueTypeIdProgramsRequest($enterpriseId, $issueTypeId, $programIds, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssueTypesIssueTypeIdPrograms'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling postEnterpriseIdIssueTypesIssueTypeIdPrograms'
            );
        }
        // verify the required parameter 'programIds' is set
        if ($programIds === null || (is_array($programIds) && count($programIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programIds when calling postEnterpriseIdIssueTypesIssueTypeIdPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($programIds !== null) {
            $formParams['program_ids'] = ObjectSerializer::toFormValue($programIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssueTypesPrograms
     *
     * 添加多个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids, 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeInProgram
     */
    public function postEnterpriseIdIssueTypesPrograms($enterpriseId, $issueTypeIds, $programId, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdIssueTypesProgramsWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssueTypesProgramsWithHttpInfo
     *
     * 添加多个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids, 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeInProgram, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssueTypesProgramsWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram';
        $request = $this->postEnterpriseIdIssueTypesProgramsRequest($enterpriseId, $issueTypeIds, $programId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeInProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssueTypesProgramsAsync
     *
     * 添加多个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids, 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesProgramsAsync($enterpriseId, $issueTypeIds, $programId, $accessToken = null)
    {
        return $this->postEnterpriseIdIssueTypesProgramsAsyncWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssueTypesProgramsAsyncWithHttpInfo
     *
     * 添加多个任务类型到项目
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids, 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssueTypesProgramsAsyncWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram';
        $request = $this->postEnterpriseIdIssueTypesProgramsRequest($enterpriseId, $issueTypeIds, $programId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssueTypesPrograms'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids, 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssueTypesProgramsRequest($enterpriseId, $issueTypeIds, $programId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssueTypesPrograms'
            );
        }
        // verify the required parameter 'issueTypeIds' is set
        if ($issueTypeIds === null || (is_array($issueTypeIds) && count($issueTypeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeIds when calling postEnterpriseIdIssueTypesPrograms'
            );
        }
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling postEnterpriseIdIssueTypesPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($issueTypeIds !== null) {
            $formParams['issue_type_ids'] = ObjectSerializer::toFormValue($issueTypeIds);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeProgramSerial
     *
     * 更新项目下任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids(预期顺序), 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdIssueTypesChangeProgramSerial($enterpriseId, $issueTypeIds, $programId, $accessToken = null, $issueTypeCategory = null)
    {
        $this->putEnterpriseIdIssueTypesChangeProgramSerialWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken, $issueTypeCategory);
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeProgramSerialWithHttpInfo
     *
     * 更新项目下任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids(预期顺序), 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssueTypesChangeProgramSerialWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken = null, $issueTypeCategory = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdIssueTypesChangeProgramSerialRequest($enterpriseId, $issueTypeIds, $programId, $accessToken, $issueTypeCategory);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeProgramSerialAsync
     *
     * 更新项目下任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids(预期顺序), 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesChangeProgramSerialAsync($enterpriseId, $issueTypeIds, $programId, $accessToken = null, $issueTypeCategory = null)
    {
        return $this->putEnterpriseIdIssueTypesChangeProgramSerialAsyncWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken, $issueTypeCategory)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeProgramSerialAsyncWithHttpInfo
     *
     * 更新项目下任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids(预期顺序), 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesChangeProgramSerialAsyncWithHttpInfo($enterpriseId, $issueTypeIds, $programId, $accessToken = null, $issueTypeCategory = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdIssueTypesChangeProgramSerialRequest($enterpriseId, $issueTypeIds, $programId, $accessToken, $issueTypeCategory);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssueTypesChangeProgramSerial'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueTypeIds 任务类型ids(预期顺序), 英文逗号隔开 (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssueTypesChangeProgramSerialRequest($enterpriseId, $issueTypeIds, $programId, $accessToken = null, $issueTypeCategory = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssueTypesChangeProgramSerial'
            );
        }
        // verify the required parameter 'issueTypeIds' is set
        if ($issueTypeIds === null || (is_array($issueTypeIds) && count($issueTypeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeIds when calling putEnterpriseIdIssueTypesChangeProgramSerial'
            );
        }
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling putEnterpriseIdIssueTypesChangeProgramSerial'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/change_program_serial';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($issueTypeIds !== null) {
            $formParams['issue_type_ids'] = ObjectSerializer::toFormValue($issueTypeIds);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($issueTypeCategory !== null) {
            $formParams['issue_type_category'] = ObjectSerializer::toFormValue($issueTypeCategory);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeSerial
     *
     * 更新任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $typeIds 任务类型ids(预期顺序), 逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueType
     */
    public function putEnterpriseIdIssueTypesChangeSerial($enterpriseId, $typeIds, $accessToken = null, $issueTypeCategory = null)
    {
        list($response) = $this->putEnterpriseIdIssueTypesChangeSerialWithHttpInfo($enterpriseId, $typeIds, $accessToken, $issueTypeCategory);
        return $response;
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeSerialWithHttpInfo
     *
     * 更新任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $typeIds 任务类型ids(预期顺序), 逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueType, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssueTypesChangeSerialWithHttpInfo($enterpriseId, $typeIds, $accessToken = null, $issueTypeCategory = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType';
        $request = $this->putEnterpriseIdIssueTypesChangeSerialRequest($enterpriseId, $typeIds, $accessToken, $issueTypeCategory);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeSerialAsync
     *
     * 更新任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $typeIds 任务类型ids(预期顺序), 逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesChangeSerialAsync($enterpriseId, $typeIds, $accessToken = null, $issueTypeCategory = null)
    {
        return $this->putEnterpriseIdIssueTypesChangeSerialAsyncWithHttpInfo($enterpriseId, $typeIds, $accessToken, $issueTypeCategory)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssueTypesChangeSerialAsyncWithHttpInfo
     *
     * 更新任务类型排序
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $typeIds 任务类型ids(预期顺序), 逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesChangeSerialAsyncWithHttpInfo($enterpriseId, $typeIds, $accessToken = null, $issueTypeCategory = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType';
        $request = $this->putEnterpriseIdIssueTypesChangeSerialRequest($enterpriseId, $typeIds, $accessToken, $issueTypeCategory);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssueTypesChangeSerial'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $typeIds 任务类型ids(预期顺序), 逗号隔开 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssueTypesChangeSerialRequest($enterpriseId, $typeIds, $accessToken = null, $issueTypeCategory = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssueTypesChangeSerial'
            );
        }
        // verify the required parameter 'typeIds' is set
        if ($typeIds === null || (is_array($typeIds) && count($typeIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $typeIds when calling putEnterpriseIdIssueTypesChangeSerial'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/change_serial';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($typeIds !== null) {
            $formParams['type_ids'] = ObjectSerializer::toFormValue($typeIds);
        }
        // form params
        if ($issueTypeCategory !== null) {
            $formParams['issue_type_category'] = ObjectSerializer::toFormValue($issueTypeCategory);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeId
     *
     * 更新任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  string $title 任务类型名称 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueType
     */
    public function putEnterpriseIdIssueTypesIssueTypeId($enterpriseId, $issueTypeId, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null, $title = null)
    {
        list($response) = $this->putEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category, $title);
        return $response;
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo
     *
     * 更新任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  string $title 任务类型名称 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueType, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null, $title = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType';
        $request = $this->putEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category, $title);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdAsync
     *
     * 更新任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  string $title 任务类型名称 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdAsync($enterpriseId, $issueTypeId, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null, $title = null)
    {
        return $this->putEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category, $title)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo
     *
     * 更新任务类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  string $title 任务类型名称 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null, $title = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueType';
        $request = $this->putEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken, $stateIds, $progressingIds, $closedIds, $description, $rejectedIds, $template, $category, $title);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssueTypesIssueTypeId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $stateIds 任务状态ID(注意预期顺序排列), 逗号隔开 (optional)
     * @param  string $progressingIds 状态属性：进行中。任务状态ID, 逗号隔开 (optional)
     * @param  string $closedIds 状态属性：已完成。任务状态ID, 逗号隔开 (optional)
     * @param  string $description 任务类型描述 (optional)
     * @param  string $rejectedIds 状态属性：已拒绝。任务状态ID, 逗号隔开 (optional)
     * @param  string $template 任务类型模版 (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  string $title 任务类型名称 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssueTypesIssueTypeIdRequest($enterpriseId, $issueTypeId, $accessToken = null, $stateIds = null, $progressingIds = null, $closedIds = null, $description = null, $rejectedIds = null, $template = null, $category = null, $title = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssueTypesIssueTypeId'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling putEnterpriseIdIssueTypesIssueTypeId'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($stateIds !== null) {
            $formParams['state_ids'] = ObjectSerializer::toFormValue($stateIds);
        }
        // form params
        if ($progressingIds !== null) {
            $formParams['progressing_ids'] = ObjectSerializer::toFormValue($progressingIds);
        }
        // form params
        if ($closedIds !== null) {
            $formParams['closed_ids'] = ObjectSerializer::toFormValue($closedIds);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($rejectedIds !== null) {
            $formParams['rejected_ids'] = ObjectSerializer::toFormValue($rejectedIds);
        }
        // form params
        if ($template !== null) {
            $formParams['template'] = ObjectSerializer::toFormValue($template);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdSetDefault
     *
     * 设置为项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeInProgram
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdSetDefault($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        list($response) = $this->putEnterpriseIdIssueTypesIssueTypeIdSetDefaultWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken);
        return $response;
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdSetDefaultWithHttpInfo
     *
     * 设置为项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeInProgram, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdSetDefaultWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram';
        $request = $this->putEnterpriseIdIssueTypesIssueTypeIdSetDefaultRequest($enterpriseId, $issueTypeId, $programId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeInProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdSetDefaultAsync
     *
     * 设置为项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdSetDefaultAsync($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        return $this->putEnterpriseIdIssueTypesIssueTypeIdSetDefaultAsyncWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdSetDefaultAsyncWithHttpInfo
     *
     * 设置为项目下的默认类型
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdSetDefaultAsyncWithHttpInfo($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeInProgram';
        $request = $this->putEnterpriseIdIssueTypesIssueTypeIdSetDefaultRequest($enterpriseId, $issueTypeId, $programId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssueTypesIssueTypeIdSetDefault'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  int $programId 项目ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssueTypesIssueTypeIdSetDefaultRequest($enterpriseId, $issueTypeId, $programId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssueTypesIssueTypeIdSetDefault'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling putEnterpriseIdIssueTypesIssueTypeIdSetDefault'
            );
        }
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling putEnterpriseIdIssueTypesIssueTypeIdSetDefault'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/set_default';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdWorkflow
     *
     * 变更任务状态流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $relationsCurrentStateId 当前状态 id (optional)
     * @param  int[] $relationsNextStateId 下一个任务状态的 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdWorkflow($enterpriseId, $issueTypeId, $accessToken = null, $relationsCurrentStateId = null, $relationsNextStateId = null)
    {
        $this->putEnterpriseIdIssueTypesIssueTypeIdWorkflowWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $relationsCurrentStateId, $relationsNextStateId);
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdWorkflowWithHttpInfo
     *
     * 变更任务状态流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $relationsCurrentStateId 当前状态 id (optional)
     * @param  int[] $relationsNextStateId 下一个任务状态的 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdWorkflowWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $relationsCurrentStateId = null, $relationsNextStateId = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdIssueTypesIssueTypeIdWorkflowRequest($enterpriseId, $issueTypeId, $accessToken, $relationsCurrentStateId, $relationsNextStateId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdWorkflowAsync
     *
     * 变更任务状态流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $relationsCurrentStateId 当前状态 id (optional)
     * @param  int[] $relationsNextStateId 下一个任务状态的 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdWorkflowAsync($enterpriseId, $issueTypeId, $accessToken = null, $relationsCurrentStateId = null, $relationsNextStateId = null)
    {
        return $this->putEnterpriseIdIssueTypesIssueTypeIdWorkflowAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken, $relationsCurrentStateId, $relationsNextStateId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssueTypesIssueTypeIdWorkflowAsyncWithHttpInfo
     *
     * 变更任务状态流转关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $relationsCurrentStateId 当前状态 id (optional)
     * @param  int[] $relationsNextStateId 下一个任务状态的 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssueTypesIssueTypeIdWorkflowAsyncWithHttpInfo($enterpriseId, $issueTypeId, $accessToken = null, $relationsCurrentStateId = null, $relationsNextStateId = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdIssueTypesIssueTypeIdWorkflowRequest($enterpriseId, $issueTypeId, $accessToken, $relationsCurrentStateId, $relationsNextStateId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssueTypesIssueTypeIdWorkflow'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $issueTypeId 任务类型 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $relationsCurrentStateId 当前状态 id (optional)
     * @param  int[] $relationsNextStateId 下一个任务状态的 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssueTypesIssueTypeIdWorkflowRequest($enterpriseId, $issueTypeId, $accessToken = null, $relationsCurrentStateId = null, $relationsNextStateId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssueTypesIssueTypeIdWorkflow'
            );
        }
        // verify the required parameter 'issueTypeId' is set
        if ($issueTypeId === null || (is_array($issueTypeId) && count($issueTypeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueTypeId when calling putEnterpriseIdIssueTypesIssueTypeIdWorkflow'
            );
        }

        $resourcePath = '/{enterprise_id}/issue_types/{issue_type_id}/workflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueTypeId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_type_id' . '}',
                ObjectSerializer::toPathValue($issueTypeId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($relationsCurrentStateId !== null) {
            $formParams['relations[current_state_id]'] = ObjectSerializer::toFormValue($relationsCurrentStateId);
        }
        // form params
        if ($relationsNextStateId !== null) {
            $formParams['relations[next_state_id]'] = ObjectSerializer::toFormValue($relationsNextStateId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
