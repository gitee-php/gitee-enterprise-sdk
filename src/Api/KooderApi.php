<?php
/**
 * KooderApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.333
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * KooderApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KooderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEnterpriseIdKooderCode
     *
     * code 查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库文件名称、仓库文件内容， location：仓库文件名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdKooderCode($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectId = null, $visibility = null, $scope = null, $scene = null)
    {
        $this->getEnterpriseIdKooderCodeWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectId, $visibility, $scope, $scene);
    }

    /**
     * Operation getEnterpriseIdKooderCodeWithHttpInfo
     *
     * code 查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库文件名称、仓库文件内容， location：仓库文件名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdKooderCodeWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectId = null, $visibility = null, $scope = null, $scene = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdKooderCodeRequest($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectId, $visibility, $scope, $scene);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdKooderCodeAsync
     *
     * code 查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库文件名称、仓库文件内容， location：仓库文件名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderCodeAsync($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectId = null, $visibility = null, $scope = null, $scene = null)
    {
        return $this->getEnterpriseIdKooderCodeAsyncWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectId, $visibility, $scope, $scene)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdKooderCodeAsyncWithHttpInfo
     *
     * code 查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库文件名称、仓库文件内容， location：仓库文件名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderCodeAsyncWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectId = null, $visibility = null, $scope = null, $scene = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdKooderCodeRequest($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectId, $visibility, $scope, $scene);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdKooderCode'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库文件名称、仓库文件内容， location：仓库文件名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdKooderCodeRequest($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectId = null, $visibility = null, $scope = null, $scene = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdKooderCode'
            );
        }
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling getEnterpriseIdKooderCode'
            );
        }

        $resourcePath = '/{enterprise_id}/kooder/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($visibility !== null) {
            $queryParams['visibility'] = ObjectSerializer::toQueryValue($visibility);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($scene !== null) {
            $queryParams['scene'] = ObjectSerializer::toQueryValue($scene);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdKooderDocs
     *
     * 知识库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdKooderDocs($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $programId = null, $scene = null)
    {
        $this->getEnterpriseIdKooderDocsWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $programId, $scene);
    }

    /**
     * Operation getEnterpriseIdKooderDocsWithHttpInfo
     *
     * 知识库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdKooderDocsWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $programId = null, $scene = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdKooderDocsRequest($enterpriseId, $search, $accessToken, $page, $perPage, $programId, $scene);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdKooderDocsAsync
     *
     * 知识库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderDocsAsync($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $programId = null, $scene = null)
    {
        return $this->getEnterpriseIdKooderDocsAsyncWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $programId, $scene)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdKooderDocsAsyncWithHttpInfo
     *
     * 知识库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderDocsAsyncWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $programId = null, $scene = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdKooderDocsRequest($enterpriseId, $search, $accessToken, $page, $perPage, $programId, $scene);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdKooderDocs'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdKooderDocsRequest($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $programId = null, $scene = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdKooderDocs'
            );
        }
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling getEnterpriseIdKooderDocs'
            );
        }

        $resourcePath = '/{enterprise_id}/kooder/docs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($scene !== null) {
            $queryParams['scene'] = ObjectSerializer::toQueryValue($scene);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdKooderIssue
     *
     * issue查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $issueTypeIds 任务类型id，用英文逗号分隔 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，任务标题、任务描述， title：任务标题 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue
     */
    public function getEnterpriseIdKooderIssue($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $issueTypeIds = null, $projectId = null, $programId = null, $scope = null, $scene = null)
    {
        list($response) = $this->getEnterpriseIdKooderIssueWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $issueTypeIds, $projectId, $programId, $scope, $scene);
        return $response;
    }

    /**
     * Operation getEnterpriseIdKooderIssueWithHttpInfo
     *
     * issue查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $issueTypeIds 任务类型id，用英文逗号分隔 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，任务标题、任务描述， title：任务标题 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdKooderIssueWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $issueTypeIds = null, $projectId = null, $programId = null, $scope = null, $scene = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->getEnterpriseIdKooderIssueRequest($enterpriseId, $search, $accessToken, $page, $perPage, $issueTypeIds, $projectId, $programId, $scope, $scene);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdKooderIssueAsync
     *
     * issue查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $issueTypeIds 任务类型id，用英文逗号分隔 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，任务标题、任务描述， title：任务标题 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderIssueAsync($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $issueTypeIds = null, $projectId = null, $programId = null, $scope = null, $scene = null)
    {
        return $this->getEnterpriseIdKooderIssueAsyncWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $issueTypeIds, $projectId, $programId, $scope, $scene)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdKooderIssueAsyncWithHttpInfo
     *
     * issue查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $issueTypeIds 任务类型id，用英文逗号分隔 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，任务标题、任务描述， title：任务标题 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderIssueAsyncWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $issueTypeIds = null, $projectId = null, $programId = null, $scope = null, $scene = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->getEnterpriseIdKooderIssueRequest($enterpriseId, $search, $accessToken, $page, $perPage, $issueTypeIds, $projectId, $programId, $scope, $scene);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdKooderIssue'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $issueTypeIds 任务类型id，用英文逗号分隔 (optional)
     * @param  string $projectId 仓库id，用英文逗号分隔 (optional)
     * @param  string $programId 项目id，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，任务标题、任务描述， title：任务标题 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdKooderIssueRequest($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $issueTypeIds = null, $projectId = null, $programId = null, $scope = null, $scene = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdKooderIssue'
            );
        }
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling getEnterpriseIdKooderIssue'
            );
        }

        $resourcePath = '/{enterprise_id}/kooder/issue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($issueTypeIds !== null) {
            $queryParams['issue_type_ids'] = ObjectSerializer::toQueryValue($issueTypeIds);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($scene !== null) {
            $queryParams['scene'] = ObjectSerializer::toQueryValue($scene);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdKooderProject
     *
     * 仓库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectIds 仓库id，用英文逗号分隔 (optional)
     * @param  string $namespaceIds 仓库命名空间id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库名、仓库描述， human_name：仓库名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Project
     */
    public function getEnterpriseIdKooderProject($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectIds = null, $namespaceIds = null, $visibility = null, $scope = null, $scene = null)
    {
        list($response) = $this->getEnterpriseIdKooderProjectWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectIds, $namespaceIds, $visibility, $scope, $scene);
        return $response;
    }

    /**
     * Operation getEnterpriseIdKooderProjectWithHttpInfo
     *
     * 仓库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectIds 仓库id，用英文逗号分隔 (optional)
     * @param  string $namespaceIds 仓库命名空间id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库名、仓库描述， human_name：仓库名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdKooderProjectWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectIds = null, $namespaceIds = null, $visibility = null, $scope = null, $scene = null)
    {
        $returnType = '\GiteeEnterprise\Model\Project';
        $request = $this->getEnterpriseIdKooderProjectRequest($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectIds, $namespaceIds, $visibility, $scope, $scene);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdKooderProjectAsync
     *
     * 仓库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectIds 仓库id，用英文逗号分隔 (optional)
     * @param  string $namespaceIds 仓库命名空间id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库名、仓库描述， human_name：仓库名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderProjectAsync($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectIds = null, $namespaceIds = null, $visibility = null, $scope = null, $scene = null)
    {
        return $this->getEnterpriseIdKooderProjectAsyncWithHttpInfo($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectIds, $namespaceIds, $visibility, $scope, $scene)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdKooderProjectAsyncWithHttpInfo
     *
     * 仓库查询
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectIds 仓库id，用英文逗号分隔 (optional)
     * @param  string $namespaceIds 仓库命名空间id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库名、仓库描述， human_name：仓库名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdKooderProjectAsyncWithHttpInfo($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectIds = null, $namespaceIds = null, $visibility = null, $scope = null, $scene = null)
    {
        $returnType = '\GiteeEnterprise\Model\Project';
        $request = $this->getEnterpriseIdKooderProjectRequest($enterpriseId, $search, $accessToken, $page, $perPage, $language, $projectIds, $namespaceIds, $visibility, $scope, $scene);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdKooderProject'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $search 搜索内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $language 仓库语言 (optional)
     * @param  string $projectIds 仓库id，用英文逗号分隔 (optional)
     * @param  string $namespaceIds 仓库命名空间id，用英文逗号分隔 (optional)
     * @param  string $visibility 仓库开源属性，公开：0，私有：1，内源：2，可多选，用英文逗号分隔 (optional)
     * @param  string $scope 检索范围，null：默认，仓库名、仓库描述， human_name：仓库名称 (optional)
     * @param  int $scene 触发场景，用户做分析统计 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdKooderProjectRequest($enterpriseId, $search, $accessToken = null, $page = '1', $perPage = null, $language = null, $projectIds = null, $namespaceIds = null, $visibility = null, $scope = null, $scene = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdKooderProject'
            );
        }
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling getEnterpriseIdKooderProject'
            );
        }

        $resourcePath = '/{enterprise_id}/kooder/project';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($projectIds !== null) {
            $queryParams['project_ids'] = ObjectSerializer::toQueryValue($projectIds);
        }
        // query params
        if ($namespaceIds !== null) {
            $queryParams['namespace_ids'] = ObjectSerializer::toQueryValue($namespaceIds);
        }
        // query params
        if ($visibility !== null) {
            $queryParams['visibility'] = ObjectSerializer::toQueryValue($visibility);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($scene !== null) {
            $queryParams['scene'] = ObjectSerializer::toQueryValue($scene);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
