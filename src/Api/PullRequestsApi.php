<?php
/**
 * PullRequestsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.335
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * PullRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId
     *
     * PR 取消 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt);
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdWithHttpInfo
     *
     * PR 取消 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdRequest($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdAsync
     *
     * PR 取消 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdAsync($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        return $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdAsyncWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdAsyncWithHttpInfo
     *
     * PR 取消 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdAsyncWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdRequest($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueIdRequest($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId'
            );
        }
        // verify the required parameter 'linkIssueId' is set
        if ($linkIssueId === null || (is_array($linkIssueId) && count($linkIssueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linkIssueId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesLinkIssueId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/link_issues/{link_issue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($linkIssueId !== null) {
            $resourcePath = str_replace(
                '{' . 'link_issue_id' . '}',
                ObjectSerializer::toPathValue($linkIssueId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId
     *
     * 取消PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $currentUserReactionId 表态id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueReaction
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken = null, $qt = null)
    {
        list($response) = $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdWithHttpInfo
     *
     * 取消PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $currentUserReactionId 表态id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueReaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueReaction';
        $request = $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdRequest($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueReaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdAsync
     *
     * 取消PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $currentUserReactionId 表态id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdAsync($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken = null, $qt = null)
    {
        return $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdAsyncWithHttpInfo
     *
     * 取消PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $currentUserReactionId 表态id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueReaction';
        $request = $this->deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdRequest($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $currentUserReactionId 表态id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionIdRequest($enterpriseId, $projectId, $pullRequestId, $currentUserReactionId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId'
            );
        }
        // verify the required parameter 'currentUserReactionId' is set
        if ($currentUserReactionId === null || (is_array($currentUserReactionId) && count($currentUserReactionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currentUserReactionId when calling deleteEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsCurrentUserReactionId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/reactions/{current_user_reaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }
        // path params
        if ($currentUserReactionId !== null) {
            $resourcePath = str_replace(
                '{' . 'current_user_reaction_id' . '}',
                ObjectSerializer::toPathValue($currentUserReactionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewCommits
     *
     * 获取分支对比的 Commit 列表信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitList[]
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewCommits($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $page, $perPage, $prevId);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsWithHttpInfo
     *
     * 获取分支对比的 Commit 列表信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsRequest($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $page, $perPage, $prevId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsAsync
     *
     * 获取分支对比的 Commit 列表信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsAsync($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsAsyncWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $page, $perPage, $prevId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsAsyncWithHttpInfo
     *
     * 获取分支对比的 Commit 列表信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsAsyncWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsRequest($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $page, $perPage, $prevId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsNewCommitsRequest($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
            );
        }
        // verify the required parameter 'sourceNamespace' is set
        if ($sourceNamespace === null || (is_array($sourceNamespace) && count($sourceNamespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceNamespace when calling getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
            );
        }
        // verify the required parameter 'sourceBranch' is set
        if ($sourceBranch === null || (is_array($sourceBranch) && count($sourceBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceBranch when calling getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
            );
        }
        // verify the required parameter 'targetNamespace' is set
        if ($targetNamespace === null || (is_array($targetNamespace) && count($targetNamespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetNamespace when calling getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
            );
        }
        // verify the required parameter 'targetBranch' is set
        if ($targetBranch === null || (is_array($targetBranch) && count($targetBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetBranch when calling getEnterpriseIdProjectsProjectIdPullRequestsNewCommits'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/new/commits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($sourceNamespace !== null) {
            $queryParams['source_namespace'] = ObjectSerializer::toQueryValue($sourceNamespace);
        }
        // query params
        if ($sourceBranch !== null) {
            $queryParams['source_branch'] = ObjectSerializer::toQueryValue($sourceBranch);
        }
        // query params
        if ($targetNamespace !== null) {
            $queryParams['target_namespace'] = ObjectSerializer::toQueryValue($targetNamespace);
        }
        // query params
        if ($targetBranch !== null) {
            $queryParams['target_branch'] = ObjectSerializer::toQueryValue($targetBranch);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($prevId !== null) {
            $queryParams['prev_id'] = ObjectSerializer::toQueryValue($prevId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewFiles
     *
     * 获取分支对比的文件改动列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitList[]
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewFiles($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $w = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsNewFilesWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $w, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewFilesWithHttpInfo
     *
     * 获取分支对比的文件改动列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewFilesWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $w = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsNewFilesRequest($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $w, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewFilesAsync
     *
     * 获取分支对比的文件改动列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewFilesAsync($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $w = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsNewFilesAsyncWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $w, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsNewFilesAsyncWithHttpInfo
     *
     * 获取分支对比的文件改动列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsNewFilesAsyncWithHttpInfo($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $w = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsNewFilesRequest($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken, $qt, $w, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceNamespace 源仓库所属空间地址 (required)
     * @param  string $sourceBranch 源仓库的分支名称 (required)
     * @param  string $targetNamespace 目标仓库所属空间地址 (required)
     * @param  string $targetBranch 目标仓库的分支名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsNewFilesRequest($enterpriseId, $projectId, $sourceNamespace, $sourceBranch, $targetNamespace, $targetBranch, $accessToken = null, $qt = null, $w = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
            );
        }
        // verify the required parameter 'sourceNamespace' is set
        if ($sourceNamespace === null || (is_array($sourceNamespace) && count($sourceNamespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceNamespace when calling getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
            );
        }
        // verify the required parameter 'sourceBranch' is set
        if ($sourceBranch === null || (is_array($sourceBranch) && count($sourceBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceBranch when calling getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
            );
        }
        // verify the required parameter 'targetNamespace' is set
        if ($targetNamespace === null || (is_array($targetNamespace) && count($targetNamespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetNamespace when calling getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
            );
        }
        // verify the required parameter 'targetBranch' is set
        if ($targetBranch === null || (is_array($targetBranch) && count($targetBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetBranch when calling getEnterpriseIdProjectsProjectIdPullRequestsNewFiles'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/new/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($sourceNamespace !== null) {
            $queryParams['source_namespace'] = ObjectSerializer::toQueryValue($sourceNamespace);
        }
        // query params
        if ($sourceBranch !== null) {
            $queryParams['source_branch'] = ObjectSerializer::toQueryValue($sourceBranch);
        }
        // query params
        if ($targetNamespace !== null) {
            $queryParams['target_namespace'] = ObjectSerializer::toQueryValue($targetNamespace);
        }
        // query params
        if ($targetBranch !== null) {
            $queryParams['target_branch'] = ObjectSerializer::toQueryValue($targetBranch);
        }
        // query params
        if ($w !== null) {
            $queryParams['w'] = ObjectSerializer::toQueryValue($w);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestId
     *
     * 获取 Pull Request 详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestDetail
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestId($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdWithHttpInfo
     *
     * 获取 Pull Request 详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestDetail';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsync
     *
     * 获取 Pull Request 详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsyncWithHttpInfo
     *
     * 获取 Pull Request 详情
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestDetail';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuths
     *
     * 获取授权用户对 PR 的权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestAuth
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuths($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsWithHttpInfo
     *
     * 获取授权用户对 PR 的权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestAuth, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestAuth';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestAuth',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsAsync
     *
     * 获取授权用户对 PR 的权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsAsyncWithHttpInfo
     *
     * 获取授权用户对 PR 的权限
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestAuth';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuths'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuthsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuths'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuths'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAuths'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/auths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommits
     *
     * 获取某Pull Request的所有Commit信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CommitList[]
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommits($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $prevId);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsWithHttpInfo
     *
     * 获取某Pull Request的所有Commit信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CommitList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $prevId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CommitList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsAsync
     *
     * 获取某Pull Request的所有Commit信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $prevId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsAsyncWithHttpInfo
     *
     * 获取某Pull Request的所有Commit信息
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        $returnType = '\GiteeEnterprise\Model\CommitList[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $prevId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommits'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码(已弃用) (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100(已弃用) (optional)
     * @param  string $prevId 滚动列表的最后一条记录的id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $prevId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommits'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommits'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommits'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/commits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($prevId !== null) {
            $queryParams['prev_id'] = ObjectSerializer::toQueryValue($prevId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles
     *
     * 获取 Commit 下的 diffs
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $commitId Commit id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestFiles[]
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken, $qt, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesWithHttpInfo
     *
     * 获取 Commit 下的 diffs
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $commitId Commit id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestFiles[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestFiles[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesRequest($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken, $qt, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestFiles[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesAsync
     *
     * 获取 Commit 下的 diffs
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $commitId Commit id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesAsync($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken, $qt, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesAsyncWithHttpInfo
     *
     * 获取 Commit 下的 diffs
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $commitId Commit id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestFiles[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesRequest($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken, $qt, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $commitId Commit id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFilesRequest($enterpriseId, $projectId, $pullRequestId, $commitId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCommitsCommitIdFiles'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/commits/{commit_id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }
        // path params
        if ($commitId !== null) {
            $resourcePath = str_replace(
                '{' . 'commit_id' . '}',
                ObjectSerializer::toPathValue($commitId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath
     *
     * 获取 PullRequest 中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt);
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathWithHttpInfo
     *
     * 获取 PullRequest 中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathRequest($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathAsync
     *
     * 获取 PullRequest 中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathAsync($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathAsyncWithHttpInfo
     *
     * 获取 PullRequest 中差异较大的文件内容
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathRequest($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $fileIdentifier git 文件标识符 (required)
     * @param  string $newPath 旧路径 (required)
     * @param  string $oldPath 新路径 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPathRequest($enterpriseId, $projectId, $pullRequestId, $fileIdentifier, $newPath, $oldPath, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
            );
        }
        // verify the required parameter 'fileIdentifier' is set
        if ($fileIdentifier === null || (is_array($fileIdentifier) && count($fileIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileIdentifier when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
            );
        }
        // verify the required parameter 'newPath' is set
        if ($newPath === null || (is_array($newPath) && count($newPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newPath when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
            );
        }
        // verify the required parameter 'oldPath' is set
        if ($oldPath === null || (is_array($oldPath) && count($oldPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldPath when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffForPath'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/diff_for_path';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($fileIdentifier !== null) {
            $queryParams['file_identifier'] = ObjectSerializer::toQueryValue($fileIdentifier);
        }
        // query params
        if ($newPath !== null) {
            $queryParams['new_path'] = ObjectSerializer::toQueryValue($newPath);
        }
        // query params
        if ($oldPath !== null) {
            $queryParams['old_path'] = ObjectSerializer::toQueryValue($oldPath);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext
     *
     * 获取 Pull Request 评论引用的代码片段
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ids diff_position_id，使用英文逗号分隔 (required)
     * @param  int $pullRequestId pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DiffPosition[]
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextWithHttpInfo($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextWithHttpInfo
     *
     * 获取 Pull Request 评论引用的代码片段
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ids diff_position_id，使用英文逗号分隔 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DiffPosition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextWithHttpInfo($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\DiffPosition[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextRequest($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DiffPosition[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextAsync
     *
     * 获取 Pull Request 评论引用的代码片段
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ids diff_position_id，使用英文逗号分隔 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextAsync($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextAsyncWithHttpInfo($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextAsyncWithHttpInfo
     *
     * 获取 Pull Request 评论引用的代码片段
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ids diff_position_id，使用英文逗号分隔 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextAsyncWithHttpInfo($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\DiffPosition[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextRequest($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $ids diff_position_id，使用英文逗号分隔 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContextRequest($enterpriseId, $projectId, $ids, $pullRequestId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext'
            );
        }
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDiffPositionContext'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/diff_position_context';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFiles
     *
     * Pull Request Commit 文件列表。最多显示200条diff
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     * @param  bool $disablePaginate 是否禁用分页 (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestFiles[]
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFiles($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $headSha = null, $baseSha = null, $disablePaginate = null, $w = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $headSha, $baseSha, $disablePaginate, $w);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesWithHttpInfo
     *
     * Pull Request Commit 文件列表。最多显示200条diff
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     * @param  bool $disablePaginate 是否禁用分页 (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestFiles[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $headSha = null, $baseSha = null, $disablePaginate = null, $w = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestFiles[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $headSha, $baseSha, $disablePaginate, $w);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestFiles[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesAsync
     *
     * Pull Request Commit 文件列表。最多显示200条diff
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     * @param  bool $disablePaginate 是否禁用分页 (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $headSha = null, $baseSha = null, $disablePaginate = null, $w = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $headSha, $baseSha, $disablePaginate, $w)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesAsyncWithHttpInfo
     *
     * Pull Request Commit 文件列表。最多显示200条diff
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     * @param  bool $disablePaginate 是否禁用分页 (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $headSha = null, $baseSha = null, $disablePaginate = null, $w = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestFiles[]';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage, $headSha, $baseSha, $disablePaginate, $w);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFiles'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     * @param  bool $disablePaginate 是否禁用分页 (optional)
     * @param  int $w 是否隐藏空白和换行, 1：隐藏，0：不隐藏，默认不隐藏 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFilesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null, $headSha = null, $baseSha = null, $disablePaginate = null, $w = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFiles'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFiles'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdFiles'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($headSha !== null) {
            $queryParams['head_sha'] = ObjectSerializer::toQueryValue($headSha);
        }
        // query params
        if ($baseSha !== null) {
            $queryParams['base_sha'] = ObjectSerializer::toQueryValue($baseSha);
        }
        // query params
        if ($disablePaginate !== null) {
            $queryParams['disable_paginate'] = ObjectSerializer::toQueryValue($disablePaginate);
        }
        // query params
        if ($w !== null) {
            $queryParams['w'] = ObjectSerializer::toQueryValue($w);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues
     *
     * PR 关联任务任务列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesWithHttpInfo
     *
     * PR 关联任务任务列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsync
     *
     * PR 关联任务任务列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsyncWithHttpInfo
     *
     * PR 关联任务任务列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/link_issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes
     *
     * 获取 Pull Request 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitId commit sha (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestNote
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitId, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesWithHttpInfo
     *
     * 获取 Pull Request 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitId commit sha (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNote';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsync
     *
     * 获取 Pull Request 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitId commit sha (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitId = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsyncWithHttpInfo
     *
     * 获取 Pull Request 评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitId commit sha (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNote';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitId commit sha (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($commitId !== null) {
            $queryParams['commit_id'] = ObjectSerializer::toQueryValue($commitId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroup
     *
     * 获取 Pull Request或相关提交的已解决未解决评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitIds commit sha提交列表，多个用[,]连接 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestNote
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroup($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitIds = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitIds, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupWithHttpInfo
     *
     * 获取 Pull Request或相关提交的已解决未解决评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitIds commit sha提交列表，多个用[,]连接 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitIds = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNote';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitIds, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupAsync
     *
     * 获取 Pull Request或相关提交的已解决未解决评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitIds commit sha提交列表，多个用[,]连接 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitIds = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitIds, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupAsyncWithHttpInfo
     *
     * 获取 Pull Request或相关提交的已解决未解决评论列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitIds commit sha提交列表，多个用[,]连接 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitIds = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNote';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $commitIds, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroup'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $commitIds commit sha提交列表，多个用[,]连接 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroupRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $commitIds = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroup'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroup'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesGroup'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/notes/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($commitIds !== null) {
            $queryParams['commit_ids'] = ObjectSerializer::toQueryValue($commitIds);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTrees
     *
     * 获取 Pull Request或相关提交的评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestNoteTree
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTrees($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $headSha = null, $baseSha = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $headSha, $baseSha);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesWithHttpInfo
     *
     * 获取 Pull Request或相关提交的评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestNoteTree, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $headSha = null, $baseSha = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNoteTree';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $headSha, $baseSha);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestNoteTree',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesAsync
     *
     * 获取 Pull Request或相关提交的评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $headSha = null, $baseSha = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $headSha, $baseSha)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesAsyncWithHttpInfo
     *
     * 获取 Pull Request或相关提交的评论列表树
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $headSha = null, $baseSha = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNoteTree';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $headSha, $baseSha);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTrees'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $headSha head sha (optional)
     * @param  string $baseSha base sha (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTreesRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $headSha = null, $baseSha = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTrees'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTrees'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesTrees'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/notes/trees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($headSha !== null) {
            $queryParams['head_sha'] = ObjectSerializer::toQueryValue($headSha);
        }
        // query params
        if ($baseSha !== null) {
            $queryParams['base_sha'] = ObjectSerializer::toQueryValue($baseSha);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogs
     *
     * 获取 Pull Request 操作日志
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PrOperateLog
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogs($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsWithHttpInfo
     *
     * 获取 Pull Request 操作日志
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PrOperateLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PrOperateLog';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PrOperateLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsAsync
     *
     * 获取 Pull Request 操作日志
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsAsyncWithHttpInfo
     *
     * 获取 Pull Request 操作日志
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PrOperateLog';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogs'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogsRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogs'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogs'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdOperateLogs'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/operate_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports
     *
     * 获取 PullRequest 的 GiteeScan 报告
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $taskId GiteeScan 扫描任务 id (required)
     * @param  string $type 扫描类型，bug：缺陷扫描、style：规范扫描、cve：依赖项漏洞扫描 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $bugLevel 缺陷等级，高危：1、中危：2 (optional)
     * @param  string $bugType 缺陷类型，BUG：0、CodeSmell：1、Security：2 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken = null, $qt = null, $bugLevel = null, $bugType = null, $page = '1', $perPage = null)
    {
        $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken, $qt, $bugLevel, $bugType, $page, $perPage);
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsWithHttpInfo
     *
     * 获取 PullRequest 的 GiteeScan 报告
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $taskId GiteeScan 扫描任务 id (required)
     * @param  string $type 扫描类型，bug：缺陷扫描、style：规范扫描、cve：依赖项漏洞扫描 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $bugLevel 缺陷等级，高危：1、中危：2 (optional)
     * @param  string $bugType 缺陷类型，BUG：0、CodeSmell：1、Security：2 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken = null, $qt = null, $bugLevel = null, $bugType = null, $page = '1', $perPage = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsRequest($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken, $qt, $bugLevel, $bugType, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsAsync
     *
     * 获取 PullRequest 的 GiteeScan 报告
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $taskId GiteeScan 扫描任务 id (required)
     * @param  string $type 扫描类型，bug：缺陷扫描、style：规范扫描、cve：依赖项漏洞扫描 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $bugLevel 缺陷等级，高危：1、中危：2 (optional)
     * @param  string $bugType 缺陷类型，BUG：0、CodeSmell：1、Security：2 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsAsync($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken = null, $qt = null, $bugLevel = null, $bugType = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken, $qt, $bugLevel, $bugType, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsAsyncWithHttpInfo
     *
     * 获取 PullRequest 的 GiteeScan 报告
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $taskId GiteeScan 扫描任务 id (required)
     * @param  string $type 扫描类型，bug：缺陷扫描、style：规范扫描、cve：依赖项漏洞扫描 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $bugLevel 缺陷等级，高危：1、中危：2 (optional)
     * @param  string $bugType 缺陷类型，BUG：0、CodeSmell：1、Security：2 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken = null, $qt = null, $bugLevel = null, $bugType = null, $page = '1', $perPage = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsRequest($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken, $qt, $bugLevel, $bugType, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  int $taskId GiteeScan 扫描任务 id (required)
     * @param  string $type 扫描类型，bug：缺陷扫描、style：规范扫描、cve：依赖项漏洞扫描 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $bugLevel 缺陷等级，高危：1、中危：2 (optional)
     * @param  string $bugType 缺陷类型，BUG：0、CodeSmell：1、Security：2 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReportsRequest($enterpriseId, $projectId, $pullRequestId, $taskId, $type, $accessToken = null, $qt = null, $bugLevel = null, $bugType = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports'
            );
        }
        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taskId when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdScanReports'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/scan_reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($taskId !== null) {
            $queryParams['task_id'] = ObjectSerializer::toQueryValue($taskId);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($bugLevel !== null) {
            $queryParams['bug_level'] = ObjectSerializer::toQueryValue($bugLevel);
        }
        // query params
        if ($bugType !== null) {
            $queryParams['bug_type'] = ObjectSerializer::toQueryValue($bugType);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdPullRequests
     *
     * 获取企业下的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $publicOrInternalOpenOnly 仅列出内部公开和外部公开的 PR (optional)
     * @param  string $targetBranch 目标分支名 (optional)
     * @param  string $sourceBranch 源分支名 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequest[]
     */
    public function getEnterpriseIdPullRequests($enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $publicOrInternalOpenOnly = null, $targetBranch = null, $sourceBranch = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdPullRequestsWithHttpInfo($enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $publicOrInternalOpenOnly, $targetBranch, $sourceBranch, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdPullRequestsWithHttpInfo
     *
     * 获取企业下的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $publicOrInternalOpenOnly 仅列出内部公开和外部公开的 PR (optional)
     * @param  string $targetBranch 目标分支名 (optional)
     * @param  string $sourceBranch 源分支名 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdPullRequestsWithHttpInfo($enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $publicOrInternalOpenOnly = null, $targetBranch = null, $sourceBranch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequest[]';
        $request = $this->getEnterpriseIdPullRequestsRequest($enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $publicOrInternalOpenOnly, $targetBranch, $sourceBranch, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequest[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdPullRequestsAsync
     *
     * 获取企业下的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $publicOrInternalOpenOnly 仅列出内部公开和外部公开的 PR (optional)
     * @param  string $targetBranch 目标分支名 (optional)
     * @param  string $sourceBranch 源分支名 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdPullRequestsAsync($enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $publicOrInternalOpenOnly = null, $targetBranch = null, $sourceBranch = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdPullRequestsAsyncWithHttpInfo($enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $publicOrInternalOpenOnly, $targetBranch, $sourceBranch, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdPullRequestsAsyncWithHttpInfo
     *
     * 获取企业下的 Pull Request 列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $publicOrInternalOpenOnly 仅列出内部公开和外部公开的 PR (optional)
     * @param  string $targetBranch 目标分支名 (optional)
     * @param  string $sourceBranch 源分支名 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdPullRequestsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $publicOrInternalOpenOnly = null, $targetBranch = null, $sourceBranch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequest[]';
        $request = $this->getEnterpriseIdPullRequestsRequest($enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $publicOrInternalOpenOnly, $targetBranch, $sourceBranch, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdPullRequests'
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $publicOrInternalOpenOnly 仅列出内部公开和外部公开的 PR (optional)
     * @param  string $targetBranch 目标分支名 (optional)
     * @param  string $sourceBranch 源分支名 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdPullRequestsRequest($enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $publicOrInternalOpenOnly = null, $targetBranch = null, $sourceBranch = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdPullRequests'
            );
        }

        $resourcePath = '/{enterprise_id}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($authorId !== null) {
            $queryParams['author_id'] = ObjectSerializer::toQueryValue($authorId);
        }
        // query params
        if ($assigneeId !== null) {
            $queryParams['assignee_id'] = ObjectSerializer::toQueryValue($assigneeId);
        }
        // query params
        if ($testerId !== null) {
            $queryParams['tester_id'] = ObjectSerializer::toQueryValue($testerId);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($groupId !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($groupId);
        }
        // query params
        if ($milestoneId !== null) {
            $queryParams['milestone_id'] = ObjectSerializer::toQueryValue($milestoneId);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($labelIds !== null) {
            $queryParams['label_ids'] = ObjectSerializer::toQueryValue($labelIds);
        }
        // query params
        if ($canBeMerged !== null) {
            $queryParams['can_be_merged'] = ObjectSerializer::toQueryValue($canBeMerged);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($needStateCount !== null) {
            $queryParams['need_state_count'] = ObjectSerializer::toQueryValue($needStateCount);
        }
        // query params
        if ($publicOrInternalOpenOnly !== null) {
            $queryParams['public_or_internal_open_only'] = ObjectSerializer::toQueryValue($publicOrInternalOpenOnly);
        }
        // query params
        if ($targetBranch !== null) {
            $queryParams['target_branch'] = ObjectSerializer::toQueryValue($targetBranch);
        }
        // query params
        if ($sourceBranch !== null) {
            $queryParams['source_branch'] = ObjectSerializer::toQueryValue($sourceBranch);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdPullRequestsPullRequestStats
     *
     * 获取企业下用户 Pull Request 相关数量数据
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdPullRequestsPullRequestStats($enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdPullRequestsPullRequestStatsWithHttpInfo($enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdPullRequestsPullRequestStatsWithHttpInfo
     *
     * 获取企业下用户 Pull Request 相关数量数据
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdPullRequestsPullRequestStatsWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdPullRequestsPullRequestStatsRequest($enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdPullRequestsPullRequestStatsAsync
     *
     * 获取企业下用户 Pull Request 相关数量数据
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdPullRequestsPullRequestStatsAsync($enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdPullRequestsPullRequestStatsAsyncWithHttpInfo($enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdPullRequestsPullRequestStatsAsyncWithHttpInfo
     *
     * 获取企业下用户 Pull Request 相关数量数据
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdPullRequestsPullRequestStatsAsyncWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdPullRequestsPullRequestStatsRequest($enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdPullRequestsPullRequestStats'
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdPullRequestsPullRequestStatsRequest($enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdPullRequestsPullRequestStats'
            );
        }

        $resourcePath = '/{enterprise_id}/pull_requests/pull_request_stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequests
     *
     * 创建 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceRepo 源仓库 id (required)
     * @param  string $sourceBranch 源分支名称 (required)
     * @param  string $targetBranch 目标分支名称 (required)
     * @param  string $title 标题 (required)
     * @param  string $body 内容 (required)
     * @param  string $assigneeId 审查者。可多选，英文逗号分隔 (required)
     * @param  string $prAssignNum 审查人员数量 (required)
     * @param  string $testerId 测试人员。可多选，英文逗号分隔 (required)
     * @param  string $prTestNum 测试人员数量 (required)
     * @param  string $milestoneId 关联的里程碑 (required)
     * @param  string $priority 优先级 0~4 (required)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (required)
     * @param  string $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestDetail[]
     */
    public function postEnterpriseIdProjectsProjectIdPullRequests($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken = null, $qt = null, $draft = null, $squash = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdPullRequestsWithHttpInfo($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken, $qt, $draft, $squash);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsWithHttpInfo
     *
     * 创建 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceRepo 源仓库 id (required)
     * @param  string $sourceBranch 源分支名称 (required)
     * @param  string $targetBranch 目标分支名称 (required)
     * @param  string $title 标题 (required)
     * @param  string $body 内容 (required)
     * @param  string $assigneeId 审查者。可多选，英文逗号分隔 (required)
     * @param  string $prAssignNum 审查人员数量 (required)
     * @param  string $testerId 测试人员。可多选，英文逗号分隔 (required)
     * @param  string $prTestNum 测试人员数量 (required)
     * @param  string $milestoneId 关联的里程碑 (required)
     * @param  string $priority 优先级 0~4 (required)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (required)
     * @param  string $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsWithHttpInfo($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken = null, $qt = null, $draft = null, $squash = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestDetail[]';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsRequest($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken, $qt, $draft, $squash);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsAsync
     *
     * 创建 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceRepo 源仓库 id (required)
     * @param  string $sourceBranch 源分支名称 (required)
     * @param  string $targetBranch 目标分支名称 (required)
     * @param  string $title 标题 (required)
     * @param  string $body 内容 (required)
     * @param  string $assigneeId 审查者。可多选，英文逗号分隔 (required)
     * @param  string $prAssignNum 审查人员数量 (required)
     * @param  string $testerId 测试人员。可多选，英文逗号分隔 (required)
     * @param  string $prTestNum 测试人员数量 (required)
     * @param  string $milestoneId 关联的里程碑 (required)
     * @param  string $priority 优先级 0~4 (required)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (required)
     * @param  string $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsAsync($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken = null, $qt = null, $draft = null, $squash = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsAsyncWithHttpInfo($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken, $qt, $draft, $squash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsAsyncWithHttpInfo
     *
     * 创建 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceRepo 源仓库 id (required)
     * @param  string $sourceBranch 源分支名称 (required)
     * @param  string $targetBranch 目标分支名称 (required)
     * @param  string $title 标题 (required)
     * @param  string $body 内容 (required)
     * @param  string $assigneeId 审查者。可多选，英文逗号分隔 (required)
     * @param  string $prAssignNum 审查人员数量 (required)
     * @param  string $testerId 测试人员。可多选，英文逗号分隔 (required)
     * @param  string $prTestNum 测试人员数量 (required)
     * @param  string $milestoneId 关联的里程碑 (required)
     * @param  string $priority 优先级 0~4 (required)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (required)
     * @param  string $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsAsyncWithHttpInfo($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken = null, $qt = null, $draft = null, $squash = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestDetail[]';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsRequest($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken, $qt, $draft, $squash);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequests'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $sourceRepo 源仓库 id (required)
     * @param  string $sourceBranch 源分支名称 (required)
     * @param  string $targetBranch 目标分支名称 (required)
     * @param  string $title 标题 (required)
     * @param  string $body 内容 (required)
     * @param  string $assigneeId 审查者。可多选，英文逗号分隔 (required)
     * @param  string $prAssignNum 审查人员数量 (required)
     * @param  string $testerId 测试人员。可多选，英文逗号分隔 (required)
     * @param  string $prTestNum 测试人员数量 (required)
     * @param  string $milestoneId 关联的里程碑 (required)
     * @param  string $priority 优先级 0~4 (required)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (required)
     * @param  string $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsRequest($enterpriseId, $projectId, $sourceRepo, $sourceBranch, $targetBranch, $title, $body, $assigneeId, $prAssignNum, $testerId, $prTestNum, $milestoneId, $priority, $pruneBranch, $closeRelatedIssue, $accessToken = null, $qt = null, $draft = null, $squash = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'sourceRepo' is set
        if ($sourceRepo === null || (is_array($sourceRepo) && count($sourceRepo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceRepo when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'sourceBranch' is set
        if ($sourceBranch === null || (is_array($sourceBranch) && count($sourceBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceBranch when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'targetBranch' is set
        if ($targetBranch === null || (is_array($targetBranch) && count($targetBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetBranch when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'assigneeId' is set
        if ($assigneeId === null || (is_array($assigneeId) && count($assigneeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assigneeId when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'prAssignNum' is set
        if ($prAssignNum === null || (is_array($prAssignNum) && count($prAssignNum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prAssignNum when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'testerId' is set
        if ($testerId === null || (is_array($testerId) && count($testerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $testerId when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'prTestNum' is set
        if ($prTestNum === null || (is_array($prTestNum) && count($prTestNum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prTestNum when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null || (is_array($milestoneId) && count($milestoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $milestoneId when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'priority' is set
        if ($priority === null || (is_array($priority) && count($priority) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $priority when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'pruneBranch' is set
        if ($pruneBranch === null || (is_array($pruneBranch) && count($pruneBranch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pruneBranch when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }
        // verify the required parameter 'closeRelatedIssue' is set
        if ($closeRelatedIssue === null || (is_array($closeRelatedIssue) && count($closeRelatedIssue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $closeRelatedIssue when calling postEnterpriseIdProjectsProjectIdPullRequests'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($sourceRepo !== null) {
            $formParams['source_repo'] = ObjectSerializer::toFormValue($sourceRepo);
        }
        // form params
        if ($sourceBranch !== null) {
            $formParams['source_branch'] = ObjectSerializer::toFormValue($sourceBranch);
        }
        // form params
        if ($targetBranch !== null) {
            $formParams['target_branch'] = ObjectSerializer::toFormValue($targetBranch);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($prAssignNum !== null) {
            $formParams['pr_assign_num'] = ObjectSerializer::toFormValue($prAssignNum);
        }
        // form params
        if ($testerId !== null) {
            $formParams['tester_id'] = ObjectSerializer::toFormValue($testerId);
        }
        // form params
        if ($prTestNum !== null) {
            $formParams['pr_test_num'] = ObjectSerializer::toFormValue($prTestNum);
        }
        // form params
        if ($milestoneId !== null) {
            $formParams['milestone_id'] = ObjectSerializer::toFormValue($milestoneId);
        }
        // form params
        if ($priority !== null) {
            $formParams['priority'] = ObjectSerializer::toFormValue($priority);
        }
        // form params
        if ($pruneBranch !== null) {
            $formParams['prune_branch'] = ObjectSerializer::toFormValue($pruneBranch);
        }
        // form params
        if ($closeRelatedIssue !== null) {
            $formParams['close_related_issue'] = ObjectSerializer::toFormValue($closeRelatedIssue);
        }
        // form params
        if ($draft !== null) {
            $formParams['draft'] = ObjectSerializer::toFormValue($draft);
        }
        // form params
        if ($squash !== null) {
            $formParams['squash'] = ObjectSerializer::toFormValue($squash);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions
     *
     * 应用代码建议到PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int[] $suggestionsNoteId Note的id (required)
     * @param  int[] $suggestionsNoteTimestamp Note的updated_at的秒时间戳 (required)
     * @param  int[] $suggestionsDiffPositionTimestamp Diff_position的updated_at的秒时间戳 (required)
     * @param  int $pullRequestId pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $message 应用建议操作的提交信息 (optional)
     * @param  string[] $suggestionsContent 代码建议的内容（如果没有，则视为删除） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken = null, $qt = null, $message = null, $suggestionsContent = null)
    {
        $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsWithHttpInfo($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken, $qt, $message, $suggestionsContent);
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsWithHttpInfo
     *
     * 应用代码建议到PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int[] $suggestionsNoteId Note的id (required)
     * @param  int[] $suggestionsNoteTimestamp Note的updated_at的秒时间戳 (required)
     * @param  int[] $suggestionsDiffPositionTimestamp Diff_position的updated_at的秒时间戳 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $message 应用建议操作的提交信息 (optional)
     * @param  string[] $suggestionsContent 代码建议的内容（如果没有，则视为删除） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsWithHttpInfo($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken = null, $qt = null, $message = null, $suggestionsContent = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsRequest($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken, $qt, $message, $suggestionsContent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsAsync
     *
     * 应用代码建议到PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int[] $suggestionsNoteId Note的id (required)
     * @param  int[] $suggestionsNoteTimestamp Note的updated_at的秒时间戳 (required)
     * @param  int[] $suggestionsDiffPositionTimestamp Diff_position的updated_at的秒时间戳 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $message 应用建议操作的提交信息 (optional)
     * @param  string[] $suggestionsContent 代码建议的内容（如果没有，则视为删除） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsAsync($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken = null, $qt = null, $message = null, $suggestionsContent = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsAsyncWithHttpInfo($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken, $qt, $message, $suggestionsContent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsAsyncWithHttpInfo
     *
     * 应用代码建议到PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int[] $suggestionsNoteId Note的id (required)
     * @param  int[] $suggestionsNoteTimestamp Note的updated_at的秒时间戳 (required)
     * @param  int[] $suggestionsDiffPositionTimestamp Diff_position的updated_at的秒时间戳 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $message 应用建议操作的提交信息 (optional)
     * @param  string[] $suggestionsContent 代码建议的内容（如果没有，则视为删除） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsAsyncWithHttpInfo($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken = null, $qt = null, $message = null, $suggestionsContent = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsRequest($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken, $qt, $message, $suggestionsContent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int[] $suggestionsNoteId Note的id (required)
     * @param  int[] $suggestionsNoteTimestamp Note的updated_at的秒时间戳 (required)
     * @param  int[] $suggestionsDiffPositionTimestamp Diff_position的updated_at的秒时间戳 (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $message 应用建议操作的提交信息 (optional)
     * @param  string[] $suggestionsContent 代码建议的内容（如果没有，则视为删除） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestionsRequest($enterpriseId, $projectId, $suggestionsNoteId, $suggestionsNoteTimestamp, $suggestionsDiffPositionTimestamp, $pullRequestId, $accessToken = null, $qt = null, $message = null, $suggestionsContent = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
            );
        }
        // verify the required parameter 'suggestionsNoteId' is set
        if ($suggestionsNoteId === null || (is_array($suggestionsNoteId) && count($suggestionsNoteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suggestionsNoteId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
            );
        }
        // verify the required parameter 'suggestionsNoteTimestamp' is set
        if ($suggestionsNoteTimestamp === null || (is_array($suggestionsNoteTimestamp) && count($suggestionsNoteTimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suggestionsNoteTimestamp when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
            );
        }
        // verify the required parameter 'suggestionsDiffPositionTimestamp' is set
        if ($suggestionsDiffPositionTimestamp === null || (is_array($suggestionsDiffPositionTimestamp) && count($suggestionsDiffPositionTimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suggestionsDiffPositionTimestamp when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdApplySuggestions'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/apply_suggestions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($suggestionsNoteId !== null) {
            $formParams['suggestions[note_id]'] = ObjectSerializer::toFormValue($suggestionsNoteId);
        }
        // form params
        if ($suggestionsNoteTimestamp !== null) {
            $formParams['suggestions[note_timestamp]'] = ObjectSerializer::toFormValue($suggestionsNoteTimestamp);
        }
        // form params
        if ($suggestionsDiffPositionTimestamp !== null) {
            $formParams['suggestions[diff_position_timestamp]'] = ObjectSerializer::toFormValue($suggestionsDiffPositionTimestamp);
        }
        // form params
        if ($suggestionsContent !== null) {
            $formParams['suggestions[content]'] = ObjectSerializer::toFormValue($suggestionsContent);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick
     *
     * 创建 Cherry Pick
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $targetBranchName 目标分支名称 (required)
     * @param  int $targetProjectId 目标仓库id (required)
     * @param  int $pullRequestId pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\CherryPick
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickWithHttpInfo($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickWithHttpInfo
     *
     * 创建 Cherry Pick
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $targetBranchName 目标分支名称 (required)
     * @param  int $targetProjectId 目标仓库id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\CherryPick, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickWithHttpInfo($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CherryPick';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickRequest($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\CherryPick',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickAsync
     *
     * 创建 Cherry Pick
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $targetBranchName 目标分支名称 (required)
     * @param  int $targetProjectId 目标仓库id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickAsync($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickAsyncWithHttpInfo($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickAsyncWithHttpInfo
     *
     * 创建 Cherry Pick
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $targetBranchName 目标分支名称 (required)
     * @param  int $targetProjectId 目标仓库id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickAsyncWithHttpInfo($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\CherryPick';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickRequest($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $targetBranchName 目标分支名称 (required)
     * @param  int $targetProjectId 目标仓库id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPickRequest($enterpriseId, $projectId, $targetBranchName, $targetProjectId, $pullRequestId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick'
            );
        }
        // verify the required parameter 'targetBranchName' is set
        if ($targetBranchName === null || (is_array($targetBranchName) && count($targetBranchName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetBranchName when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick'
            );
        }
        // verify the required parameter 'targetProjectId' is set
        if ($targetProjectId === null || (is_array($targetProjectId) && count($targetProjectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetProjectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdCherryPick'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/cherry_pick';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($targetBranchName !== null) {
            $formParams['target_branch_name'] = ObjectSerializer::toFormValue($targetBranchName);
        }
        // form params
        if ($targetProjectId !== null) {
            $formParams['target_project_id'] = ObjectSerializer::toFormValue($targetProjectId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues
     *
     * PR 添加 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesWithHttpInfo
     *
     * PR 添加 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesRequest($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsync
     *
     * PR 添加 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsync($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsyncWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsyncWithHttpInfo
     *
     * PR 添加 关联任务
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesAsyncWithHttpInfo($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesRequest($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $linkIssueId 任务id (required)
     * @param  int $pullRequestId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssuesRequest($enterpriseId, $projectId, $linkIssueId, $pullRequestId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }
        // verify the required parameter 'linkIssueId' is set
        if ($linkIssueId === null || (is_array($linkIssueId) && count($linkIssueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linkIssueId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdLinkIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/link_issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($linkIssueId !== null) {
            $formParams['link_issue_id'] = ObjectSerializer::toFormValue($linkIssueId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMerge
     *
     * 合并 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）和 rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMerge($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $mergeMethod = 'merge', $title = null, $description = null)
    {
        $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $mergeMethod, $title, $description);
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeWithHttpInfo
     *
     * 合并 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）和 rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $mergeMethod = 'merge', $title = null, $description = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $mergeMethod, $title, $description);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeAsync
     *
     * 合并 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）和 rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $mergeMethod = 'merge', $title = null, $description = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $mergeMethod, $title, $description)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeAsyncWithHttpInfo
     *
     * 合并 PR
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）和 rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $mergeMethod = 'merge', $title = null, $description = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $mergeMethod, $title, $description);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMerge'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）和 squash（扁平化分支合并）和 rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMergeRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $mergeMethod = 'merge', $title = null, $description = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMerge'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMerge'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdMerge'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($mergeMethod !== null) {
            $formParams['merge_method'] = ObjectSerializer::toFormValue($mergeMethod);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes
     *
     * 评论 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $body 评论内容，代码建议用&#x60;&#x60;&#x60;suggestion &#x60;&#x60;&#x60; 包围 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $diffPositionId 代码评论组id，同位置已有评论时传递 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestNote
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes($enterpriseId, $projectId, $pullRequestId, $body, $accessToken = null, $qt = null, $lineCode = null, $diffPositionId = null, $replyId = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $body, $accessToken, $qt, $lineCode, $diffPositionId, $replyId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesWithHttpInfo
     *
     * 评论 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $body 评论内容，代码建议用&#x60;&#x60;&#x60;suggestion &#x60;&#x60;&#x60; 包围 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $diffPositionId 代码评论组id，同位置已有评论时传递 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $body, $accessToken = null, $qt = null, $lineCode = null, $diffPositionId = null, $replyId = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNote';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesRequest($enterpriseId, $projectId, $pullRequestId, $body, $accessToken, $qt, $lineCode, $diffPositionId, $replyId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsync
     *
     * 评论 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $body 评论内容，代码建议用&#x60;&#x60;&#x60;suggestion &#x60;&#x60;&#x60; 包围 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $diffPositionId 代码评论组id，同位置已有评论时传递 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsync($enterpriseId, $projectId, $pullRequestId, $body, $accessToken = null, $qt = null, $lineCode = null, $diffPositionId = null, $replyId = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $body, $accessToken, $qt, $lineCode, $diffPositionId, $replyId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsyncWithHttpInfo
     *
     * 评论 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $body 评论内容，代码建议用&#x60;&#x60;&#x60;suggestion &#x60;&#x60;&#x60; 包围 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $diffPositionId 代码评论组id，同位置已有评论时传递 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $body, $accessToken = null, $qt = null, $lineCode = null, $diffPositionId = null, $replyId = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestNote';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesRequest($enterpriseId, $projectId, $pullRequestId, $body, $accessToken, $qt, $lineCode, $diffPositionId, $replyId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId 默认PR id，当pr_qt参数为iid时，此处是仓库的 PR 编号 (required)
     * @param  string $body 评论内容，代码建议用&#x60;&#x60;&#x60;suggestion &#x60;&#x60;&#x60; 包围 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $lineCode 代码行标记值 (optional)
     * @param  int $diffPositionId 代码评论组id，同位置已有评论时传递 (optional)
     * @param  int $replyId 回复的上级评论id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotesRequest($enterpriseId, $projectId, $pullRequestId, $body, $accessToken = null, $qt = null, $lineCode = null, $diffPositionId = null, $replyId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdNotes'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($lineCode !== null) {
            $formParams['line_code'] = ObjectSerializer::toFormValue($lineCode);
        }
        // form params
        if ($diffPositionId !== null) {
            $formParams['diff_position_id'] = ObjectSerializer::toFormValue($diffPositionId);
        }
        // form params
        if ($replyId !== null) {
            $formParams['reply_id'] = ObjectSerializer::toFormValue($replyId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions
     *
     * 新增PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueReaction
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions($enterpriseId, $projectId, $pullRequestId, $text, $accessToken = null, $qt = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $text, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsWithHttpInfo
     *
     * 新增PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueReaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $text, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueReaction';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsRequest($enterpriseId, $projectId, $pullRequestId, $text, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueReaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsAsync
     *
     * 新增PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsAsync($enterpriseId, $projectId, $pullRequestId, $text, $accessToken = null, $qt = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $text, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsAsyncWithHttpInfo
     *
     * 新增PR表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $text, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueReaction';
        $request = $this->postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsRequest($enterpriseId, $projectId, $pullRequestId, $text, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactionsRequest($enterpriseId, $projectId, $pullRequestId, $text, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling postEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdReactions'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/reactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestId
     *
     * 更新 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $prQt PR id 类型 (optional)
     * @param  int $milestoneId 关联的里程碑 id (optional)
     * @param  string $relatedIssueId 关联的任务 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  string $title PR 标题 (optional)
     * @param  string $body PR 正文内容 (optional)
     * @param  string $targetBranch 目标仓库的分支名称 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  string $stateEvent 关闭 PR (optional)
     * @param  string $labelIds 关联的标签 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (optional)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (optional)
     * @param  string $assigneeId 审查人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prAssignNum 至少需要{pr_assign_num}名审查人员审查通过后可合并 (optional)
     * @param  string $testerId 测试人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prTestNum 至少需要{pr_assign_num}名测试人员测试通过后可合并 (optional)
     * @param  int $checkState 审查状态. 0: 非必须审查 1: 必须审查 (optional)
     * @param  int $testState 测试状态. 0: 非必须测试 1: 必须测试 (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\PullRequestDetail
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestId($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $prQt = null, $milestoneId = null, $relatedIssueId = null, $title = null, $body = null, $targetBranch = null, $priority = null, $stateEvent = null, $labelIds = null, $closeRelatedIssue = null, $pruneBranch = null, $assigneeId = null, $prAssignNum = null, $testerId = null, $prTestNum = null, $checkState = null, $testState = null, $draft = null, $squash = null)
    {
        list($response) = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $prQt, $milestoneId, $relatedIssueId, $title, $body, $targetBranch, $priority, $stateEvent, $labelIds, $closeRelatedIssue, $pruneBranch, $assigneeId, $prAssignNum, $testerId, $prTestNum, $checkState, $testState, $draft, $squash);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdWithHttpInfo
     *
     * 更新 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $prQt PR id 类型 (optional)
     * @param  int $milestoneId 关联的里程碑 id (optional)
     * @param  string $relatedIssueId 关联的任务 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  string $title PR 标题 (optional)
     * @param  string $body PR 正文内容 (optional)
     * @param  string $targetBranch 目标仓库的分支名称 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  string $stateEvent 关闭 PR (optional)
     * @param  string $labelIds 关联的标签 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (optional)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (optional)
     * @param  string $assigneeId 审查人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prAssignNum 至少需要{pr_assign_num}名审查人员审查通过后可合并 (optional)
     * @param  string $testerId 测试人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prTestNum 至少需要{pr_assign_num}名测试人员测试通过后可合并 (optional)
     * @param  int $checkState 审查状态. 0: 非必须审查 1: 必须审查 (optional)
     * @param  int $testState 测试状态. 0: 非必须测试 1: 必须测试 (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\PullRequestDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $prQt = null, $milestoneId = null, $relatedIssueId = null, $title = null, $body = null, $targetBranch = null, $priority = null, $stateEvent = null, $labelIds = null, $closeRelatedIssue = null, $pruneBranch = null, $assigneeId = null, $prAssignNum = null, $testerId = null, $prTestNum = null, $checkState = null, $testState = null, $draft = null, $squash = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestDetail';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $prQt, $milestoneId, $relatedIssueId, $title, $body, $targetBranch, $priority, $stateEvent, $labelIds, $closeRelatedIssue, $pruneBranch, $assigneeId, $prAssignNum, $testerId, $prTestNum, $checkState, $testState, $draft, $squash);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\PullRequestDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsync
     *
     * 更新 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $prQt PR id 类型 (optional)
     * @param  int $milestoneId 关联的里程碑 id (optional)
     * @param  string $relatedIssueId 关联的任务 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  string $title PR 标题 (optional)
     * @param  string $body PR 正文内容 (optional)
     * @param  string $targetBranch 目标仓库的分支名称 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  string $stateEvent 关闭 PR (optional)
     * @param  string $labelIds 关联的标签 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (optional)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (optional)
     * @param  string $assigneeId 审查人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prAssignNum 至少需要{pr_assign_num}名审查人员审查通过后可合并 (optional)
     * @param  string $testerId 测试人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prTestNum 至少需要{pr_assign_num}名测试人员测试通过后可合并 (optional)
     * @param  int $checkState 审查状态. 0: 非必须审查 1: 必须审查 (optional)
     * @param  int $testState 测试状态. 0: 非必须测试 1: 必须测试 (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $prQt = null, $milestoneId = null, $relatedIssueId = null, $title = null, $body = null, $targetBranch = null, $priority = null, $stateEvent = null, $labelIds = null, $closeRelatedIssue = null, $pruneBranch = null, $assigneeId = null, $prAssignNum = null, $testerId = null, $prTestNum = null, $checkState = null, $testState = null, $draft = null, $squash = null)
    {
        return $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $prQt, $milestoneId, $relatedIssueId, $title, $body, $targetBranch, $priority, $stateEvent, $labelIds, $closeRelatedIssue, $pruneBranch, $assigneeId, $prAssignNum, $testerId, $prTestNum, $checkState, $testState, $draft, $squash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsyncWithHttpInfo
     *
     * 更新 Pull Request
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $prQt PR id 类型 (optional)
     * @param  int $milestoneId 关联的里程碑 id (optional)
     * @param  string $relatedIssueId 关联的任务 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  string $title PR 标题 (optional)
     * @param  string $body PR 正文内容 (optional)
     * @param  string $targetBranch 目标仓库的分支名称 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  string $stateEvent 关闭 PR (optional)
     * @param  string $labelIds 关联的标签 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (optional)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (optional)
     * @param  string $assigneeId 审查人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prAssignNum 至少需要{pr_assign_num}名审查人员审查通过后可合并 (optional)
     * @param  string $testerId 测试人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prTestNum 至少需要{pr_assign_num}名测试人员测试通过后可合并 (optional)
     * @param  int $checkState 审查状态. 0: 非必须审查 1: 必须审查 (optional)
     * @param  int $testState 测试状态. 0: 非必须测试 1: 必须测试 (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $prQt = null, $milestoneId = null, $relatedIssueId = null, $title = null, $body = null, $targetBranch = null, $priority = null, $stateEvent = null, $labelIds = null, $closeRelatedIssue = null, $pruneBranch = null, $assigneeId = null, $prAssignNum = null, $testerId = null, $prTestNum = null, $checkState = null, $testState = null, $draft = null, $squash = null)
    {
        $returnType = '\GiteeEnterprise\Model\PullRequestDetail';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $prQt, $milestoneId, $relatedIssueId, $title, $body, $targetBranch, $priority, $stateEvent, $labelIds, $closeRelatedIssue, $pruneBranch, $assigneeId, $prAssignNum, $testerId, $prTestNum, $checkState, $testState, $draft, $squash);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $prQt PR id 类型 (optional)
     * @param  int $milestoneId 关联的里程碑 id (optional)
     * @param  string $relatedIssueId 关联的任务 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  string $title PR 标题 (optional)
     * @param  string $body PR 正文内容 (optional)
     * @param  string $targetBranch 目标仓库的分支名称 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  string $stateEvent 关闭 PR (optional)
     * @param  string $labelIds 关联的标签 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $closeRelatedIssue 是否需要在合并 PR 后关闭关联的任务. 0: 否 1: 是 (optional)
     * @param  int $pruneBranch 是否需要在合并 PR 后删除提交分支. 0: 否 1: 是 (optional)
     * @param  string $assigneeId 审查人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prAssignNum 至少需要{pr_assign_num}名审查人员审查通过后可合并 (optional)
     * @param  string $testerId 测试人员的用户 id。如有多个，用英文逗号分隔。eg: 1,2,3 (optional)
     * @param  int $prTestNum 至少需要{pr_assign_num}名测试人员测试通过后可合并 (optional)
     * @param  int $checkState 审查状态. 0: 非必须审查 1: 必须审查 (optional)
     * @param  int $testState 测试状态. 0: 非必须测试 1: 必须测试 (optional)
     * @param  bool $draft 是否指定为草稿： 草稿 - true, 非草稿 - false，缺省时为非草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $prQt = null, $milestoneId = null, $relatedIssueId = null, $title = null, $body = null, $targetBranch = null, $priority = null, $stateEvent = null, $labelIds = null, $closeRelatedIssue = null, $pruneBranch = null, $assigneeId = null, $prAssignNum = null, $testerId = null, $prTestNum = null, $checkState = null, $testState = null, $draft = null, $squash = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($prQt !== null) {
            $formParams['pr_qt'] = ObjectSerializer::toFormValue($prQt);
        }
        // form params
        if ($milestoneId !== null) {
            $formParams['milestone_id'] = ObjectSerializer::toFormValue($milestoneId);
        }
        // form params
        if ($relatedIssueId !== null) {
            $formParams['related_issue_id'] = ObjectSerializer::toFormValue($relatedIssueId);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($targetBranch !== null) {
            $formParams['target_branch'] = ObjectSerializer::toFormValue($targetBranch);
        }
        // form params
        if ($priority !== null) {
            $formParams['priority'] = ObjectSerializer::toFormValue($priority);
        }
        // form params
        if ($stateEvent !== null) {
            $formParams['state_event'] = ObjectSerializer::toFormValue($stateEvent);
        }
        // form params
        if ($labelIds !== null) {
            $formParams['label_ids'] = ObjectSerializer::toFormValue($labelIds);
        }
        // form params
        if ($closeRelatedIssue !== null) {
            $formParams['close_related_issue'] = ObjectSerializer::toFormValue($closeRelatedIssue);
        }
        // form params
        if ($pruneBranch !== null) {
            $formParams['prune_branch'] = ObjectSerializer::toFormValue($pruneBranch);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($prAssignNum !== null) {
            $formParams['pr_assign_num'] = ObjectSerializer::toFormValue($prAssignNum);
        }
        // form params
        if ($testerId !== null) {
            $formParams['tester_id'] = ObjectSerializer::toFormValue($testerId);
        }
        // form params
        if ($prTestNum !== null) {
            $formParams['pr_test_num'] = ObjectSerializer::toFormValue($prTestNum);
        }
        // form params
        if ($checkState !== null) {
            $formParams['check_state'] = ObjectSerializer::toFormValue($checkState);
        }
        // form params
        if ($testState !== null) {
            $formParams['test_state'] = ObjectSerializer::toFormValue($testState);
        }
        // form params
        if ($draft !== null) {
            $formParams['draft'] = ObjectSerializer::toFormValue($draft);
        }
        // form params
        if ($squash !== null) {
            $formParams['squash'] = ObjectSerializer::toFormValue($squash);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssign
     *
     * PR 审查通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制审核通过(默认否) (optional, default to 0)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssign($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept);
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignWithHttpInfo
     *
     * PR 审查通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制审核通过(默认否) (optional, default to 0)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        $returnType = '';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignAsync
     *
     * PR 审查通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制审核通过(默认否) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        return $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignAsyncWithHttpInfo
     *
     * PR 审查通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制审核通过(默认否) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        $returnType = '';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssign'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制审核通过(默认否) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssignRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssign'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssign'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdAssign'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($forceAccept !== null) {
            $formParams['force_accept'] = ObjectSerializer::toFormValue($forceAccept);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft
     *
     * PR 标记与取消草稿
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  bool $draft 是否指定为草稿： 指定草稿-true, 取消草稿-false (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken = null, $qt = null)
    {
        $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken, $qt);
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftWithHttpInfo
     *
     * PR 标记与取消草稿
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  bool $draft 是否指定为草稿： 指定草稿-true, 取消草稿-false (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftRequest($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftAsync
     *
     * PR 标记与取消草稿
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  bool $draft 是否指定为草稿： 指定草稿-true, 取消草稿-false (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftAsync($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken = null, $qt = null)
    {
        return $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftAsyncWithHttpInfo
     *
     * PR 标记与取消草稿
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  bool $draft 是否指定为草稿： 指定草稿-true, 取消草稿-false (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftRequest($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  bool $draft 是否指定为草稿： 指定草稿-true, 取消草稿-false (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraftRequest($enterpriseId, $projectId, $pullRequestId, $draft, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft'
            );
        }
        // verify the required parameter 'draft' is set
        if ($draft === null || (is_array($draft) && count($draft) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $draft when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdDraft'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($draft !== null) {
            $formParams['draft'] = ObjectSerializer::toFormValue($draft);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTest
     *
     * PR 测试通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制测试通过(默认否) (optional, default to 0)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept);
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestWithHttpInfo
     *
     * PR 测试通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制测试通过(默认否) (optional, default to 0)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        $returnType = '';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestAsync
     *
     * PR 测试通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制测试通过(默认否) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestAsync($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        return $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestAsyncWithHttpInfo
     *
     * PR 测试通过
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制测试通过(默认否) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestAsyncWithHttpInfo($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        $returnType = '';
        $request = $this->putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestRequest($enterpriseId, $projectId, $pullRequestId, $accessToken, $qt, $forceAccept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTest'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $pullRequestId PR id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $forceAccept 是否强制测试通过(默认否) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTestRequest($enterpriseId, $projectId, $pullRequestId, $accessToken = null, $qt = null, $forceAccept = '0')
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTest'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTest'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling putEnterpriseIdProjectsProjectIdPullRequestsPullRequestIdTest'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/pull_requests/{pull_request_id}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($forceAccept !== null) {
            $formParams['force_accept'] = ObjectSerializer::toFormValue($forceAccept);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
