<?php
/**
 * ProjectEnvApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * ProjectEnvApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectEnvApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId
     *
     * 删除环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null)
    {
        $this->deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken, $qt);
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdWithHttpInfo
     *
     * 删除环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdRequest($enterpriseId, $projectId, $envVariableId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsync
     *
     * 删除环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsync($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null)
    {
        return $this->deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsyncWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsyncWithHttpInfo
     *
     * 删除环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsyncWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdRequest($enterpriseId, $projectId, $envVariableId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdRequest($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
            );
        }
        // verify the required parameter 'envVariableId' is set
        if ($envVariableId === null || (is_array($envVariableId) && count($envVariableId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envVariableId when calling deleteEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/env_variables/{env_variable_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($envVariableId !== null) {
            $resourcePath = str_replace(
                '{' . 'env_variable_id' . '}',
                ObjectSerializer::toPathValue($envVariableId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEnvVariables
     *
     * 环境变量列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $query 搜索字符串 (optional)
     * @param  int $readOnly 1为只读，其他情况为全部 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 name: 名称) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\EnvVariable
     */
    public function getEnterpriseIdProjectsProjectIdEnvVariables($enterpriseId, $projectId, $accessToken = null, $qt = null, $query = null, $readOnly = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdEnvVariablesWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $query, $readOnly, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEnvVariablesWithHttpInfo
     *
     * 环境变量列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $query 搜索字符串 (optional)
     * @param  int $readOnly 1为只读，其他情况为全部 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 name: 名称) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\EnvVariable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdEnvVariablesWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $query = null, $readOnly = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnvVariable';
        $request = $this->getEnterpriseIdProjectsProjectIdEnvVariablesRequest($enterpriseId, $projectId, $accessToken, $qt, $query, $readOnly, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\EnvVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEnvVariablesAsync
     *
     * 环境变量列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $query 搜索字符串 (optional)
     * @param  int $readOnly 1为只读，其他情况为全部 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 name: 名称) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdEnvVariablesAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $query = null, $readOnly = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdEnvVariablesAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $query, $readOnly, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdEnvVariablesAsyncWithHttpInfo
     *
     * 环境变量列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $query 搜索字符串 (optional)
     * @param  int $readOnly 1为只读，其他情况为全部 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 name: 名称) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdEnvVariablesAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $query = null, $readOnly = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnvVariable';
        $request = $this->getEnterpriseIdProjectsProjectIdEnvVariablesRequest($enterpriseId, $projectId, $accessToken, $qt, $query, $readOnly, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdEnvVariables'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $query 搜索字符串 (optional)
     * @param  int $readOnly 1为只读，其他情况为全部 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 name: 名称) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdEnvVariablesRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $query = null, $readOnly = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdEnvVariables'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdEnvVariables'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/env_variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }
        // query params
        if ($readOnly !== null) {
            $queryParams['read_only'] = ObjectSerializer::toQueryValue($readOnly);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdEnvVariables
     *
     * 新建环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 变量名称 (required)
     * @param  string $value 变量值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\EnvVariable
     */
    public function postEnterpriseIdProjectsProjectIdEnvVariables($enterpriseId, $projectId, $name, $value, $accessToken = null, $qt = null, $readOnly = null, $remark = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdEnvVariablesWithHttpInfo($enterpriseId, $projectId, $name, $value, $accessToken, $qt, $readOnly, $remark);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdEnvVariablesWithHttpInfo
     *
     * 新建环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 变量名称 (required)
     * @param  string $value 变量值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\EnvVariable, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdEnvVariablesWithHttpInfo($enterpriseId, $projectId, $name, $value, $accessToken = null, $qt = null, $readOnly = null, $remark = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnvVariable';
        $request = $this->postEnterpriseIdProjectsProjectIdEnvVariablesRequest($enterpriseId, $projectId, $name, $value, $accessToken, $qt, $readOnly, $remark);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\EnvVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdEnvVariablesAsync
     *
     * 新建环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 变量名称 (required)
     * @param  string $value 变量值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdEnvVariablesAsync($enterpriseId, $projectId, $name, $value, $accessToken = null, $qt = null, $readOnly = null, $remark = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdEnvVariablesAsyncWithHttpInfo($enterpriseId, $projectId, $name, $value, $accessToken, $qt, $readOnly, $remark)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdEnvVariablesAsyncWithHttpInfo
     *
     * 新建环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 变量名称 (required)
     * @param  string $value 变量值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdEnvVariablesAsyncWithHttpInfo($enterpriseId, $projectId, $name, $value, $accessToken = null, $qt = null, $readOnly = null, $remark = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnvVariable';
        $request = $this->postEnterpriseIdProjectsProjectIdEnvVariablesRequest($enterpriseId, $projectId, $name, $value, $accessToken, $qt, $readOnly, $remark);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdEnvVariables'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 变量名称 (required)
     * @param  string $value 变量值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdEnvVariablesRequest($enterpriseId, $projectId, $name, $value, $accessToken = null, $qt = null, $readOnly = null, $remark = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdEnvVariables'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdEnvVariables'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdProjectsProjectIdEnvVariables'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling postEnterpriseIdProjectsProjectIdEnvVariables'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/env_variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($readOnly !== null) {
            $formParams['read_only'] = ObjectSerializer::toFormValue($readOnly);
        }
        // form params
        if ($remark !== null) {
            $formParams['remark'] = ObjectSerializer::toFormValue($remark);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId
     *
     * 修改环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 变量名称 (optional)
     * @param  string $value 变量值 (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\EnvVariable
     */
    public function putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null, $name = null, $value = null, $readOnly = null, $remark = null)
    {
        list($response) = $this->putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken, $qt, $name, $value, $readOnly, $remark);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdWithHttpInfo
     *
     * 修改环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 变量名称 (optional)
     * @param  string $value 变量值 (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\EnvVariable, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null, $name = null, $value = null, $readOnly = null, $remark = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnvVariable';
        $request = $this->putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdRequest($enterpriseId, $projectId, $envVariableId, $accessToken, $qt, $name, $value, $readOnly, $remark);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\EnvVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsync
     *
     * 修改环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 变量名称 (optional)
     * @param  string $value 变量值 (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsync($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null, $name = null, $value = null, $readOnly = null, $remark = null)
    {
        return $this->putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsyncWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken, $qt, $name, $value, $readOnly, $remark)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsyncWithHttpInfo
     *
     * 修改环境变量
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 变量名称 (optional)
     * @param  string $value 变量值 (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdAsyncWithHttpInfo($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null, $name = null, $value = null, $readOnly = null, $remark = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnvVariable';
        $request = $this->putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdRequest($enterpriseId, $projectId, $envVariableId, $accessToken, $qt, $name, $value, $readOnly, $remark);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  int $envVariableId 变量id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $name 变量名称 (optional)
     * @param  string $value 变量值 (optional)
     * @param  int $readOnly 是否只读,1为true,0为false (optional)
     * @param  string $remark 备注 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableIdRequest($enterpriseId, $projectId, $envVariableId, $accessToken = null, $qt = null, $name = null, $value = null, $readOnly = null, $remark = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
            );
        }
        // verify the required parameter 'envVariableId' is set
        if ($envVariableId === null || (is_array($envVariableId) && count($envVariableId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envVariableId when calling putEnterpriseIdProjectsProjectIdEnvVariablesEnvVariableId'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/env_variables/{env_variable_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($envVariableId !== null) {
            $resourcePath = str_replace(
                '{' . 'env_variable_id' . '}',
                ObjectSerializer::toPathValue($envVariableId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($readOnly !== null) {
            $formParams['read_only'] = ObjectSerializer::toFormValue($readOnly);
        }
        // form params
        if ($remark !== null) {
            $formParams['remark'] = ObjectSerializer::toFormValue($remark);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
