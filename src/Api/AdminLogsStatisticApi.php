<?php
/**
 * AdminLogsStatisticApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * AdminLogsStatisticApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminLogsStatisticApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDeployKeyLogs
     *
     * 企业部署公钥管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DeployKeyLog[]
     */
    public function getEnterpriseIdLogStatisticsDeployKeyLogs($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsDeployKeyLogsWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDeployKeyLogsWithHttpInfo
     *
     * 企业部署公钥管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DeployKeyLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsDeployKeyLogsWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DeployKeyLog[]';
        $request = $this->getEnterpriseIdLogStatisticsDeployKeyLogsRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DeployKeyLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDeployKeyLogsAsync
     *
     * 企业部署公钥管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsDeployKeyLogsAsync($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsDeployKeyLogsAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDeployKeyLogsAsyncWithHttpInfo
     *
     * 企业部署公钥管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsDeployKeyLogsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DeployKeyLog[]';
        $request = $this->getEnterpriseIdLogStatisticsDeployKeyLogsRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsDeployKeyLogs'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsDeployKeyLogsRequest($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsDeployKeyLogs'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/deploy_key_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDocNodeLogs
     *
     * 企业文档管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\DocNodeLog[]
     */
    public function getEnterpriseIdLogStatisticsDocNodeLogs($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsDocNodeLogsWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDocNodeLogsWithHttpInfo
     *
     * 企业文档管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\DocNodeLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsDocNodeLogsWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNodeLog[]';
        $request = $this->getEnterpriseIdLogStatisticsDocNodeLogsRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\DocNodeLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDocNodeLogsAsync
     *
     * 企业文档管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsDocNodeLogsAsync($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsDocNodeLogsAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsDocNodeLogsAsyncWithHttpInfo
     *
     * 企业文档管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsDocNodeLogsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\DocNodeLog[]';
        $request = $this->getEnterpriseIdLogStatisticsDocNodeLogsRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsDocNodeLogs'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsDocNodeLogsRequest($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsDocNodeLogs'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/doc_node_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsEnterpriseRoleLogs
     *
     * 企业角色管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\EnterpriseRoleLog[]
     */
    public function getEnterpriseIdLogStatisticsEnterpriseRoleLogs($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsEnterpriseRoleLogsWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsEnterpriseRoleLogsWithHttpInfo
     *
     * 企业角色管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\EnterpriseRoleLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsEnterpriseRoleLogsWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnterpriseRoleLog[]';
        $request = $this->getEnterpriseIdLogStatisticsEnterpriseRoleLogsRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\EnterpriseRoleLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsEnterpriseRoleLogsAsync
     *
     * 企业角色管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsEnterpriseRoleLogsAsync($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsEnterpriseRoleLogsAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsEnterpriseRoleLogsAsyncWithHttpInfo
     *
     * 企业角色管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsEnterpriseRoleLogsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\EnterpriseRoleLog[]';
        $request = $this->getEnterpriseIdLogStatisticsEnterpriseRoleLogsRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsEnterpriseRoleLogs'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsEnterpriseRoleLogsRequest($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsEnterpriseRoleLogs'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/enterprise_role_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsGroupsLog
     *
     * 团队管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupName 团队名称 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\GroupManageLog[]
     */
    public function getEnterpriseIdLogStatisticsGroupsLog($enterpriseId, $accessToken = null, $groupName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsGroupsLogWithHttpInfo($enterpriseId, $accessToken, $groupName, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsGroupsLogWithHttpInfo
     *
     * 团队管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupName 团队名称 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\GroupManageLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsGroupsLogWithHttpInfo($enterpriseId, $accessToken = null, $groupName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\GroupManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsGroupsLogRequest($enterpriseId, $accessToken, $groupName, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\GroupManageLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsGroupsLogAsync
     *
     * 团队管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupName 团队名称 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsGroupsLogAsync($enterpriseId, $accessToken = null, $groupName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsGroupsLogAsyncWithHttpInfo($enterpriseId, $accessToken, $groupName, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsGroupsLogAsyncWithHttpInfo
     *
     * 团队管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupName 团队名称 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsGroupsLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $groupName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\GroupManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsGroupsLogRequest($enterpriseId, $accessToken, $groupName, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsGroupsLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupName 团队名称 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsGroupsLogRequest($enterpriseId, $accessToken = null, $groupName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsGroupsLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/groups_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($groupName !== null) {
            $queryParams['group_name'] = ObjectSerializer::toQueryValue($groupName);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsMembersLog
     *
     * 成员管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MemberManageLog[]
     */
    public function getEnterpriseIdLogStatisticsMembersLog($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsMembersLogWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsMembersLogWithHttpInfo
     *
     * 成员管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MemberManageLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsMembersLogWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\MemberManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsMembersLogRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MemberManageLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsMembersLogAsync
     *
     * 成员管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsMembersLogAsync($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsMembersLogAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsMembersLogAsyncWithHttpInfo
     *
     * 成员管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsMembersLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\MemberManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsMembersLogRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsMembersLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsMembersLogRequest($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsMembersLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/members_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProgramsLog
     *
     * 项目管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $programName 项目名称 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramManageLog[]
     */
    public function getEnterpriseIdLogStatisticsProgramsLog($enterpriseId, $accessToken = null, $member = null, $programName = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsProgramsLogWithHttpInfo($enterpriseId, $accessToken, $member, $programName, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProgramsLogWithHttpInfo
     *
     * 项目管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $programName 项目名称 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramManageLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsProgramsLogWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $programName = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProgramsLogRequest($enterpriseId, $accessToken, $member, $programName, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramManageLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProgramsLogAsync
     *
     * 项目管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $programName 项目名称 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProgramsLogAsync($enterpriseId, $accessToken = null, $member = null, $programName = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsProgramsLogAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $programName, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProgramsLogAsyncWithHttpInfo
     *
     * 项目管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $programName 项目名称 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProgramsLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $programName = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProgramsLogRequest($enterpriseId, $accessToken, $member, $programName, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsProgramsLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $programName 项目名称 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsProgramsLogRequest($enterpriseId, $accessToken = null, $member = null, $programName = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsProgramsLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/programs_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($programName !== null) {
            $queryParams['program_name'] = ObjectSerializer::toQueryValue($programName);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectGroupsLog
     *
     * 仓库组管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  int $projectGroupId 仓库组id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectGroupManageLog[]
     */
    public function getEnterpriseIdLogStatisticsProjectGroupsLog($enterpriseId, $accessToken = null, $member = null, $projectGroupId = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsProjectGroupsLogWithHttpInfo($enterpriseId, $accessToken, $member, $projectGroupId, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectGroupsLogWithHttpInfo
     *
     * 仓库组管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  int $projectGroupId 仓库组id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectGroupManageLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsProjectGroupsLogWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $projectGroupId = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProjectGroupsLogRequest($enterpriseId, $accessToken, $member, $projectGroupId, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectGroupManageLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectGroupsLogAsync
     *
     * 仓库组管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  int $projectGroupId 仓库组id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProjectGroupsLogAsync($enterpriseId, $accessToken = null, $member = null, $projectGroupId = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsProjectGroupsLogAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $projectGroupId, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectGroupsLogAsyncWithHttpInfo
     *
     * 仓库组管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  int $projectGroupId 仓库组id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProjectGroupsLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $projectGroupId = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectGroupManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProjectGroupsLogRequest($enterpriseId, $accessToken, $member, $projectGroupId, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsProjectGroupsLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  int $projectGroupId 仓库组id (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsProjectGroupsLogRequest($enterpriseId, $accessToken = null, $member = null, $projectGroupId = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsProjectGroupsLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/project_groups_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($projectGroupId !== null) {
            $queryParams['project_group_id'] = ObjectSerializer::toQueryValue($projectGroupId);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsAccessLog
     *
     * 仓库代码日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupPath 团队path (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectAccessLog[]
     */
    public function getEnterpriseIdLogStatisticsProjectsAccessLog($enterpriseId, $accessToken = null, $groupPath = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsProjectsAccessLogWithHttpInfo($enterpriseId, $accessToken, $groupPath, $projectName, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsAccessLogWithHttpInfo
     *
     * 仓库代码日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupPath 团队path (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectAccessLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsProjectsAccessLogWithHttpInfo($enterpriseId, $accessToken = null, $groupPath = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectAccessLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProjectsAccessLogRequest($enterpriseId, $accessToken, $groupPath, $projectName, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectAccessLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsAccessLogAsync
     *
     * 仓库代码日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupPath 团队path (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProjectsAccessLogAsync($enterpriseId, $accessToken = null, $groupPath = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsProjectsAccessLogAsyncWithHttpInfo($enterpriseId, $accessToken, $groupPath, $projectName, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsAccessLogAsyncWithHttpInfo
     *
     * 仓库代码日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupPath 团队path (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProjectsAccessLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $groupPath = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectAccessLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProjectsAccessLogRequest($enterpriseId, $accessToken, $groupPath, $projectName, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsProjectsAccessLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $groupPath 团队path (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsProjectsAccessLogRequest($enterpriseId, $accessToken = null, $groupPath = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsProjectsAccessLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/projects_access_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($groupPath !== null) {
            $queryParams['group_path'] = ObjectSerializer::toQueryValue($groupPath);
        }
        // query params
        if ($projectName !== null) {
            $queryParams['project_name'] = ObjectSerializer::toQueryValue($projectName);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsLog
     *
     * 仓库管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectManageLog[]
     */
    public function getEnterpriseIdLogStatisticsProjectsLog($enterpriseId, $accessToken = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsProjectsLogWithHttpInfo($enterpriseId, $accessToken, $projectName, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsLogWithHttpInfo
     *
     * 仓库管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectManageLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsProjectsLogWithHttpInfo($enterpriseId, $accessToken = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProjectsLogRequest($enterpriseId, $accessToken, $projectName, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectManageLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsLogAsync
     *
     * 仓库管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProjectsLogAsync($enterpriseId, $accessToken = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsProjectsLogAsyncWithHttpInfo($enterpriseId, $accessToken, $projectName, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsProjectsLogAsyncWithHttpInfo
     *
     * 仓库管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsProjectsLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectManageLog[]';
        $request = $this->getEnterpriseIdLogStatisticsProjectsLogRequest($enterpriseId, $accessToken, $projectName, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsProjectsLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectName 仓库path_with_namespace: namespace.path/project.path (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsProjectsLogRequest($enterpriseId, $accessToken = null, $projectName = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsProjectsLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/projects_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($projectName !== null) {
            $queryParams['project_name'] = ObjectSerializer::toQueryValue($projectName);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsSecuritySettingLog
     *
     * 安全与告警管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\SecuritySettingLog[]
     */
    public function getEnterpriseIdLogStatisticsSecuritySettingLog($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdLogStatisticsSecuritySettingLogWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdLogStatisticsSecuritySettingLogWithHttpInfo
     *
     * 安全与告警管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\SecuritySettingLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdLogStatisticsSecuritySettingLogWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\SecuritySettingLog[]';
        $request = $this->getEnterpriseIdLogStatisticsSecuritySettingLogRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\SecuritySettingLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdLogStatisticsSecuritySettingLogAsync
     *
     * 安全与告警管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsSecuritySettingLogAsync($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdLogStatisticsSecuritySettingLogAsyncWithHttpInfo($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdLogStatisticsSecuritySettingLogAsyncWithHttpInfo
     *
     * 安全与告警管理日志
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdLogStatisticsSecuritySettingLogAsyncWithHttpInfo($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\SecuritySettingLog[]';
        $request = $this->getEnterpriseIdLogStatisticsSecuritySettingLogRequest($enterpriseId, $accessToken, $member, $startDate, $endDate, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdLogStatisticsSecuritySettingLog'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $member 成员username (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdLogStatisticsSecuritySettingLogRequest($enterpriseId, $accessToken = null, $member = null, $startDate = null, $endDate = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdLogStatisticsSecuritySettingLog'
            );
        }

        $resourcePath = '/{enterprise_id}/log_statistics/security_setting_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
