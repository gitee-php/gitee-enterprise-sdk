<?php
/**
 * ProjectTagsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * ProjectTagsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectTagsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdTagsDestroy
     *
     * 删除标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 标签名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProjectsProjectIdTagsDestroy($enterpriseId, $projectId, $name, $accessToken = null, $qt = null)
    {
        $this->deleteEnterpriseIdProjectsProjectIdTagsDestroyWithHttpInfo($enterpriseId, $projectId, $name, $accessToken, $qt);
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdTagsDestroyWithHttpInfo
     *
     * 删除标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 标签名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProjectsProjectIdTagsDestroyWithHttpInfo($enterpriseId, $projectId, $name, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectsProjectIdTagsDestroyRequest($enterpriseId, $projectId, $name, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdTagsDestroyAsync
     *
     * 删除标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 标签名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdTagsDestroyAsync($enterpriseId, $projectId, $name, $accessToken = null, $qt = null)
    {
        return $this->deleteEnterpriseIdProjectsProjectIdTagsDestroyAsyncWithHttpInfo($enterpriseId, $projectId, $name, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProjectsProjectIdTagsDestroyAsyncWithHttpInfo
     *
     * 删除标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 标签名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProjectsProjectIdTagsDestroyAsyncWithHttpInfo($enterpriseId, $projectId, $name, $accessToken = null, $qt = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProjectsProjectIdTagsDestroyRequest($enterpriseId, $projectId, $name, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProjectsProjectIdTagsDestroy'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name 标签名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProjectsProjectIdTagsDestroyRequest($enterpriseId, $projectId, $name, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProjectsProjectIdTagsDestroy'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling deleteEnterpriseIdProjectsProjectIdTagsDestroy'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteEnterpriseIdProjectsProjectIdTagsDestroy'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/tags/destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdTags
     *
     * 获取仓库的标签列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $exact 是否精确查找 true:是 false:否 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Tag
     */
    public function getEnterpriseIdProjectsProjectIdTags($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $exact = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProjectsProjectIdTagsWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $search, $exact, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdTagsWithHttpInfo
     *
     * 获取仓库的标签列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $exact 是否精确查找 true:是 false:否 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProjectsProjectIdTagsWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $exact = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Tag';
        $request = $this->getEnterpriseIdProjectsProjectIdTagsRequest($enterpriseId, $projectId, $accessToken, $qt, $search, $exact, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdTagsAsync
     *
     * 获取仓库的标签列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $exact 是否精确查找 true:是 false:否 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdTagsAsync($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $exact = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProjectsProjectIdTagsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken, $qt, $search, $exact, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProjectsProjectIdTagsAsyncWithHttpInfo
     *
     * 获取仓库的标签列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $exact 是否精确查找 true:是 false:否 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProjectsProjectIdTagsAsyncWithHttpInfo($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $exact = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Tag';
        $request = $this->getEnterpriseIdProjectsProjectIdTagsRequest($enterpriseId, $projectId, $accessToken, $qt, $search, $exact, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProjectsProjectIdTags'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $exact 是否精确查找 true:是 false:否 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProjectsProjectIdTagsRequest($enterpriseId, $projectId, $accessToken = null, $qt = null, $search = null, $exact = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProjectsProjectIdTags'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdProjectsProjectIdTags'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = ObjectSerializer::toQueryValue($exact);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdTags
     *
     * 新建标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name tag 名称 (required)
     * @param  string $refs 起点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 描述 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Tag
     */
    public function postEnterpriseIdProjectsProjectIdTags($enterpriseId, $projectId, $name, $refs, $accessToken = null, $qt = null, $description = null)
    {
        list($response) = $this->postEnterpriseIdProjectsProjectIdTagsWithHttpInfo($enterpriseId, $projectId, $name, $refs, $accessToken, $qt, $description);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdTagsWithHttpInfo
     *
     * 新建标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name tag 名称 (required)
     * @param  string $refs 起点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 描述 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProjectsProjectIdTagsWithHttpInfo($enterpriseId, $projectId, $name, $refs, $accessToken = null, $qt = null, $description = null)
    {
        $returnType = '\GiteeEnterprise\Model\Tag';
        $request = $this->postEnterpriseIdProjectsProjectIdTagsRequest($enterpriseId, $projectId, $name, $refs, $accessToken, $qt, $description);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdTagsAsync
     *
     * 新建标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name tag 名称 (required)
     * @param  string $refs 起点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdTagsAsync($enterpriseId, $projectId, $name, $refs, $accessToken = null, $qt = null, $description = null)
    {
        return $this->postEnterpriseIdProjectsProjectIdTagsAsyncWithHttpInfo($enterpriseId, $projectId, $name, $refs, $accessToken, $qt, $description)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProjectsProjectIdTagsAsyncWithHttpInfo
     *
     * 新建标签
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name tag 名称 (required)
     * @param  string $refs 起点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProjectsProjectIdTagsAsyncWithHttpInfo($enterpriseId, $projectId, $name, $refs, $accessToken = null, $qt = null, $description = null)
    {
        $returnType = '\GiteeEnterprise\Model\Tag';
        $request = $this->postEnterpriseIdProjectsProjectIdTagsRequest($enterpriseId, $projectId, $name, $refs, $accessToken, $qt, $description);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProjectsProjectIdTags'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $projectId 仓库 id 或 path (required)
     * @param  string $name tag 名称 (required)
     * @param  string $refs 起点 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $description 描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProjectsProjectIdTagsRequest($enterpriseId, $projectId, $name, $refs, $accessToken = null, $qt = null, $description = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProjectsProjectIdTags'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling postEnterpriseIdProjectsProjectIdTags'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdProjectsProjectIdTags'
            );
        }
        // verify the required parameter 'refs' is set
        if ($refs === null || (is_array($refs) && count($refs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refs when calling postEnterpriseIdProjectsProjectIdTags'
            );
        }

        $resourcePath = '/{enterprise_id}/projects/{project_id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($refs !== null) {
            $formParams['refs'] = ObjectSerializer::toFormValue($refs);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
