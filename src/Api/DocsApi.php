<?php
/**
 * DocsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * DocsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdDocsDocIdFilesFileId
     *
     * 删除文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdDocsDocIdFilesFileId($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        $this->deleteEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo
     *
     * 删除文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdDocsDocIdFilesFileIdAsync
     *
     * 删除文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocsDocIdFilesFileIdAsync($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo
     *
     * 删除文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdDocsDocIdFilesFileId'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling deleteEnterpriseIdDocsDocIdFilesFileId'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling deleteEnterpriseIdDocsDocIdFilesFileId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdDocsDocIdFilesFileId'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdBackupProgress
     *
     * 获取文档备份进度
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  int $docId docId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocsDocIdBackupProgress($enterpriseId, $docId, $accessToken = null)
    {
        $this->getEnterpriseIdDocsDocIdBackupProgressWithHttpInfo($enterpriseId, $docId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdDocsDocIdBackupProgressWithHttpInfo
     *
     * 获取文档备份进度
     *
     * @param  int $enterpriseId (required)
     * @param  int $docId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocsDocIdBackupProgressWithHttpInfo($enterpriseId, $docId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocsDocIdBackupProgressRequest($enterpriseId, $docId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocsDocIdBackupProgressAsync
     *
     * 获取文档备份进度
     *
     * @param  int $enterpriseId (required)
     * @param  int $docId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdBackupProgressAsync($enterpriseId, $docId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocsDocIdBackupProgressAsyncWithHttpInfo($enterpriseId, $docId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdBackupProgressAsyncWithHttpInfo
     *
     * 获取文档备份进度
     *
     * @param  int $enterpriseId (required)
     * @param  int $docId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdBackupProgressAsyncWithHttpInfo($enterpriseId, $docId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocsDocIdBackupProgressRequest($enterpriseId, $docId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocsDocIdBackupProgress'
     *
     * @param  int $enterpriseId (required)
     * @param  int $docId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocsDocIdBackupProgressRequest($enterpriseId, $docId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocsDocIdBackupProgress'
            );
        }
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling getEnterpriseIdDocsDocIdBackupProgress'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/backup_progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdCommit
     *
     * 获取版本历史详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $commitId 文件历史 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocsDocIdCommit($docId, $commitId, $enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdDocsDocIdCommitWithHttpInfo($docId, $commitId, $enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdDocsDocIdCommitWithHttpInfo
     *
     * 获取版本历史详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $commitId 文件历史 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocsDocIdCommitWithHttpInfo($docId, $commitId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocsDocIdCommitRequest($docId, $commitId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocsDocIdCommitAsync
     *
     * 获取版本历史详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $commitId 文件历史 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdCommitAsync($docId, $commitId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocsDocIdCommitAsyncWithHttpInfo($docId, $commitId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdCommitAsyncWithHttpInfo
     *
     * 获取版本历史详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $commitId 文件历史 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdCommitAsyncWithHttpInfo($docId, $commitId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocsDocIdCommitRequest($docId, $commitId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocsDocIdCommit'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $commitId 文件历史 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocsDocIdCommitRequest($docId, $commitId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling getEnterpriseIdDocsDocIdCommit'
            );
        }
        // verify the required parameter 'commitId' is set
        if ($commitId === null || (is_array($commitId) && count($commitId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commitId when calling getEnterpriseIdDocsDocIdCommit'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocsDocIdCommit'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($commitId !== null) {
            $queryParams['commit_id'] = ObjectSerializer::toQueryValue($commitId);
        }

        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFiles
     *
     * 获取文档下的文件列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WikiSort[]
     */
    public function getEnterpriseIdDocsDocIdFiles($enterpriseId, $docId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdDocsDocIdFilesWithHttpInfo($enterpriseId, $docId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesWithHttpInfo
     *
     * 获取文档下的文件列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WikiSort[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocsDocIdFilesWithHttpInfo($enterpriseId, $docId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSort[]';
        $request = $this->getEnterpriseIdDocsDocIdFilesRequest($enterpriseId, $docId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WikiSort[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesAsync
     *
     * 获取文档下的文件列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdFilesAsync($enterpriseId, $docId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocsDocIdFilesAsyncWithHttpInfo($enterpriseId, $docId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesAsyncWithHttpInfo
     *
     * 获取文档下的文件列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdFilesAsyncWithHttpInfo($enterpriseId, $docId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSort[]';
        $request = $this->getEnterpriseIdDocsDocIdFilesRequest($enterpriseId, $docId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocsDocIdFiles'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocsDocIdFilesRequest($enterpriseId, $docId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocsDocIdFiles'
            );
        }
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling getEnterpriseIdDocsDocIdFiles'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileId
     *
     * 获取文件详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $versionId 指定历史版本 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WikiSortDetail
     */
    public function getEnterpriseIdDocsDocIdFilesFileId($docId, $fileId, $enterpriseId, $accessToken = null, $versionId = null)
    {
        list($response) = $this->getEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken, $versionId);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo
     *
     * 获取文件详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $versionId 指定历史版本 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WikiSortDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null, $versionId = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail';
        $request = $this->getEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken, $versionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WikiSortDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdAsync
     *
     * 获取文件详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $versionId 指定历史版本 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdAsync($docId, $fileId, $enterpriseId, $accessToken = null, $versionId = null)
    {
        return $this->getEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken, $versionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo
     *
     * 获取文件详情
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $versionId 指定历史版本 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null, $versionId = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail';
        $request = $this->getEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken, $versionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocsDocIdFilesFileId'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $versionId 指定历史版本 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken = null, $versionId = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling getEnterpriseIdDocsDocIdFilesFileId'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling getEnterpriseIdDocsDocIdFilesFileId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocsDocIdFilesFileId'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['version_id'] = ObjectSerializer::toQueryValue($versionId);
        }

        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdVersions
     *
     * 获取文件的历史版本列表
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\FileVersion
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdVersions($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdDocsDocIdFilesFileIdVersionsWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdVersionsWithHttpInfo
     *
     * 获取文件的历史版本列表
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\FileVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdVersionsWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\FileVersion';
        $request = $this->getEnterpriseIdDocsDocIdFilesFileIdVersionsRequest($docId, $fileId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\FileVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdVersionsAsync
     *
     * 获取文件的历史版本列表
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdVersionsAsync($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocsDocIdFilesFileIdVersionsAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdFilesFileIdVersionsAsyncWithHttpInfo
     *
     * 获取文件的历史版本列表
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdFilesFileIdVersionsAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\FileVersion';
        $request = $this->getEnterpriseIdDocsDocIdFilesFileIdVersionsRequest($docId, $fileId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocsDocIdFilesFileIdVersions'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocsDocIdFilesFileIdVersionsRequest($docId, $fileId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling getEnterpriseIdDocsDocIdFilesFileIdVersions'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling getEnterpriseIdDocsDocIdFilesFileIdVersions'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocsDocIdFilesFileIdVersions'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files/{file_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdVersions
     *
     * 获取文档历史版本
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdDocsDocIdVersions($docId, $enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdDocsDocIdVersionsWithHttpInfo($docId, $enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdDocsDocIdVersionsWithHttpInfo
     *
     * 获取文档历史版本
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdDocsDocIdVersionsWithHttpInfo($docId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocsDocIdVersionsRequest($docId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdDocsDocIdVersionsAsync
     *
     * 获取文档历史版本
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdVersionsAsync($docId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdDocsDocIdVersionsAsyncWithHttpInfo($docId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdDocsDocIdVersionsAsyncWithHttpInfo
     *
     * 获取文档历史版本
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdDocsDocIdVersionsAsyncWithHttpInfo($docId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdDocsDocIdVersionsRequest($docId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdDocsDocIdVersions'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdDocsDocIdVersionsRequest($docId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling getEnterpriseIdDocsDocIdVersions'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdDocsDocIdVersions'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFile
     *
     * 创建文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件名称（不填则由系统自动生成文件名） (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WikiSortDetail[]
     */
    public function postEnterpriseIdDocsDocIdCreateFile($docId, $enterpriseId, $accessToken = null, $name = null, $parentId = null)
    {
        list($response) = $this->postEnterpriseIdDocsDocIdCreateFileWithHttpInfo($docId, $enterpriseId, $accessToken, $name, $parentId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFileWithHttpInfo
     *
     * 创建文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件名称（不填则由系统自动生成文件名） (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WikiSortDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocsDocIdCreateFileWithHttpInfo($docId, $enterpriseId, $accessToken = null, $name = null, $parentId = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail[]';
        $request = $this->postEnterpriseIdDocsDocIdCreateFileRequest($docId, $enterpriseId, $accessToken, $name, $parentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WikiSortDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFileAsync
     *
     * 创建文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件名称（不填则由系统自动生成文件名） (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocsDocIdCreateFileAsync($docId, $enterpriseId, $accessToken = null, $name = null, $parentId = null)
    {
        return $this->postEnterpriseIdDocsDocIdCreateFileAsyncWithHttpInfo($docId, $enterpriseId, $accessToken, $name, $parentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFileAsyncWithHttpInfo
     *
     * 创建文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件名称（不填则由系统自动生成文件名） (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocsDocIdCreateFileAsyncWithHttpInfo($docId, $enterpriseId, $accessToken = null, $name = null, $parentId = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail[]';
        $request = $this->postEnterpriseIdDocsDocIdCreateFileRequest($docId, $enterpriseId, $accessToken, $name, $parentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocsDocIdCreateFile'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件名称（不填则由系统自动生成文件名） (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocsDocIdCreateFileRequest($docId, $enterpriseId, $accessToken = null, $name = null, $parentId = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling postEnterpriseIdDocsDocIdCreateFile'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocsDocIdCreateFile'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/create_file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFolder
     *
     * 创建文件夹
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WikiSortDetail[]
     */
    public function postEnterpriseIdDocsDocIdCreateFolder($docId, $name, $enterpriseId, $accessToken = null, $parentId = null)
    {
        list($response) = $this->postEnterpriseIdDocsDocIdCreateFolderWithHttpInfo($docId, $name, $enterpriseId, $accessToken, $parentId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFolderWithHttpInfo
     *
     * 创建文件夹
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WikiSortDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdDocsDocIdCreateFolderWithHttpInfo($docId, $name, $enterpriseId, $accessToken = null, $parentId = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail[]';
        $request = $this->postEnterpriseIdDocsDocIdCreateFolderRequest($docId, $name, $enterpriseId, $accessToken, $parentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WikiSortDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFolderAsync
     *
     * 创建文件夹
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocsDocIdCreateFolderAsync($docId, $name, $enterpriseId, $accessToken = null, $parentId = null)
    {
        return $this->postEnterpriseIdDocsDocIdCreateFolderAsyncWithHttpInfo($docId, $name, $enterpriseId, $accessToken, $parentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdDocsDocIdCreateFolderAsyncWithHttpInfo
     *
     * 创建文件夹
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdDocsDocIdCreateFolderAsyncWithHttpInfo($docId, $name, $enterpriseId, $accessToken = null, $parentId = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail[]';
        $request = $this->postEnterpriseIdDocsDocIdCreateFolderRequest($docId, $name, $enterpriseId, $accessToken, $parentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdDocsDocIdCreateFolder'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $parentId 父级 id(默认为 0) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdDocsDocIdCreateFolderRequest($docId, $name, $enterpriseId, $accessToken = null, $parentId = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling postEnterpriseIdDocsDocIdCreateFolder'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdDocsDocIdCreateFolder'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdDocsDocIdCreateFolder'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/create_folder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileId
     *
     * 更新文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件标题 (optional)
     * @param  string $content 文件内容 (optional)
     * @param  string $message 提交 (optional)
     * @param  string $mentionedUserIds 提及的用户 id，多个使用 英文 , 分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WikiSortDetail
     */
    public function putEnterpriseIdDocsDocIdFilesFileId($docId, $fileId, $enterpriseId, $accessToken = null, $name = null, $content = null, $message = null, $mentionedUserIds = null)
    {
        list($response) = $this->putEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken, $name, $content, $message, $mentionedUserIds);
        return $response;
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo
     *
     * 更新文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件标题 (optional)
     * @param  string $content 文件内容 (optional)
     * @param  string $message 提交 (optional)
     * @param  string $mentionedUserIds 提及的用户 id，多个使用 英文 , 分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WikiSortDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null, $name = null, $content = null, $message = null, $mentionedUserIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail';
        $request = $this->putEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken, $name, $content, $message, $mentionedUserIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WikiSortDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdAsync
     *
     * 更新文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件标题 (optional)
     * @param  string $content 文件内容 (optional)
     * @param  string $message 提交 (optional)
     * @param  string $mentionedUserIds 提及的用户 id，多个使用 英文 , 分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdAsync($docId, $fileId, $enterpriseId, $accessToken = null, $name = null, $content = null, $message = null, $mentionedUserIds = null)
    {
        return $this->putEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken, $name, $content, $message, $mentionedUserIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo
     *
     * 更新文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件标题 (optional)
     * @param  string $content 文件内容 (optional)
     * @param  string $message 提交 (optional)
     * @param  string $mentionedUserIds 提及的用户 id，多个使用 英文 , 分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdAsyncWithHttpInfo($docId, $fileId, $enterpriseId, $accessToken = null, $name = null, $content = null, $message = null, $mentionedUserIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSortDetail';
        $request = $this->putEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken, $name, $content, $message, $mentionedUserIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocsDocIdFilesFileId'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $name 文件标题 (optional)
     * @param  string $content 文件内容 (optional)
     * @param  string $message 提交 (optional)
     * @param  string $mentionedUserIds 提及的用户 id，多个使用 英文 , 分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocsDocIdFilesFileIdRequest($docId, $fileId, $enterpriseId, $accessToken = null, $name = null, $content = null, $message = null, $mentionedUserIds = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling putEnterpriseIdDocsDocIdFilesFileId'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling putEnterpriseIdDocsDocIdFilesFileId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocsDocIdFilesFileId'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($mentionedUserIds !== null) {
            $formParams['mentioned_user_ids'] = ObjectSerializer::toFormValue($mentionedUserIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdMove
     *
     * 移动文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $parentId 文件移动后的父级的 file_id (required)
     * @param  int $prevId 移动后的同级上一个节点的 file_id（默认：0） (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WikiSort
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdMove($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken = null)
    {
        list($response) = $this->putEnterpriseIdDocsDocIdFilesFileIdMoveWithHttpInfo($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdMoveWithHttpInfo
     *
     * 移动文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $parentId 文件移动后的父级的 file_id (required)
     * @param  int $prevId 移动后的同级上一个节点的 file_id（默认：0） (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WikiSort, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdMoveWithHttpInfo($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSort';
        $request = $this->putEnterpriseIdDocsDocIdFilesFileIdMoveRequest($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WikiSort',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdMoveAsync
     *
     * 移动文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $parentId 文件移动后的父级的 file_id (required)
     * @param  int $prevId 移动后的同级上一个节点的 file_id（默认：0） (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdMoveAsync($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken = null)
    {
        return $this->putEnterpriseIdDocsDocIdFilesFileIdMoveAsyncWithHttpInfo($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdMoveAsyncWithHttpInfo
     *
     * 移动文件
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $parentId 文件移动后的父级的 file_id (required)
     * @param  int $prevId 移动后的同级上一个节点的 file_id（默认：0） (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdMoveAsyncWithHttpInfo($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\WikiSort';
        $request = $this->putEnterpriseIdDocsDocIdFilesFileIdMoveRequest($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocsDocIdFilesFileIdMove'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  int $parentId 文件移动后的父级的 file_id (required)
     * @param  int $prevId 移动后的同级上一个节点的 file_id（默认：0） (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocsDocIdFilesFileIdMoveRequest($docId, $fileId, $parentId, $prevId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling putEnterpriseIdDocsDocIdFilesFileIdMove'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling putEnterpriseIdDocsDocIdFilesFileIdMove'
            );
        }
        // verify the required parameter 'parentId' is set
        if ($parentId === null || (is_array($parentId) && count($parentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentId when calling putEnterpriseIdDocsDocIdFilesFileIdMove'
            );
        }
        // verify the required parameter 'prevId' is set
        if ($prevId === null || (is_array($prevId) && count($prevId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prevId when calling putEnterpriseIdDocsDocIdFilesFileIdMove'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocsDocIdFilesFileIdMove'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files/{file_id}/move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($prevId !== null) {
            $formParams['prev_id'] = ObjectSerializer::toFormValue($prevId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdRename
     *
     * 更改文件夹名称
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdRename($docId, $fileId, $name, $enterpriseId, $accessToken = null)
    {
        $this->putEnterpriseIdDocsDocIdFilesFileIdRenameWithHttpInfo($docId, $fileId, $name, $enterpriseId, $accessToken);
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdRenameWithHttpInfo
     *
     * 更改文件夹名称
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdRenameWithHttpInfo($docId, $fileId, $name, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocsDocIdFilesFileIdRenameRequest($docId, $fileId, $name, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdRenameAsync
     *
     * 更改文件夹名称
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdRenameAsync($docId, $fileId, $name, $enterpriseId, $accessToken = null)
    {
        return $this->putEnterpriseIdDocsDocIdFilesFileIdRenameAsyncWithHttpInfo($docId, $fileId, $name, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdDocsDocIdFilesFileIdRenameAsyncWithHttpInfo
     *
     * 更改文件夹名称
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdDocsDocIdFilesFileIdRenameAsyncWithHttpInfo($docId, $fileId, $name, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->putEnterpriseIdDocsDocIdFilesFileIdRenameRequest($docId, $fileId, $name, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdDocsDocIdFilesFileIdRename'
     *
     * @param  int $docId 文档 id(doc_nodes 文档列表接口的 file_id 字段) (required)
     * @param  int $fileId 文件 id(docs 获取文件列表的 id 字段) (required)
     * @param  string $name 文件夹名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdDocsDocIdFilesFileIdRenameRequest($docId, $fileId, $name, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'docId' is set
        if ($docId === null || (is_array($docId) && count($docId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $docId when calling putEnterpriseIdDocsDocIdFilesFileIdRename'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling putEnterpriseIdDocsDocIdFilesFileIdRename'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling putEnterpriseIdDocsDocIdFilesFileIdRename'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdDocsDocIdFilesFileIdRename'
            );
        }

        $resourcePath = '/{enterprise_id}/docs/{doc_id}/files/{file_id}/rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                '{' . 'doc_id' . '}',
                ObjectSerializer::toPathValue($docId),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
