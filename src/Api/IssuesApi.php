<?php
/**
 * IssuesApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.335
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * IssuesApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssuesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueId
     *
     * 删除任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssuesIssueId($enterpriseId, $issueId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssuesIssueIdWithHttpInfo($enterpriseId, $issueId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdWithHttpInfo
     *
     * 删除任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssuesIssueIdWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdAsync
     *
     * 删除任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdAsync($enterpriseId, $issueId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssuesIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdAsyncWithHttpInfo
     *
     * 删除任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssuesIssueId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssuesIssueId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling deleteEnterpriseIdIssuesIssueId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileId
     *
     * 删除任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  int $attachFileId 附件 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileId($enterpriseId, $issueId, $attachFileId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdWithHttpInfo($enterpriseId, $issueId, $attachFileId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdWithHttpInfo
     *
     * 删除任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  int $attachFileId 附件 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdWithHttpInfo($enterpriseId, $issueId, $attachFileId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdRequest($enterpriseId, $issueId, $attachFileId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdAsync
     *
     * 删除任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  int $attachFileId 附件 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdAsync($enterpriseId, $issueId, $attachFileId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdAsyncWithHttpInfo($enterpriseId, $issueId, $attachFileId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdAsyncWithHttpInfo
     *
     * 删除任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  int $attachFileId 附件 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdAsyncWithHttpInfo($enterpriseId, $issueId, $attachFileId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdRequest($enterpriseId, $issueId, $attachFileId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  int $attachFileId 附件 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileIdRequest($enterpriseId, $issueId, $attachFileId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileId'
            );
        }
        // verify the required parameter 'attachFileId' is set
        if ($attachFileId === null || (is_array($attachFileId) && count($attachFileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachFileId when calling deleteEnterpriseIdIssuesIssueIdAttachFilesAttachFileId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/attach_files/{attach_file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($attachFileId !== null) {
            $resourcePath = str_replace(
                '{' . 'attach_file_id' . '}',
                ObjectSerializer::toPathValue($attachFileId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId
     *
     * 解除任务与 Pull Request 的关联
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdWithHttpInfo
     *
     * 解除任务与 Pull Request 的关联
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdRequest($enterpriseId, $issueId, $pullRequestId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsync
     *
     * 解除任务与 Pull Request 的关联
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsync($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsyncWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsyncWithHttpInfo
     *
     * 解除任务与 Pull Request 的关联
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsyncWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdRequest($enterpriseId, $issueId, $pullRequestId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdRequest($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling deleteEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/link_pull_request/{pull_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdNotesNoteId
     *
     * 删除某任务下评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $noteId 评论的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssuesIssueIdNotesNoteId($enterpriseId, $issueId, $noteId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssuesIssueIdNotesNoteIdWithHttpInfo($enterpriseId, $issueId, $noteId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdNotesNoteIdWithHttpInfo
     *
     * 删除某任务下评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $noteId 评论的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssuesIssueIdNotesNoteIdWithHttpInfo($enterpriseId, $issueId, $noteId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdNotesNoteIdRequest($enterpriseId, $issueId, $noteId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdNotesNoteIdAsync
     *
     * 删除某任务下评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $noteId 评论的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdNotesNoteIdAsync($enterpriseId, $issueId, $noteId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssuesIssueIdNotesNoteIdAsyncWithHttpInfo($enterpriseId, $issueId, $noteId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdNotesNoteIdAsyncWithHttpInfo
     *
     * 删除某任务下评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $noteId 评论的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdNotesNoteIdAsyncWithHttpInfo($enterpriseId, $issueId, $noteId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdNotesNoteIdRequest($enterpriseId, $issueId, $noteId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssuesIssueIdNotesNoteId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $noteId 评论的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssuesIssueIdNotesNoteIdRequest($enterpriseId, $issueId, $noteId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling deleteEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }
        // verify the required parameter 'noteId' is set
        if ($noteId === null || (is_array($noteId) && count($noteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $noteId when calling deleteEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/notes/{note_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($noteId !== null) {
            $resourcePath = str_replace(
                '{' . 'note_id' . '}',
                ObjectSerializer::toPathValue($noteId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId
     *
     * 移除任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 待删除的关联的任务id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId($enterpriseId, $issueId, $linkIssueId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdWithHttpInfo
     *
     * 移除任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 待删除的关联的任务id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdRequest($enterpriseId, $issueId, $linkIssueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsync
     *
     * 移除任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 待删除的关联的任务id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsync($enterpriseId, $issueId, $linkIssueId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsyncWithHttpInfo
     *
     * 移除任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 待删除的关联的任务id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdRequest($enterpriseId, $issueId, $linkIssueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 待删除的关联的任务id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdRequest($enterpriseId, $issueId, $linkIssueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
            );
        }
        // verify the required parameter 'linkIssueId' is set
        if ($linkIssueId === null || (is_array($linkIssueId) && count($linkIssueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linkIssueId when calling deleteEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/related_issue/{link_issue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($linkIssueId !== null) {
            $resourcePath = str_replace(
                '{' . 'link_issue_id' . '}',
                ObjectSerializer::toPathValue($linkIssueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdStar
     *
     * 取消星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdIssuesIssueIdStar($enterpriseId, $issueId, $accessToken = null)
    {
        $this->deleteEnterpriseIdIssuesIssueIdStarWithHttpInfo($enterpriseId, $issueId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdStarWithHttpInfo
     *
     * 取消星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdIssuesIssueIdStarWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdStarRequest($enterpriseId, $issueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdStarAsync
     *
     * 取消星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdStarAsync($enterpriseId, $issueId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdIssuesIssueIdStarAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdIssuesIssueIdStarAsyncWithHttpInfo
     *
     * 取消星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdIssuesIssueIdStarAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdIssuesIssueIdStarRequest($enterpriseId, $issueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdIssuesIssueIdStar'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdIssuesIssueIdStarRequest($enterpriseId, $issueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdIssuesIssueIdStar'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling deleteEnterpriseIdIssuesIssueIdStar'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/star';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssues
     *
     * 获取任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\WithWorkload[]
     */
    public function getEnterpriseIdIssues($enterpriseId, $accessToken = null, $projectId = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssuesWithHttpInfo($enterpriseId, $accessToken, $projectId, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesWithHttpInfo
     *
     * 获取任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\WithWorkload[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesWithHttpInfo($enterpriseId, $accessToken = null, $projectId = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\WithWorkload[]';
        $request = $this->getEnterpriseIdIssuesRequest($enterpriseId, $accessToken, $projectId, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\WithWorkload[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesAsync
     *
     * 获取任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesAsync($enterpriseId, $accessToken = null, $projectId = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssuesAsyncWithHttpInfo($enterpriseId, $accessToken, $projectId, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesAsyncWithHttpInfo
     *
     * 获取任务列表
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesAsyncWithHttpInfo($enterpriseId, $accessToken = null, $projectId = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\WithWorkload[]';
        $request = $this->getEnterpriseIdIssuesRequest($enterpriseId, $accessToken, $projectId, $programId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssues'
     *
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesRequest($enterpriseId, $accessToken = null, $projectId = null, $programId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($milestoneId !== null) {
            $queryParams['milestone_id'] = ObjectSerializer::toQueryValue($milestoneId);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($onlyRelatedMe !== null) {
            $queryParams['only_related_me'] = ObjectSerializer::toQueryValue($onlyRelatedMe);
        }
        // query params
        if ($assigneeId !== null) {
            $queryParams['assignee_id'] = ObjectSerializer::toQueryValue($assigneeId);
        }
        // query params
        if ($authorId !== null) {
            $queryParams['author_id'] = ObjectSerializer::toQueryValue($authorId);
        }
        // query params
        if ($collaboratorIds !== null) {
            $queryParams['collaborator_ids'] = ObjectSerializer::toQueryValue($collaboratorIds);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }
        // query params
        if ($planStartedAt !== null) {
            $queryParams['plan_started_at'] = ObjectSerializer::toQueryValue($planStartedAt);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($filterChild !== null) {
            $queryParams['filter_child'] = ObjectSerializer::toQueryValue($filterChild);
        }
        // query params
        if ($issueStateIds !== null) {
            $queryParams['issue_state_ids'] = ObjectSerializer::toQueryValue($issueStateIds);
        }
        // query params
        if ($issueTypeId !== null) {
            $queryParams['issue_type_id'] = ObjectSerializer::toQueryValue($issueTypeId);
        }
        // query params
        if ($labelIds !== null) {
            $queryParams['label_ids'] = ObjectSerializer::toQueryValue($labelIds);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($scrumSprintIds !== null) {
            $queryParams['scrum_sprint_ids'] = ObjectSerializer::toQueryValue($scrumSprintIds);
        }
        // query params
        if ($scrumVersionIds !== null) {
            $queryParams['scrum_version_ids'] = ObjectSerializer::toQueryValue($scrumVersionIds);
        }
        // query params
        if ($kanbanIds !== null) {
            $queryParams['kanban_ids'] = ObjectSerializer::toQueryValue($kanbanIds);
        }
        // query params
        if ($kanbanColumnIds !== null) {
            $queryParams['kanban_column_ids'] = ObjectSerializer::toQueryValue($kanbanColumnIds);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesBoardMembers
     *
     * 获取成员看板的成员列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $assigneeIds 以,分隔的负责人ID字符串, 如: 23,12 (optional)
     * @param  int $projectId 仓库ID (optional)
     * @param  string $groupIds 以,分隔的组织ID字符串 (optional)
     * @param  int $programId 项目ID (optional)
     * @param  int $milestoneId 里程碑ID (optional)
     * @param  int $issueTypeId 任务类型ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\UserWithRemark[]
     */
    public function getEnterpriseIdIssuesBoardMembers($enterpriseId, $accessToken = null, $assigneeIds = null, $projectId = null, $groupIds = null, $programId = null, $milestoneId = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssuesBoardMembersWithHttpInfo($enterpriseId, $accessToken, $assigneeIds, $projectId, $groupIds, $programId, $milestoneId, $issueTypeId, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesBoardMembersWithHttpInfo
     *
     * 获取成员看板的成员列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $assigneeIds 以,分隔的负责人ID字符串, 如: 23,12 (optional)
     * @param  int $projectId 仓库ID (optional)
     * @param  string $groupIds 以,分隔的组织ID字符串 (optional)
     * @param  int $programId 项目ID (optional)
     * @param  int $milestoneId 里程碑ID (optional)
     * @param  int $issueTypeId 任务类型ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\UserWithRemark[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesBoardMembersWithHttpInfo($enterpriseId, $accessToken = null, $assigneeIds = null, $projectId = null, $groupIds = null, $programId = null, $milestoneId = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\UserWithRemark[]';
        $request = $this->getEnterpriseIdIssuesBoardMembersRequest($enterpriseId, $accessToken, $assigneeIds, $projectId, $groupIds, $programId, $milestoneId, $issueTypeId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\UserWithRemark[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesBoardMembersAsync
     *
     * 获取成员看板的成员列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $assigneeIds 以,分隔的负责人ID字符串, 如: 23,12 (optional)
     * @param  int $projectId 仓库ID (optional)
     * @param  string $groupIds 以,分隔的组织ID字符串 (optional)
     * @param  int $programId 项目ID (optional)
     * @param  int $milestoneId 里程碑ID (optional)
     * @param  int $issueTypeId 任务类型ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesBoardMembersAsync($enterpriseId, $accessToken = null, $assigneeIds = null, $projectId = null, $groupIds = null, $programId = null, $milestoneId = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssuesBoardMembersAsyncWithHttpInfo($enterpriseId, $accessToken, $assigneeIds, $projectId, $groupIds, $programId, $milestoneId, $issueTypeId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesBoardMembersAsyncWithHttpInfo
     *
     * 获取成员看板的成员列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $assigneeIds 以,分隔的负责人ID字符串, 如: 23,12 (optional)
     * @param  int $projectId 仓库ID (optional)
     * @param  string $groupIds 以,分隔的组织ID字符串 (optional)
     * @param  int $programId 项目ID (optional)
     * @param  int $milestoneId 里程碑ID (optional)
     * @param  int $issueTypeId 任务类型ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesBoardMembersAsyncWithHttpInfo($enterpriseId, $accessToken = null, $assigneeIds = null, $projectId = null, $groupIds = null, $programId = null, $milestoneId = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\UserWithRemark[]';
        $request = $this->getEnterpriseIdIssuesBoardMembersRequest($enterpriseId, $accessToken, $assigneeIds, $projectId, $groupIds, $programId, $milestoneId, $issueTypeId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesBoardMembers'
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $assigneeIds 以,分隔的负责人ID字符串, 如: 23,12 (optional)
     * @param  int $projectId 仓库ID (optional)
     * @param  string $groupIds 以,分隔的组织ID字符串 (optional)
     * @param  int $programId 项目ID (optional)
     * @param  int $milestoneId 里程碑ID (optional)
     * @param  int $issueTypeId 任务类型ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesBoardMembersRequest($enterpriseId, $accessToken = null, $assigneeIds = null, $projectId = null, $groupIds = null, $programId = null, $milestoneId = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesBoardMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/board_members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($assigneeIds !== null) {
            $queryParams['assignee_ids'] = ObjectSerializer::toQueryValue($assigneeIds);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($groupIds !== null) {
            $queryParams['group_ids'] = ObjectSerializer::toQueryValue($groupIds);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($milestoneId !== null) {
            $queryParams['milestone_id'] = ObjectSerializer::toQueryValue($milestoneId);
        }
        // query params
        if ($issueTypeId !== null) {
            $queryParams['issue_type_id'] = ObjectSerializer::toQueryValue($issueTypeId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueId
     *
     * 获取任务详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt 查询方式(ident/id) (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueDetail
     */
    public function getEnterpriseIdIssuesIssueId($enterpriseId, $issueId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdWithHttpInfo($enterpriseId, $issueId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdWithHttpInfo
     *
     * 获取任务详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt 查询方式(ident/id) (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetail';
        $request = $this->getEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAsync
     *
     * 获取任务详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt 查询方式(ident/id) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdAsync($enterpriseId, $issueId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAsyncWithHttpInfo
     *
     * 获取任务详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt 查询方式(ident/id) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetail';
        $request = $this->getEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt 查询方式(ident/id) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAttachFiles
     *
     * 获取任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\AttachFile
     */
    public function getEnterpriseIdIssuesIssueIdAttachFiles($enterpriseId, $issueId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdAttachFilesWithHttpInfo($enterpriseId, $issueId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAttachFilesWithHttpInfo
     *
     * 获取任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\AttachFile, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdAttachFilesWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\AttachFile';
        $request = $this->getEnterpriseIdIssuesIssueIdAttachFilesRequest($enterpriseId, $issueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\AttachFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAttachFilesAsync
     *
     * 获取任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdAttachFilesAsync($enterpriseId, $issueId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdAttachFilesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAttachFilesAsyncWithHttpInfo
     *
     * 获取任务附件
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdAttachFilesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\AttachFile';
        $request = $this->getEnterpriseIdIssuesIssueIdAttachFilesRequest($enterpriseId, $issueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdAttachFiles'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdAttachFilesRequest($enterpriseId, $issueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdAttachFiles'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdAttachFiles'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/attach_files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAuths
     *
     * 获取授权用户对任务的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueAuth
     */
    public function getEnterpriseIdIssuesIssueIdAuths($enterpriseId, $issueId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdAuthsWithHttpInfo($enterpriseId, $issueId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAuthsWithHttpInfo
     *
     * 获取授权用户对任务的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueAuth, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdAuthsWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueAuth';
        $request = $this->getEnterpriseIdIssuesIssueIdAuthsRequest($enterpriseId, $issueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueAuth',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAuthsAsync
     *
     * 获取授权用户对任务的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdAuthsAsync($enterpriseId, $issueId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdAuthsAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdAuthsAsyncWithHttpInfo
     *
     * 获取授权用户对任务的权限
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdAuthsAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueAuth';
        $request = $this->getEnterpriseIdIssuesIssueIdAuthsRequest($enterpriseId, $issueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdAuths'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdAuthsRequest($enterpriseId, $issueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdAuths'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdAuths'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/auths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdIssueStates
     *
     * 获取当前任务可流转的下一状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueTypeStateRef
     */
    public function getEnterpriseIdIssuesIssueIdIssueStates($enterpriseId, $issueId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdIssueStatesWithHttpInfo($enterpriseId, $issueId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdIssueStatesWithHttpInfo
     *
     * 获取当前任务可流转的下一状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueTypeStateRef, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdIssueStatesWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeStateRef';
        $request = $this->getEnterpriseIdIssuesIssueIdIssueStatesRequest($enterpriseId, $issueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueTypeStateRef',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdIssueStatesAsync
     *
     * 获取当前任务可流转的下一状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdIssueStatesAsync($enterpriseId, $issueId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdIssueStatesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdIssueStatesAsyncWithHttpInfo
     *
     * 获取当前任务可流转的下一状态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdIssueStatesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueTypeStateRef';
        $request = $this->getEnterpriseIdIssuesIssueIdIssueStatesRequest($enterpriseId, $issueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdIssueStates'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdIssueStatesRequest($enterpriseId, $issueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdIssueStates'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdIssueStates'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/issue_states';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkIssues
     *
     * 获取任务的关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联顺序(none -&gt; 普通, pre -&gt; 紧前, latter -&gt; 紧后) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\LinkIssue
     */
    public function getEnterpriseIdIssuesIssueIdLinkIssues($enterpriseId, $issueId, $accessToken = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdLinkIssuesWithHttpInfo($enterpriseId, $issueId, $accessToken, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkIssuesWithHttpInfo
     *
     * 获取任务的关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联顺序(none -&gt; 普通, pre -&gt; 紧前, latter -&gt; 紧后) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\LinkIssue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdLinkIssuesWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\LinkIssue';
        $request = $this->getEnterpriseIdIssuesIssueIdLinkIssuesRequest($enterpriseId, $issueId, $accessToken, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\LinkIssue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkIssuesAsync
     *
     * 获取任务的关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联顺序(none -&gt; 普通, pre -&gt; 紧前, latter -&gt; 紧后) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdLinkIssuesAsync($enterpriseId, $issueId, $accessToken = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdLinkIssuesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkIssuesAsyncWithHttpInfo
     *
     * 获取任务的关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联顺序(none -&gt; 普通, pre -&gt; 紧前, latter -&gt; 紧后) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdLinkIssuesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\LinkIssue';
        $request = $this->getEnterpriseIdIssuesIssueIdLinkIssuesRequest($enterpriseId, $issueId, $accessToken, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdLinkIssues'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联顺序(none -&gt; 普通, pre -&gt; 紧前, latter -&gt; 紧后) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdLinkIssuesRequest($enterpriseId, $issueId, $accessToken = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdLinkIssues'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdLinkIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/link_issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkPullRequest
     *
     * 获取任务关联的 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdIssuesIssueIdLinkPullRequest($enterpriseId, $issueId, $accessToken = null, $page = '1', $perPage = null)
    {
        $this->getEnterpriseIdIssuesIssueIdLinkPullRequestWithHttpInfo($enterpriseId, $issueId, $accessToken, $page, $perPage);
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkPullRequestWithHttpInfo
     *
     * 获取任务关联的 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdLinkPullRequestWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssuesIssueIdLinkPullRequestRequest($enterpriseId, $issueId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkPullRequestAsync
     *
     * 获取任务关联的 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdLinkPullRequestAsync($enterpriseId, $issueId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdLinkPullRequestAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdLinkPullRequestAsyncWithHttpInfo
     *
     * 获取任务关联的 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdLinkPullRequestAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssuesIssueIdLinkPullRequestRequest($enterpriseId, $issueId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdLinkPullRequest'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdLinkPullRequestRequest($enterpriseId, $issueId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdLinkPullRequest'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdLinkPullRequest'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/link_pull_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdNotes
     *
     * 获取任务下的评论列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name || created_at) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueNote
     */
    public function getEnterpriseIdIssuesIssueIdNotes($enterpriseId, $issueId, $accessToken = null, $sort = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdNotesWithHttpInfo($enterpriseId, $issueId, $accessToken, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdNotesWithHttpInfo
     *
     * 获取任务下的评论列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name || created_at) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdNotesWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $sort = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueNote';
        $request = $this->getEnterpriseIdIssuesIssueIdNotesRequest($enterpriseId, $issueId, $accessToken, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdNotesAsync
     *
     * 获取任务下的评论列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name || created_at) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdNotesAsync($enterpriseId, $issueId, $accessToken = null, $sort = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdNotesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdNotesAsyncWithHttpInfo
     *
     * 获取任务下的评论列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name || created_at) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdNotesAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $sort = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueNote';
        $request = $this->getEnterpriseIdIssuesIssueIdNotesRequest($enterpriseId, $issueId, $accessToken, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdNotes'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 排序字段(name || created_at) (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdNotesRequest($enterpriseId, $issueId, $accessToken = null, $sort = null, $direction = 'desc', $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdNotes'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdNotes'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdOperateLogs
     *
     * 获取任务的操作日志列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $prevId 前一个日志 id, 用作分页 (optional)
     * @param  int $lastId 后一个日志 id, 用作分页 (optional)
     * @param  int $limit 限制多少个日志记录 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueOperateLog
     */
    public function getEnterpriseIdIssuesIssueIdOperateLogs($enterpriseId, $issueId, $accessToken = null, $prevId = null, $lastId = null, $limit = null)
    {
        list($response) = $this->getEnterpriseIdIssuesIssueIdOperateLogsWithHttpInfo($enterpriseId, $issueId, $accessToken, $prevId, $lastId, $limit);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdOperateLogsWithHttpInfo
     *
     * 获取任务的操作日志列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $prevId 前一个日志 id, 用作分页 (optional)
     * @param  int $lastId 后一个日志 id, 用作分页 (optional)
     * @param  int $limit 限制多少个日志记录 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueOperateLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueIdOperateLogsWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $prevId = null, $lastId = null, $limit = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueOperateLog';
        $request = $this->getEnterpriseIdIssuesIssueIdOperateLogsRequest($enterpriseId, $issueId, $accessToken, $prevId, $lastId, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueOperateLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdOperateLogsAsync
     *
     * 获取任务的操作日志列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $prevId 前一个日志 id, 用作分页 (optional)
     * @param  int $lastId 后一个日志 id, 用作分页 (optional)
     * @param  int $limit 限制多少个日志记录 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdOperateLogsAsync($enterpriseId, $issueId, $accessToken = null, $prevId = null, $lastId = null, $limit = null)
    {
        return $this->getEnterpriseIdIssuesIssueIdOperateLogsAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken, $prevId, $lastId, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueIdOperateLogsAsyncWithHttpInfo
     *
     * 获取任务的操作日志列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $prevId 前一个日志 id, 用作分页 (optional)
     * @param  int $lastId 后一个日志 id, 用作分页 (optional)
     * @param  int $limit 限制多少个日志记录 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueIdOperateLogsAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $prevId = null, $lastId = null, $limit = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueOperateLog';
        $request = $this->getEnterpriseIdIssuesIssueIdOperateLogsRequest($enterpriseId, $issueId, $accessToken, $prevId, $lastId, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueIdOperateLogs'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $prevId 前一个日志 id, 用作分页 (optional)
     * @param  int $lastId 后一个日志 id, 用作分页 (optional)
     * @param  int $limit 限制多少个日志记录 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueIdOperateLogsRequest($enterpriseId, $issueId, $accessToken = null, $prevId = null, $lastId = null, $limit = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueIdOperateLogs'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling getEnterpriseIdIssuesIssueIdOperateLogs'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/operate_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($prevId !== null) {
            $queryParams['prev_id'] = ObjectSerializer::toQueryValue($prevId);
        }
        // query params
        if ($lastId !== null) {
            $queryParams['last_id'] = ObjectSerializer::toQueryValue($lastId);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueStats
     *
     * 获取企业下用户任务相关数量数据
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdIssuesIssueStats($enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdIssuesIssueStatsWithHttpInfo($enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdIssuesIssueStatsWithHttpInfo
     *
     * 获取企业下用户任务相关数量数据
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesIssueStatsWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssuesIssueStatsRequest($enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesIssueStatsAsync
     *
     * 获取企业下用户任务相关数量数据
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueStatsAsync($enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdIssuesIssueStatsAsyncWithHttpInfo($enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesIssueStatsAsyncWithHttpInfo
     *
     * 获取企业下用户任务相关数量数据
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesIssueStatsAsyncWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdIssuesIssueStatsRequest($enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesIssueStats'
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesIssueStatsRequest($enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesIssueStats'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/issue_stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesLinkIssues
     *
     * 可选的关联任务集
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $issueId 任务 id (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $issueTypeCategory 以英文逗号分隔的类型，类型可取值枚举：task、bug、requirement (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue[]
     */
    public function getEnterpriseIdIssuesLinkIssues($enterpriseId, $accessToken = null, $issueId = null, $programId = null, $search = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdIssuesLinkIssuesWithHttpInfo($enterpriseId, $accessToken, $issueId, $programId, $search, $issueTypeCategory, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesLinkIssuesWithHttpInfo
     *
     * 可选的关联任务集
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $issueId 任务 id (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $issueTypeCategory 以英文逗号分隔的类型，类型可取值枚举：task、bug、requirement (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesLinkIssuesWithHttpInfo($enterpriseId, $accessToken = null, $issueId = null, $programId = null, $search = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdIssuesLinkIssuesRequest($enterpriseId, $accessToken, $issueId, $programId, $search, $issueTypeCategory, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesLinkIssuesAsync
     *
     * 可选的关联任务集
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $issueId 任务 id (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $issueTypeCategory 以英文逗号分隔的类型，类型可取值枚举：task、bug、requirement (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesLinkIssuesAsync($enterpriseId, $accessToken = null, $issueId = null, $programId = null, $search = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdIssuesLinkIssuesAsyncWithHttpInfo($enterpriseId, $accessToken, $issueId, $programId, $search, $issueTypeCategory, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesLinkIssuesAsyncWithHttpInfo
     *
     * 可选的关联任务集
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $issueId 任务 id (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $issueTypeCategory 以英文逗号分隔的类型，类型可取值枚举：task、bug、requirement (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesLinkIssuesAsyncWithHttpInfo($enterpriseId, $accessToken = null, $issueId = null, $programId = null, $search = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdIssuesLinkIssuesRequest($enterpriseId, $accessToken, $issueId, $programId, $search, $issueTypeCategory, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesLinkIssues'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $issueId 任务 id (optional)
     * @param  int $programId 项目 id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $issueTypeCategory 以英文逗号分隔的类型，类型可取值枚举：task、bug、requirement (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesLinkIssuesRequest($enterpriseId, $accessToken = null, $issueId = null, $programId = null, $search = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesLinkIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/link_issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($issueId !== null) {
            $queryParams['issue_id'] = ObjectSerializer::toQueryValue($issueId);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($issueTypeCategory !== null) {
            $queryParams['issue_type_category'] = ObjectSerializer::toQueryValue($issueTypeCategory);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdIssuesMemberSelect
     *
     * 获取任务指派的成员列表
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programId 项目 ID (optional)
     * @param  string $projectId 仓库 ID (optional)
     * @param  int $issueId 工作项 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueMemberSelect[]
     */
    public function getEnterpriseIdIssuesMemberSelect($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $issueId = null)
    {
        list($response) = $this->getEnterpriseIdIssuesMemberSelectWithHttpInfo($enterpriseId, $accessToken, $programId, $projectId, $issueId);
        return $response;
    }

    /**
     * Operation getEnterpriseIdIssuesMemberSelectWithHttpInfo
     *
     * 获取任务指派的成员列表
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programId 项目 ID (optional)
     * @param  string $projectId 仓库 ID (optional)
     * @param  int $issueId 工作项 ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueMemberSelect[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdIssuesMemberSelectWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $issueId = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueMemberSelect[]';
        $request = $this->getEnterpriseIdIssuesMemberSelectRequest($enterpriseId, $accessToken, $programId, $projectId, $issueId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueMemberSelect[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdIssuesMemberSelectAsync
     *
     * 获取任务指派的成员列表
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programId 项目 ID (optional)
     * @param  string $projectId 仓库 ID (optional)
     * @param  int $issueId 工作项 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesMemberSelectAsync($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $issueId = null)
    {
        return $this->getEnterpriseIdIssuesMemberSelectAsyncWithHttpInfo($enterpriseId, $accessToken, $programId, $projectId, $issueId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdIssuesMemberSelectAsyncWithHttpInfo
     *
     * 获取任务指派的成员列表
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programId 项目 ID (optional)
     * @param  string $projectId 仓库 ID (optional)
     * @param  int $issueId 工作项 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdIssuesMemberSelectAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $issueId = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueMemberSelect[]';
        $request = $this->getEnterpriseIdIssuesMemberSelectRequest($enterpriseId, $accessToken, $programId, $projectId, $issueId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdIssuesMemberSelect'
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programId 项目 ID (optional)
     * @param  string $projectId 仓库 ID (optional)
     * @param  int $issueId 工作项 ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdIssuesMemberSelectRequest($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $issueId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdIssuesMemberSelect'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/member_select';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($issueId !== null) {
            $queryParams['issue_id'] = ObjectSerializer::toQueryValue($issueId);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssues
     *
     * 新建任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $copiedIssueId 任务复制的源任务 ID (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  \DateTime $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  \DateTime $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $attachmentIds 附件id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int[] $extraFieldsIssueFieldId 任务字段 id (optional)
     * @param  string[] $extraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  string $testPlanCaseId 用例ID (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $linkIssueId 需要关联的任务 id (optional)
     * @param  string $linkRefType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $linkDirection 关联关系的方向(none, pre, latter) (optional)
     * @param  string $linkResultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueDetail
     */
    public function postEnterpriseIdIssues($enterpriseId, $title, $accessToken = null, $copiedIssueId = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $attachmentIds = null, $securityHole = null, $extraFieldsIssueFieldId = null, $extraFieldsValue = null, $kanbanId = null, $kanbanColumnId = null, $scrumSprintId = null, $scrumVersionId = null, $estimatedDuration = null, $duration = null, $testPlanCaseId = null, $pullRequestId = null, $category = null, $linkIssueId = null, $linkRefType = null, $linkDirection = null, $linkResultType = null)
    {
        list($response) = $this->postEnterpriseIdIssuesWithHttpInfo($enterpriseId, $title, $accessToken, $copiedIssueId, $description, $assigneeId, $collaboratorIds, $issueTypeId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $attachmentIds, $securityHole, $extraFieldsIssueFieldId, $extraFieldsValue, $kanbanId, $kanbanColumnId, $scrumSprintId, $scrumVersionId, $estimatedDuration, $duration, $testPlanCaseId, $pullRequestId, $category, $linkIssueId, $linkRefType, $linkDirection, $linkResultType);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssuesWithHttpInfo
     *
     * 新建任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $copiedIssueId 任务复制的源任务 ID (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  \DateTime $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  \DateTime $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $attachmentIds 附件id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int[] $extraFieldsIssueFieldId 任务字段 id (optional)
     * @param  string[] $extraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  string $testPlanCaseId 用例ID (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $linkIssueId 需要关联的任务 id (optional)
     * @param  string $linkRefType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $linkDirection 关联关系的方向(none, pre, latter) (optional)
     * @param  string $linkResultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesWithHttpInfo($enterpriseId, $title, $accessToken = null, $copiedIssueId = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $attachmentIds = null, $securityHole = null, $extraFieldsIssueFieldId = null, $extraFieldsValue = null, $kanbanId = null, $kanbanColumnId = null, $scrumSprintId = null, $scrumVersionId = null, $estimatedDuration = null, $duration = null, $testPlanCaseId = null, $pullRequestId = null, $category = null, $linkIssueId = null, $linkRefType = null, $linkDirection = null, $linkResultType = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetail';
        $request = $this->postEnterpriseIdIssuesRequest($enterpriseId, $title, $accessToken, $copiedIssueId, $description, $assigneeId, $collaboratorIds, $issueTypeId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $attachmentIds, $securityHole, $extraFieldsIssueFieldId, $extraFieldsValue, $kanbanId, $kanbanColumnId, $scrumSprintId, $scrumVersionId, $estimatedDuration, $duration, $testPlanCaseId, $pullRequestId, $category, $linkIssueId, $linkRefType, $linkDirection, $linkResultType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesAsync
     *
     * 新建任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $copiedIssueId 任务复制的源任务 ID (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  \DateTime $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  \DateTime $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $attachmentIds 附件id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int[] $extraFieldsIssueFieldId 任务字段 id (optional)
     * @param  string[] $extraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  string $testPlanCaseId 用例ID (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $linkIssueId 需要关联的任务 id (optional)
     * @param  string $linkRefType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $linkDirection 关联关系的方向(none, pre, latter) (optional)
     * @param  string $linkResultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesAsync($enterpriseId, $title, $accessToken = null, $copiedIssueId = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $attachmentIds = null, $securityHole = null, $extraFieldsIssueFieldId = null, $extraFieldsValue = null, $kanbanId = null, $kanbanColumnId = null, $scrumSprintId = null, $scrumVersionId = null, $estimatedDuration = null, $duration = null, $testPlanCaseId = null, $pullRequestId = null, $category = null, $linkIssueId = null, $linkRefType = null, $linkDirection = null, $linkResultType = null)
    {
        return $this->postEnterpriseIdIssuesAsyncWithHttpInfo($enterpriseId, $title, $accessToken, $copiedIssueId, $description, $assigneeId, $collaboratorIds, $issueTypeId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $attachmentIds, $securityHole, $extraFieldsIssueFieldId, $extraFieldsValue, $kanbanId, $kanbanColumnId, $scrumSprintId, $scrumVersionId, $estimatedDuration, $duration, $testPlanCaseId, $pullRequestId, $category, $linkIssueId, $linkRefType, $linkDirection, $linkResultType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesAsyncWithHttpInfo
     *
     * 新建任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $copiedIssueId 任务复制的源任务 ID (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  \DateTime $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  \DateTime $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $attachmentIds 附件id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int[] $extraFieldsIssueFieldId 任务字段 id (optional)
     * @param  string[] $extraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  string $testPlanCaseId 用例ID (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $linkIssueId 需要关联的任务 id (optional)
     * @param  string $linkRefType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $linkDirection 关联关系的方向(none, pre, latter) (optional)
     * @param  string $linkResultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesAsyncWithHttpInfo($enterpriseId, $title, $accessToken = null, $copiedIssueId = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $attachmentIds = null, $securityHole = null, $extraFieldsIssueFieldId = null, $extraFieldsValue = null, $kanbanId = null, $kanbanColumnId = null, $scrumSprintId = null, $scrumVersionId = null, $estimatedDuration = null, $duration = null, $testPlanCaseId = null, $pullRequestId = null, $category = null, $linkIssueId = null, $linkRefType = null, $linkDirection = null, $linkResultType = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetail';
        $request = $this->postEnterpriseIdIssuesRequest($enterpriseId, $title, $accessToken, $copiedIssueId, $description, $assigneeId, $collaboratorIds, $issueTypeId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $attachmentIds, $securityHole, $extraFieldsIssueFieldId, $extraFieldsValue, $kanbanId, $kanbanColumnId, $scrumSprintId, $scrumVersionId, $estimatedDuration, $duration, $testPlanCaseId, $pullRequestId, $category, $linkIssueId, $linkRefType, $linkDirection, $linkResultType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssues'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $title 任务标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $copiedIssueId 任务复制的源任务 ID (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  \DateTime $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  \DateTime $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $attachmentIds 附件id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int[] $extraFieldsIssueFieldId 任务字段 id (optional)
     * @param  string[] $extraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  string $testPlanCaseId 用例ID (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $category 任务类型属性 (optional)
     * @param  int $linkIssueId 需要关联的任务 id (optional)
     * @param  string $linkRefType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $linkDirection 关联关系的方向(none, pre, latter) (optional)
     * @param  string $linkResultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesRequest($enterpriseId, $title, $accessToken = null, $copiedIssueId = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $attachmentIds = null, $securityHole = null, $extraFieldsIssueFieldId = null, $extraFieldsValue = null, $kanbanId = null, $kanbanColumnId = null, $scrumSprintId = null, $scrumVersionId = null, $estimatedDuration = null, $duration = null, $testPlanCaseId = null, $pullRequestId = null, $category = null, $linkIssueId = null, $linkRefType = null, $linkDirection = null, $linkResultType = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssues'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling postEnterpriseIdIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($copiedIssueId !== null) {
            $formParams['copied_issue_id'] = ObjectSerializer::toFormValue($copiedIssueId);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($collaboratorIds !== null) {
            $formParams['collaborator_ids'] = ObjectSerializer::toFormValue($collaboratorIds);
        }
        // form params
        if ($issueTypeId !== null) {
            $formParams['issue_type_id'] = ObjectSerializer::toFormValue($issueTypeId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($projectId !== null) {
            $formParams['project_id'] = ObjectSerializer::toFormValue($projectId);
        }
        // form params
        if ($milestoneId !== null) {
            $formParams['milestone_id'] = ObjectSerializer::toFormValue($milestoneId);
        }
        // form params
        if ($labelIds !== null) {
            $formParams['label_ids'] = ObjectSerializer::toFormValue($labelIds);
        }
        // form params
        if ($priority !== null) {
            $formParams['priority'] = ObjectSerializer::toFormValue($priority);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($planStartedAt !== null) {
            $formParams['plan_started_at'] = ObjectSerializer::toFormValue($planStartedAt);
        }
        // form params
        if ($deadline !== null) {
            $formParams['deadline'] = ObjectSerializer::toFormValue($deadline);
        }
        // form params
        if ($startedAt !== null) {
            $formParams['started_at'] = ObjectSerializer::toFormValue($startedAt);
        }
        // form params
        if ($finishedAt !== null) {
            $formParams['finished_at'] = ObjectSerializer::toFormValue($finishedAt);
        }
        // form params
        if ($attachmentIds !== null) {
            $formParams['attachment_ids'] = ObjectSerializer::toFormValue($attachmentIds);
        }
        // form params
        if ($securityHole !== null) {
            $formParams['security_hole'] = ObjectSerializer::toFormValue($securityHole);
        }
        // form params
        if ($extraFieldsIssueFieldId !== null) {
            $formParams['extra_fields[issue_field_id]'] = ObjectSerializer::toFormValue($extraFieldsIssueFieldId);
        }
        // form params
        if ($extraFieldsValue !== null) {
            $formParams['extra_fields[value]'] = ObjectSerializer::toFormValue($extraFieldsValue);
        }
        // form params
        if ($kanbanId !== null) {
            $formParams['kanban_id'] = ObjectSerializer::toFormValue($kanbanId);
        }
        // form params
        if ($kanbanColumnId !== null) {
            $formParams['kanban_column_id'] = ObjectSerializer::toFormValue($kanbanColumnId);
        }
        // form params
        if ($scrumSprintId !== null) {
            $formParams['scrum_sprint_id'] = ObjectSerializer::toFormValue($scrumSprintId);
        }
        // form params
        if ($scrumVersionId !== null) {
            $formParams['scrum_version_id'] = ObjectSerializer::toFormValue($scrumVersionId);
        }
        // form params
        if ($estimatedDuration !== null) {
            $formParams['estimated_duration'] = ObjectSerializer::toFormValue($estimatedDuration);
        }
        // form params
        if ($duration !== null) {
            $formParams['duration'] = ObjectSerializer::toFormValue($duration);
        }
        // form params
        if ($testPlanCaseId !== null) {
            $formParams['test_plan_case_id'] = ObjectSerializer::toFormValue($testPlanCaseId);
        }
        // form params
        if ($pullRequestId !== null) {
            $formParams['pull_request_id'] = ObjectSerializer::toFormValue($pullRequestId);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($linkIssueId !== null) {
            $formParams['link_issue_id'] = ObjectSerializer::toFormValue($linkIssueId);
        }
        // form params
        if ($linkRefType !== null) {
            $formParams['link_ref_type'] = ObjectSerializer::toFormValue($linkRefType);
        }
        // form params
        if ($linkDirection !== null) {
            $formParams['link_direction'] = ObjectSerializer::toFormValue($linkDirection);
        }
        // form params
        if ($linkResultType !== null) {
            $formParams['link_result_type'] = ObjectSerializer::toFormValue($linkResultType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssuesFilter
     *
     * 获取任务列表-筛选器查询
     *
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  int $filterId 筛选器id (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsIssueFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsIssueFieldId 自定义字段id (optional)
     * @param  string $priorityFiltersIssueType 任务类型 (optional)
     * @param  string $priorityFiltersIssueState 任务状态 (optional)
     * @param  string $priorityFiltersIssueAssignee 任务负责人 (optional)
     * @param  string $priorityFiltersIssueLabel 任务标签 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue[]
     */
    public function postEnterpriseIdIssuesFilter($filterConditionsProperty, $enterpriseId, $accessToken = null, $kanbanColumnIds = null, $filterId = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsIssueFieldType = null, $filterConditionsIssueFieldId = null, $priorityFiltersIssueType = null, $priorityFiltersIssueState = null, $priorityFiltersIssueAssignee = null, $priorityFiltersIssueLabel = null, $search = null, $sort = null, $direction = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        list($response) = $this->postEnterpriseIdIssuesFilterWithHttpInfo($filterConditionsProperty, $enterpriseId, $accessToken, $kanbanColumnIds, $filterId, $filterConditionsComparator, $filterConditionsValue, $filterConditionsIssueFieldType, $filterConditionsIssueFieldId, $priorityFiltersIssueType, $priorityFiltersIssueState, $priorityFiltersIssueAssignee, $priorityFiltersIssueLabel, $search, $sort, $direction, $issueTypeCategory, $page, $perPage);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssuesFilterWithHttpInfo
     *
     * 获取任务列表-筛选器查询
     *
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  int $filterId 筛选器id (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsIssueFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsIssueFieldId 自定义字段id (optional)
     * @param  string $priorityFiltersIssueType 任务类型 (optional)
     * @param  string $priorityFiltersIssueState 任务状态 (optional)
     * @param  string $priorityFiltersIssueAssignee 任务负责人 (optional)
     * @param  string $priorityFiltersIssueLabel 任务标签 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesFilterWithHttpInfo($filterConditionsProperty, $enterpriseId, $accessToken = null, $kanbanColumnIds = null, $filterId = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsIssueFieldType = null, $filterConditionsIssueFieldId = null, $priorityFiltersIssueType = null, $priorityFiltersIssueState = null, $priorityFiltersIssueAssignee = null, $priorityFiltersIssueLabel = null, $search = null, $sort = null, $direction = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->postEnterpriseIdIssuesFilterRequest($filterConditionsProperty, $enterpriseId, $accessToken, $kanbanColumnIds, $filterId, $filterConditionsComparator, $filterConditionsValue, $filterConditionsIssueFieldType, $filterConditionsIssueFieldId, $priorityFiltersIssueType, $priorityFiltersIssueState, $priorityFiltersIssueAssignee, $priorityFiltersIssueLabel, $search, $sort, $direction, $issueTypeCategory, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesFilterAsync
     *
     * 获取任务列表-筛选器查询
     *
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  int $filterId 筛选器id (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsIssueFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsIssueFieldId 自定义字段id (optional)
     * @param  string $priorityFiltersIssueType 任务类型 (optional)
     * @param  string $priorityFiltersIssueState 任务状态 (optional)
     * @param  string $priorityFiltersIssueAssignee 任务负责人 (optional)
     * @param  string $priorityFiltersIssueLabel 任务标签 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesFilterAsync($filterConditionsProperty, $enterpriseId, $accessToken = null, $kanbanColumnIds = null, $filterId = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsIssueFieldType = null, $filterConditionsIssueFieldId = null, $priorityFiltersIssueType = null, $priorityFiltersIssueState = null, $priorityFiltersIssueAssignee = null, $priorityFiltersIssueLabel = null, $search = null, $sort = null, $direction = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        return $this->postEnterpriseIdIssuesFilterAsyncWithHttpInfo($filterConditionsProperty, $enterpriseId, $accessToken, $kanbanColumnIds, $filterId, $filterConditionsComparator, $filterConditionsValue, $filterConditionsIssueFieldType, $filterConditionsIssueFieldId, $priorityFiltersIssueType, $priorityFiltersIssueState, $priorityFiltersIssueAssignee, $priorityFiltersIssueLabel, $search, $sort, $direction, $issueTypeCategory, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesFilterAsyncWithHttpInfo
     *
     * 获取任务列表-筛选器查询
     *
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  int $filterId 筛选器id (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsIssueFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsIssueFieldId 自定义字段id (optional)
     * @param  string $priorityFiltersIssueType 任务类型 (optional)
     * @param  string $priorityFiltersIssueState 任务状态 (optional)
     * @param  string $priorityFiltersIssueAssignee 任务负责人 (optional)
     * @param  string $priorityFiltersIssueLabel 任务标签 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesFilterAsyncWithHttpInfo($filterConditionsProperty, $enterpriseId, $accessToken = null, $kanbanColumnIds = null, $filterId = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsIssueFieldType = null, $filterConditionsIssueFieldId = null, $priorityFiltersIssueType = null, $priorityFiltersIssueState = null, $priorityFiltersIssueAssignee = null, $priorityFiltersIssueLabel = null, $search = null, $sort = null, $direction = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->postEnterpriseIdIssuesFilterRequest($filterConditionsProperty, $enterpriseId, $accessToken, $kanbanColumnIds, $filterId, $filterConditionsComparator, $filterConditionsValue, $filterConditionsIssueFieldType, $filterConditionsIssueFieldId, $priorityFiltersIssueType, $priorityFiltersIssueState, $priorityFiltersIssueAssignee, $priorityFiltersIssueLabel, $search, $sort, $direction, $issueTypeCategory, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssuesFilter'
     *
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  int $filterId 筛选器id (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsIssueFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsIssueFieldId 自定义字段id (optional)
     * @param  string $priorityFiltersIssueType 任务类型 (optional)
     * @param  string $priorityFiltersIssueState 任务状态 (optional)
     * @param  string $priorityFiltersIssueAssignee 任务负责人 (optional)
     * @param  string $priorityFiltersIssueLabel 任务标签 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $issueTypeCategory 任务类型属性 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesFilterRequest($filterConditionsProperty, $enterpriseId, $accessToken = null, $kanbanColumnIds = null, $filterId = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsIssueFieldType = null, $filterConditionsIssueFieldId = null, $priorityFiltersIssueType = null, $priorityFiltersIssueState = null, $priorityFiltersIssueAssignee = null, $priorityFiltersIssueLabel = null, $search = null, $sort = null, $direction = null, $issueTypeCategory = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'filterConditionsProperty' is set
        if ($filterConditionsProperty === null || (is_array($filterConditionsProperty) && count($filterConditionsProperty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filterConditionsProperty when calling postEnterpriseIdIssuesFilter'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssuesFilter'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($kanbanColumnIds !== null) {
            $formParams['kanban_column_ids'] = ObjectSerializer::toFormValue($kanbanColumnIds);
        }
        // form params
        if ($filterId !== null) {
            $formParams['filter_id'] = ObjectSerializer::toFormValue($filterId);
        }
        // form params
        if ($filterConditionsProperty !== null) {
            $formParams['filter_conditions[property]'] = ObjectSerializer::toFormValue($filterConditionsProperty);
        }
        // form params
        if ($filterConditionsComparator !== null) {
            $formParams['filter_conditions[comparator]'] = ObjectSerializer::toFormValue($filterConditionsComparator);
        }
        // form params
        if ($filterConditionsValue !== null) {
            $formParams['filter_conditions[value]'] = ObjectSerializer::toFormValue($filterConditionsValue);
        }
        // form params
        if ($filterConditionsIssueFieldType !== null) {
            $formParams['filter_conditions[issue_field_type]'] = ObjectSerializer::toFormValue($filterConditionsIssueFieldType);
        }
        // form params
        if ($filterConditionsIssueFieldId !== null) {
            $formParams['filter_conditions[issue_field_id]'] = ObjectSerializer::toFormValue($filterConditionsIssueFieldId);
        }
        // form params
        if ($priorityFiltersIssueType !== null) {
            $formParams['priority_filters[issue_type]'] = ObjectSerializer::toFormValue($priorityFiltersIssueType);
        }
        // form params
        if ($priorityFiltersIssueState !== null) {
            $formParams['priority_filters[issue_state]'] = ObjectSerializer::toFormValue($priorityFiltersIssueState);
        }
        // form params
        if ($priorityFiltersIssueAssignee !== null) {
            $formParams['priority_filters[issue_assignee]'] = ObjectSerializer::toFormValue($priorityFiltersIssueAssignee);
        }
        // form params
        if ($priorityFiltersIssueLabel !== null) {
            $formParams['priority_filters[issue_label]'] = ObjectSerializer::toFormValue($priorityFiltersIssueLabel);
        }
        // form params
        if ($search !== null) {
            $formParams['search'] = ObjectSerializer::toFormValue($search);
        }
        // form params
        if ($sort !== null) {
            $formParams['sort'] = ObjectSerializer::toFormValue($sort);
        }
        // form params
        if ($direction !== null) {
            $formParams['direction'] = ObjectSerializer::toFormValue($direction);
        }
        // form params
        if ($issueTypeCategory !== null) {
            $formParams['issue_type_category'] = ObjectSerializer::toFormValue($issueTypeCategory);
        }
        // form params
        if ($page !== null) {
            $formParams['page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($perPage !== null) {
            $formParams['per_page'] = ObjectSerializer::toFormValue($perPage);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId
     *
     * 任务关联 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        $this->postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken);
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdWithHttpInfo
     *
     * 任务关联 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdRequest($enterpriseId, $issueId, $pullRequestId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsync
     *
     * 任务关联 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsync($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        return $this->postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsyncWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsyncWithHttpInfo
     *
     * 任务关联 Pull Request
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdAsyncWithHttpInfo($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdRequest($enterpriseId, $issueId, $pullRequestId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $pullRequestId Pull Request id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestIdRequest($enterpriseId, $issueId, $pullRequestId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
            );
        }
        // verify the required parameter 'pullRequestId' is set
        if ($pullRequestId === null || (is_array($pullRequestId) && count($pullRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pullRequestId when calling postEnterpriseIdIssuesIssueIdLinkPullRequestPullRequestId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/link_pull_request/{pull_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($pullRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'pull_request_id' . '}',
                ObjectSerializer::toPathValue($pullRequestId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdNotes
     *
     * 评论任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueNote
     */
    public function postEnterpriseIdIssuesIssueIdNotes($enterpriseId, $issueId, $body, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdIssuesIssueIdNotesWithHttpInfo($enterpriseId, $issueId, $body, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdNotesWithHttpInfo
     *
     * 评论任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesIssueIdNotesWithHttpInfo($enterpriseId, $issueId, $body, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueNote';
        $request = $this->postEnterpriseIdIssuesIssueIdNotesRequest($enterpriseId, $issueId, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdNotesAsync
     *
     * 评论任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdNotesAsync($enterpriseId, $issueId, $body, $accessToken = null)
    {
        return $this->postEnterpriseIdIssuesIssueIdNotesAsyncWithHttpInfo($enterpriseId, $issueId, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdNotesAsyncWithHttpInfo
     *
     * 评论任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdNotesAsyncWithHttpInfo($enterpriseId, $issueId, $body, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueNote';
        $request = $this->postEnterpriseIdIssuesIssueIdNotesRequest($enterpriseId, $issueId, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssuesIssueIdNotes'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesIssueIdNotesRequest($enterpriseId, $issueId, $body, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssuesIssueIdNotes'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling postEnterpriseIdIssuesIssueIdNotes'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postEnterpriseIdIssuesIssueIdNotes'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdReaction
     *
     * 新增任务表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueReaction
     */
    public function postEnterpriseIdIssuesIssueIdReaction($enterpriseId, $issueId, $text, $accessToken = null)
    {
        list($response) = $this->postEnterpriseIdIssuesIssueIdReactionWithHttpInfo($enterpriseId, $issueId, $text, $accessToken);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdReactionWithHttpInfo
     *
     * 新增任务表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueReaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesIssueIdReactionWithHttpInfo($enterpriseId, $issueId, $text, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueReaction';
        $request = $this->postEnterpriseIdIssuesIssueIdReactionRequest($enterpriseId, $issueId, $text, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueReaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdReactionAsync
     *
     * 新增任务表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdReactionAsync($enterpriseId, $issueId, $text, $accessToken = null)
    {
        return $this->postEnterpriseIdIssuesIssueIdReactionAsyncWithHttpInfo($enterpriseId, $issueId, $text, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdReactionAsyncWithHttpInfo
     *
     * 新增任务表态
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdReactionAsyncWithHttpInfo($enterpriseId, $issueId, $text, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueReaction';
        $request = $this->postEnterpriseIdIssuesIssueIdReactionRequest($enterpriseId, $issueId, $text, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssuesIssueIdReaction'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务的 id (required)
     * @param  string $text 表情 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesIssueIdReactionRequest($enterpriseId, $issueId, $text, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssuesIssueIdReaction'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling postEnterpriseIdIssuesIssueIdReaction'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling postEnterpriseIdIssuesIssueIdReaction'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/reaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdRelatedIssue
     *
     * 为指定任务添加关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueDetailWithRelatedInfos
     */
    public function postEnterpriseIdIssuesIssueIdRelatedIssue($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken = null, $direction = null, $resultType = null)
    {
        list($response) = $this->postEnterpriseIdIssuesIssueIdRelatedIssueWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken, $direction, $resultType);
        return $response;
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdRelatedIssueWithHttpInfo
     *
     * 为指定任务添加关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueDetailWithRelatedInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesIssueIdRelatedIssueWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken = null, $direction = null, $resultType = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetailWithRelatedInfos';
        $request = $this->postEnterpriseIdIssuesIssueIdRelatedIssueRequest($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken, $direction, $resultType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueDetailWithRelatedInfos',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdRelatedIssueAsync
     *
     * 为指定任务添加关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdRelatedIssueAsync($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken = null, $direction = null, $resultType = null)
    {
        return $this->postEnterpriseIdIssuesIssueIdRelatedIssueAsyncWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken, $direction, $resultType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdRelatedIssueAsyncWithHttpInfo
     *
     * 为指定任务添加关联任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdRelatedIssueAsyncWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken = null, $direction = null, $resultType = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetailWithRelatedInfos';
        $request = $this->postEnterpriseIdIssuesIssueIdRelatedIssueRequest($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken, $direction, $resultType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssuesIssueIdRelatedIssue'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesIssueIdRelatedIssueRequest($enterpriseId, $issueId, $linkIssueId, $refType, $accessToken = null, $direction = null, $resultType = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssuesIssueIdRelatedIssue'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling postEnterpriseIdIssuesIssueIdRelatedIssue'
            );
        }
        // verify the required parameter 'linkIssueId' is set
        if ($linkIssueId === null || (is_array($linkIssueId) && count($linkIssueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linkIssueId when calling postEnterpriseIdIssuesIssueIdRelatedIssue'
            );
        }
        // verify the required parameter 'refType' is set
        if ($refType === null || (is_array($refType) && count($refType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refType when calling postEnterpriseIdIssuesIssueIdRelatedIssue'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/related_issue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($linkIssueId !== null) {
            $formParams['link_issue_id'] = ObjectSerializer::toFormValue($linkIssueId);
        }
        // form params
        if ($refType !== null) {
            $formParams['ref_type'] = ObjectSerializer::toFormValue($refType);
        }
        // form params
        if ($direction !== null) {
            $formParams['direction'] = ObjectSerializer::toFormValue($direction);
        }
        // form params
        if ($resultType !== null) {
            $formParams['result_type'] = ObjectSerializer::toFormValue($resultType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdStar
     *
     * 星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postEnterpriseIdIssuesIssueIdStar($enterpriseId, $issueId, $accessToken = null)
    {
        $this->postEnterpriseIdIssuesIssueIdStarWithHttpInfo($enterpriseId, $issueId, $accessToken);
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdStarWithHttpInfo
     *
     * 星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdIssuesIssueIdStarWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdIssuesIssueIdStarRequest($enterpriseId, $issueId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdStarAsync
     *
     * 星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdStarAsync($enterpriseId, $issueId, $accessToken = null)
    {
        return $this->postEnterpriseIdIssuesIssueIdStarAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdIssuesIssueIdStarAsyncWithHttpInfo
     *
     * 星标任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdIssuesIssueIdStarAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postEnterpriseIdIssuesIssueIdStarRequest($enterpriseId, $issueId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdIssuesIssueIdStar'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdIssuesIssueIdStarRequest($enterpriseId, $issueId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdIssuesIssueIdStar'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling postEnterpriseIdIssuesIssueIdStar'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/star';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssuesIssueId
     *
     * 更新任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 任务标题 (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $issueStateId 任务状态的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  string $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  map[string,string] $changeStates 变更的状态 {source_id1: target_id1, source_id2: target_id2} (optional)
     * @param  string $hierarchyChangeMethod 选择的层级结构（relevance: 改为关联关系, independence: 取消父子关系） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueDetail
     */
    public function putEnterpriseIdIssuesIssueId($enterpriseId, $issueId, $accessToken = null, $title = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $issueStateId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $securityHole = null, $scrumSprintId = null, $scrumVersionId = null, $kanbanId = null, $kanbanColumnId = null, $estimatedDuration = null, $duration = null, $changeStates = null, $hierarchyChangeMethod = null)
    {
        list($response) = $this->putEnterpriseIdIssuesIssueIdWithHttpInfo($enterpriseId, $issueId, $accessToken, $title, $description, $assigneeId, $collaboratorIds, $issueTypeId, $issueStateId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $securityHole, $scrumSprintId, $scrumVersionId, $kanbanId, $kanbanColumnId, $estimatedDuration, $duration, $changeStates, $hierarchyChangeMethod);
        return $response;
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdWithHttpInfo
     *
     * 更新任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 任务标题 (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $issueStateId 任务状态的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  string $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  map[string,string] $changeStates 变更的状态 {source_id1: target_id1, source_id2: target_id2} (optional)
     * @param  string $hierarchyChangeMethod 选择的层级结构（relevance: 改为关联关系, independence: 取消父子关系） (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssuesIssueIdWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $title = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $issueStateId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $securityHole = null, $scrumSprintId = null, $scrumVersionId = null, $kanbanId = null, $kanbanColumnId = null, $estimatedDuration = null, $duration = null, $changeStates = null, $hierarchyChangeMethod = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetail';
        $request = $this->putEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken, $title, $description, $assigneeId, $collaboratorIds, $issueTypeId, $issueStateId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $securityHole, $scrumSprintId, $scrumVersionId, $kanbanId, $kanbanColumnId, $estimatedDuration, $duration, $changeStates, $hierarchyChangeMethod);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdAsync
     *
     * 更新任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 任务标题 (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $issueStateId 任务状态的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  string $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  map[string,string] $changeStates 变更的状态 {source_id1: target_id1, source_id2: target_id2} (optional)
     * @param  string $hierarchyChangeMethod 选择的层级结构（relevance: 改为关联关系, independence: 取消父子关系） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssuesIssueIdAsync($enterpriseId, $issueId, $accessToken = null, $title = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $issueStateId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $securityHole = null, $scrumSprintId = null, $scrumVersionId = null, $kanbanId = null, $kanbanColumnId = null, $estimatedDuration = null, $duration = null, $changeStates = null, $hierarchyChangeMethod = null)
    {
        return $this->putEnterpriseIdIssuesIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken, $title, $description, $assigneeId, $collaboratorIds, $issueTypeId, $issueStateId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $securityHole, $scrumSprintId, $scrumVersionId, $kanbanId, $kanbanColumnId, $estimatedDuration, $duration, $changeStates, $hierarchyChangeMethod)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdAsyncWithHttpInfo
     *
     * 更新任务
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 任务标题 (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $issueStateId 任务状态的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  string $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  map[string,string] $changeStates 变更的状态 {source_id1: target_id1, source_id2: target_id2} (optional)
     * @param  string $hierarchyChangeMethod 选择的层级结构（relevance: 改为关联关系, independence: 取消父子关系） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssuesIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $accessToken = null, $title = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $issueStateId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $securityHole = null, $scrumSprintId = null, $scrumVersionId = null, $kanbanId = null, $kanbanColumnId = null, $estimatedDuration = null, $duration = null, $changeStates = null, $hierarchyChangeMethod = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetail';
        $request = $this->putEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken, $title, $description, $assigneeId, $collaboratorIds, $issueTypeId, $issueStateId, $programId, $projectId, $milestoneId, $labelIds, $priority, $parentId, $branch, $planStartedAt, $deadline, $startedAt, $finishedAt, $securityHole, $scrumSprintId, $scrumVersionId, $kanbanId, $kanbanColumnId, $estimatedDuration, $duration, $changeStates, $hierarchyChangeMethod);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssuesIssueId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 任务标题 (optional)
     * @param  string $description 任务内容 (optional)
     * @param  int $assigneeId 负责人的 user id (optional)
     * @param  string $collaboratorIds 协作者的 user id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $issueTypeId 任务类型的 id (optional)
     * @param  int $issueStateId 任务状态的 id (optional)
     * @param  int $programId 关联项目的 id (optional)
     * @param  int $projectId 关联仓库的 id (optional)
     * @param  int $milestoneId 关联里程碑的 id (optional)
     * @param  string $labelIds 关联标签的 id，如有多个请用英文逗号分割。eg: 1,2,3 (optional)
     * @param  int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重) (optional)
     * @param  int $parentId 父级任务的 id (optional)
     * @param  string $branch 关联分支的名称 (optional)
     * @param  string $planStartedAt 计划开始日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $deadline 计划完成日期。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $startedAt 实际开始时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  string $finishedAt 实际完成时间。格式：yyyy-mm-ddTHH:MM:SS (optional)
     * @param  int $securityHole 是否是私有issue, 0:否，1:是 (optional)
     * @param  int $scrumSprintId 迭代ID (optional)
     * @param  int $scrumVersionId 版本ID (optional)
     * @param  int $kanbanId 看板ID (optional)
     * @param  int $kanbanColumnId 看板的栏ID (optional)
     * @param  float $estimatedDuration 预估工时(单位：小时， 支持两位小数) (optional)
     * @param  int $duration 预估工时。（单位：分钟） (optional)
     * @param  map[string,string] $changeStates 变更的状态 {source_id1: target_id1, source_id2: target_id2} (optional)
     * @param  string $hierarchyChangeMethod 选择的层级结构（relevance: 改为关联关系, independence: 取消父子关系） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssuesIssueIdRequest($enterpriseId, $issueId, $accessToken = null, $title = null, $description = null, $assigneeId = null, $collaboratorIds = null, $issueTypeId = null, $issueStateId = null, $programId = null, $projectId = null, $milestoneId = null, $labelIds = null, $priority = null, $parentId = null, $branch = null, $planStartedAt = null, $deadline = null, $startedAt = null, $finishedAt = null, $securityHole = null, $scrumSprintId = null, $scrumVersionId = null, $kanbanId = null, $kanbanColumnId = null, $estimatedDuration = null, $duration = null, $changeStates = null, $hierarchyChangeMethod = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssuesIssueId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling putEnterpriseIdIssuesIssueId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($collaboratorIds !== null) {
            $formParams['collaborator_ids'] = ObjectSerializer::toFormValue($collaboratorIds);
        }
        // form params
        if ($issueTypeId !== null) {
            $formParams['issue_type_id'] = ObjectSerializer::toFormValue($issueTypeId);
        }
        // form params
        if ($issueStateId !== null) {
            $formParams['issue_state_id'] = ObjectSerializer::toFormValue($issueStateId);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($projectId !== null) {
            $formParams['project_id'] = ObjectSerializer::toFormValue($projectId);
        }
        // form params
        if ($milestoneId !== null) {
            $formParams['milestone_id'] = ObjectSerializer::toFormValue($milestoneId);
        }
        // form params
        if ($labelIds !== null) {
            $formParams['label_ids'] = ObjectSerializer::toFormValue($labelIds);
        }
        // form params
        if ($priority !== null) {
            $formParams['priority'] = ObjectSerializer::toFormValue($priority);
        }
        // form params
        if ($parentId !== null) {
            $formParams['parent_id'] = ObjectSerializer::toFormValue($parentId);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($planStartedAt !== null) {
            $formParams['plan_started_at'] = ObjectSerializer::toFormValue($planStartedAt);
        }
        // form params
        if ($deadline !== null) {
            $formParams['deadline'] = ObjectSerializer::toFormValue($deadline);
        }
        // form params
        if ($startedAt !== null) {
            $formParams['started_at'] = ObjectSerializer::toFormValue($startedAt);
        }
        // form params
        if ($finishedAt !== null) {
            $formParams['finished_at'] = ObjectSerializer::toFormValue($finishedAt);
        }
        // form params
        if ($securityHole !== null) {
            $formParams['security_hole'] = ObjectSerializer::toFormValue($securityHole);
        }
        // form params
        if ($scrumSprintId !== null) {
            $formParams['scrum_sprint_id'] = ObjectSerializer::toFormValue($scrumSprintId);
        }
        // form params
        if ($scrumVersionId !== null) {
            $formParams['scrum_version_id'] = ObjectSerializer::toFormValue($scrumVersionId);
        }
        // form params
        if ($kanbanId !== null) {
            $formParams['kanban_id'] = ObjectSerializer::toFormValue($kanbanId);
        }
        // form params
        if ($kanbanColumnId !== null) {
            $formParams['kanban_column_id'] = ObjectSerializer::toFormValue($kanbanColumnId);
        }
        // form params
        if ($estimatedDuration !== null) {
            $formParams['estimated_duration'] = ObjectSerializer::toFormValue($estimatedDuration);
        }
        // form params
        if ($duration !== null) {
            $formParams['duration'] = ObjectSerializer::toFormValue($duration);
        }
        // form params
        if ($changeStates !== null) {
            $formParams['change_states'] = ObjectSerializer::toFormValue($changeStates);
        }
        // form params
        if ($hierarchyChangeMethod !== null) {
            $formParams['hierarchy_change_method'] = ObjectSerializer::toFormValue($hierarchyChangeMethod);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdNotesNoteId
     *
     * 修改任务下的评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  int $noteId noteId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueNote
     */
    public function putEnterpriseIdIssuesIssueIdNotesNoteId($enterpriseId, $issueId, $body, $noteId, $accessToken = null)
    {
        list($response) = $this->putEnterpriseIdIssuesIssueIdNotesNoteIdWithHttpInfo($enterpriseId, $issueId, $body, $noteId, $accessToken);
        return $response;
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdNotesNoteIdWithHttpInfo
     *
     * 修改任务下的评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  int $noteId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssuesIssueIdNotesNoteIdWithHttpInfo($enterpriseId, $issueId, $body, $noteId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueNote';
        $request = $this->putEnterpriseIdIssuesIssueIdNotesNoteIdRequest($enterpriseId, $issueId, $body, $noteId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdNotesNoteIdAsync
     *
     * 修改任务下的评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  int $noteId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssuesIssueIdNotesNoteIdAsync($enterpriseId, $issueId, $body, $noteId, $accessToken = null)
    {
        return $this->putEnterpriseIdIssuesIssueIdNotesNoteIdAsyncWithHttpInfo($enterpriseId, $issueId, $body, $noteId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdNotesNoteIdAsyncWithHttpInfo
     *
     * 修改任务下的评论
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  int $noteId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssuesIssueIdNotesNoteIdAsyncWithHttpInfo($enterpriseId, $issueId, $body, $noteId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueNote';
        $request = $this->putEnterpriseIdIssuesIssueIdNotesNoteIdRequest($enterpriseId, $issueId, $body, $noteId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssuesIssueIdNotesNoteId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  string $body 评论内容 (required)
     * @param  int $noteId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssuesIssueIdNotesNoteIdRequest($enterpriseId, $issueId, $body, $noteId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling putEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }
        // verify the required parameter 'noteId' is set
        if ($noteId === null || (is_array($noteId) && count($noteId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $noteId when calling putEnterpriseIdIssuesIssueIdNotesNoteId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/notes/{note_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($noteId !== null) {
            $resourcePath = str_replace(
                '{' . 'note_id' . '}',
                ObjectSerializer::toPathValue($noteId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId
     *
     * 更新任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\IssueDetailWithRelatedInfos
     */
    public function putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId($enterpriseId, $issueId, $linkIssueId, $accessToken = null, $refType = null, $direction = null, $resultType = null)
    {
        list($response) = $this->putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken, $refType, $direction, $resultType);
        return $response;
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdWithHttpInfo
     *
     * 更新任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\IssueDetailWithRelatedInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken = null, $refType = null, $direction = null, $resultType = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetailWithRelatedInfos';
        $request = $this->putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdRequest($enterpriseId, $issueId, $linkIssueId, $accessToken, $refType, $direction, $resultType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\IssueDetailWithRelatedInfos',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsync
     *
     * 更新任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsync($enterpriseId, $issueId, $linkIssueId, $accessToken = null, $refType = null, $direction = null, $resultType = null)
    {
        return $this->putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken, $refType, $direction, $resultType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsyncWithHttpInfo
     *
     * 更新任务的关联关系
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdAsyncWithHttpInfo($enterpriseId, $issueId, $linkIssueId, $accessToken = null, $refType = null, $direction = null, $resultType = null)
    {
        $returnType = '\GiteeEnterprise\Model\IssueDetailWithRelatedInfos';
        $request = $this->putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdRequest($enterpriseId, $issueId, $linkIssueId, $accessToken, $refType, $direction, $resultType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $issueId 任务 id (required)
     * @param  int $linkIssueId 需要关联的任务 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $refType 关联关系(normal, finish_to_finish, finish_to_start, start_to_start, start_to_finish) (optional)
     * @param  string $direction 关联关系的方向(none, pre, latter) (optional)
     * @param  string $resultType 返回结果类型：包括issue, dependence (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueIdRequest($enterpriseId, $issueId, $linkIssueId, $accessToken = null, $refType = null, $direction = null, $resultType = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
            );
        }
        // verify the required parameter 'issueId' is set
        if ($issueId === null || (is_array($issueId) && count($issueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issueId when calling putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
            );
        }
        // verify the required parameter 'linkIssueId' is set
        if ($linkIssueId === null || (is_array($linkIssueId) && count($linkIssueId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linkIssueId when calling putEnterpriseIdIssuesIssueIdRelatedIssueLinkIssueId'
            );
        }

        $resourcePath = '/{enterprise_id}/issues/{issue_id}/related_issue/{link_issue_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($issueId !== null) {
            $resourcePath = str_replace(
                '{' . 'issue_id' . '}',
                ObjectSerializer::toPathValue($issueId),
                $resourcePath
            );
        }
        // path params
        if ($linkIssueId !== null) {
            $resourcePath = str_replace(
                '{' . 'link_issue_id' . '}',
                ObjectSerializer::toPathValue($linkIssueId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($refType !== null) {
            $formParams['ref_type'] = ObjectSerializer::toFormValue($refType);
        }
        // form params
        if ($direction !== null) {
            $formParams['direction'] = ObjectSerializer::toFormValue($direction);
        }
        // form params
        if ($resultType !== null) {
            $formParams['result_type'] = ObjectSerializer::toFormValue($resultType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
