<?php
/**
 * MilestonesApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * MilestonesApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MilestonesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdMilestonesMilestoneId
     *
     * 删除里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdMilestonesMilestoneId($enterpriseId, $milestoneId, $accessToken = null)
    {
        $this->deleteEnterpriseIdMilestonesMilestoneIdWithHttpInfo($enterpriseId, $milestoneId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdMilestonesMilestoneIdWithHttpInfo
     *
     * 删除里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdMilestonesMilestoneIdWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdMilestonesMilestoneIdAsync
     *
     * 删除里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdMilestonesMilestoneIdAsync($enterpriseId, $milestoneId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo
     *
     * 删除里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdMilestonesMilestoneId'
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdMilestonesMilestoneId'
            );
        }
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null || (is_array($milestoneId) && count($milestoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $milestoneId when calling deleteEnterpriseIdMilestonesMilestoneId'
            );
        }

        $resourcePath = '/{enterprise_id}/milestones/{milestone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'milestone_id' . '}',
                ObjectSerializer::toPathValue($milestoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdMilestones
     *
     * 获取里程碑列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  string $state 状态，开启的:active，待开始:pending，进行中:processing，已关闭:closed，已逾期:overdued， 未过期：not_overdue (optional)
     * @param  string $assigneeIds 负责人id以,分隔的字符串 (optional)
     * @param  string $authorIds 创建者id以,分隔的字符串 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $sort 排序字段(title、created_at、start_date、due_date) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope 筛选当前用户参与的里程碑 (optional)
     * @param  bool $onlyComponentEnabled 是否只列出启用里程碑组件的项目下的里程碑 (optional)
     * @param  bool $dropboxGroup 是否需要按开启和关闭两个状态在下拉框内分组 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MilestoneList[]
     */
    public function getEnterpriseIdMilestones($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $state = null, $assigneeIds = null, $authorIds = null, $search = null, $sort = null, $direction = null, $scope = null, $onlyComponentEnabled = null, $dropboxGroup = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdMilestonesWithHttpInfo($enterpriseId, $accessToken, $programId, $projectId, $state, $assigneeIds, $authorIds, $search, $sort, $direction, $scope, $onlyComponentEnabled, $dropboxGroup, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdMilestonesWithHttpInfo
     *
     * 获取里程碑列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  string $state 状态，开启的:active，待开始:pending，进行中:processing，已关闭:closed，已逾期:overdued， 未过期：not_overdue (optional)
     * @param  string $assigneeIds 负责人id以,分隔的字符串 (optional)
     * @param  string $authorIds 创建者id以,分隔的字符串 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $sort 排序字段(title、created_at、start_date、due_date) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope 筛选当前用户参与的里程碑 (optional)
     * @param  bool $onlyComponentEnabled 是否只列出启用里程碑组件的项目下的里程碑 (optional)
     * @param  bool $dropboxGroup 是否需要按开启和关闭两个状态在下拉框内分组 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MilestoneList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdMilestonesWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $state = null, $assigneeIds = null, $authorIds = null, $search = null, $sort = null, $direction = null, $scope = null, $onlyComponentEnabled = null, $dropboxGroup = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneList[]';
        $request = $this->getEnterpriseIdMilestonesRequest($enterpriseId, $accessToken, $programId, $projectId, $state, $assigneeIds, $authorIds, $search, $sort, $direction, $scope, $onlyComponentEnabled, $dropboxGroup, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MilestoneList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdMilestonesAsync
     *
     * 获取里程碑列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  string $state 状态，开启的:active，待开始:pending，进行中:processing，已关闭:closed，已逾期:overdued， 未过期：not_overdue (optional)
     * @param  string $assigneeIds 负责人id以,分隔的字符串 (optional)
     * @param  string $authorIds 创建者id以,分隔的字符串 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $sort 排序字段(title、created_at、start_date、due_date) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope 筛选当前用户参与的里程碑 (optional)
     * @param  bool $onlyComponentEnabled 是否只列出启用里程碑组件的项目下的里程碑 (optional)
     * @param  bool $dropboxGroup 是否需要按开启和关闭两个状态在下拉框内分组 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMilestonesAsync($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $state = null, $assigneeIds = null, $authorIds = null, $search = null, $sort = null, $direction = null, $scope = null, $onlyComponentEnabled = null, $dropboxGroup = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdMilestonesAsyncWithHttpInfo($enterpriseId, $accessToken, $programId, $projectId, $state, $assigneeIds, $authorIds, $search, $sort, $direction, $scope, $onlyComponentEnabled, $dropboxGroup, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdMilestonesAsyncWithHttpInfo
     *
     * 获取里程碑列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  string $state 状态，开启的:active，待开始:pending，进行中:processing，已关闭:closed，已逾期:overdued， 未过期：not_overdue (optional)
     * @param  string $assigneeIds 负责人id以,分隔的字符串 (optional)
     * @param  string $authorIds 创建者id以,分隔的字符串 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $sort 排序字段(title、created_at、start_date、due_date) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope 筛选当前用户参与的里程碑 (optional)
     * @param  bool $onlyComponentEnabled 是否只列出启用里程碑组件的项目下的里程碑 (optional)
     * @param  bool $dropboxGroup 是否需要按开启和关闭两个状态在下拉框内分组 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMilestonesAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $state = null, $assigneeIds = null, $authorIds = null, $search = null, $sort = null, $direction = null, $scope = null, $onlyComponentEnabled = null, $dropboxGroup = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneList[]';
        $request = $this->getEnterpriseIdMilestonesRequest($enterpriseId, $accessToken, $programId, $projectId, $state, $assigneeIds, $authorIds, $search, $sort, $direction, $scope, $onlyComponentEnabled, $dropboxGroup, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdMilestones'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $programId 项目 id (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  string $state 状态，开启的:active，待开始:pending，进行中:processing，已关闭:closed，已逾期:overdued， 未过期：not_overdue (optional)
     * @param  string $assigneeIds 负责人id以,分隔的字符串 (optional)
     * @param  string $authorIds 创建者id以,分隔的字符串 (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $sort 排序字段(title、created_at、start_date、due_date) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope 筛选当前用户参与的里程碑 (optional)
     * @param  bool $onlyComponentEnabled 是否只列出启用里程碑组件的项目下的里程碑 (optional)
     * @param  bool $dropboxGroup 是否需要按开启和关闭两个状态在下拉框内分组 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdMilestonesRequest($enterpriseId, $accessToken = null, $programId = null, $projectId = null, $state = null, $assigneeIds = null, $authorIds = null, $search = null, $sort = null, $direction = null, $scope = null, $onlyComponentEnabled = null, $dropboxGroup = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdMilestones'
            );
        }

        $resourcePath = '/{enterprise_id}/milestones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($assigneeIds !== null) {
            $queryParams['assignee_ids'] = ObjectSerializer::toQueryValue($assigneeIds);
        }
        // query params
        if ($authorIds !== null) {
            $queryParams['author_ids'] = ObjectSerializer::toQueryValue($authorIds);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($onlyComponentEnabled !== null) {
            $queryParams['only_component_enabled'] = ObjectSerializer::toQueryValue($onlyComponentEnabled);
        }
        // query params
        if ($dropboxGroup !== null) {
            $queryParams['dropbox_group'] = ObjectSerializer::toQueryValue($dropboxGroup);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneId
     *
     * 获取里程碑信息
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MilestoneDetail
     */
    public function getEnterpriseIdMilestonesMilestoneId($enterpriseId, $milestoneId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdMilestonesMilestoneIdWithHttpInfo($enterpriseId, $milestoneId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdWithHttpInfo
     *
     * 获取里程碑信息
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MilestoneDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdMilestonesMilestoneIdWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneDetail';
        $request = $this->getEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MilestoneDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdAsync
     *
     * 获取里程碑信息
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMilestonesMilestoneIdAsync($enterpriseId, $milestoneId, $accessToken = null)
    {
        return $this->getEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo
     *
     * 获取里程碑信息
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneDetail';
        $request = $this->getEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdMilestonesMilestoneId'
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdMilestonesMilestoneId'
            );
        }
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null || (is_array($milestoneId) && count($milestoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $milestoneId when calling getEnterpriseIdMilestonesMilestoneId'
            );
        }

        $resourcePath = '/{enterprise_id}/milestones/{milestone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'milestone_id' . '}',
                ObjectSerializer::toPathValue($milestoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdParticipants
     *
     * 里程碑参与人列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\UserWithRemark
     */
    public function getEnterpriseIdMilestonesMilestoneIdParticipants($enterpriseId, $milestoneId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdMilestonesMilestoneIdParticipantsWithHttpInfo($enterpriseId, $milestoneId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdParticipantsWithHttpInfo
     *
     * 里程碑参与人列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\UserWithRemark, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdMilestonesMilestoneIdParticipantsWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\UserWithRemark';
        $request = $this->getEnterpriseIdMilestonesMilestoneIdParticipantsRequest($enterpriseId, $milestoneId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\UserWithRemark',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdParticipantsAsync
     *
     * 里程碑参与人列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMilestonesMilestoneIdParticipantsAsync($enterpriseId, $milestoneId, $accessToken = null)
    {
        return $this->getEnterpriseIdMilestonesMilestoneIdParticipantsAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdMilestonesMilestoneIdParticipantsAsyncWithHttpInfo
     *
     * 里程碑参与人列表
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdMilestonesMilestoneIdParticipantsAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\UserWithRemark';
        $request = $this->getEnterpriseIdMilestonesMilestoneIdParticipantsRequest($enterpriseId, $milestoneId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdMilestonesMilestoneIdParticipants'
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdMilestonesMilestoneIdParticipantsRequest($enterpriseId, $milestoneId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdMilestonesMilestoneIdParticipants'
            );
        }
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null || (is_array($milestoneId) && count($milestoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $milestoneId when calling getEnterpriseIdMilestonesMilestoneIdParticipants'
            );
        }

        $resourcePath = '/{enterprise_id}/milestones/{milestone_id}/participants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'milestone_id' . '}',
                ObjectSerializer::toPathValue($milestoneId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdMilestones
     *
     * 新建里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $title 里程碑标题 (required)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MilestoneDetail
     */
    public function postEnterpriseIdMilestones($enterpriseId, $title, $dueDate, $accessToken = null, $startDate = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null)
    {
        list($response) = $this->postEnterpriseIdMilestonesWithHttpInfo($enterpriseId, $title, $dueDate, $accessToken, $startDate, $description, $programId, $projectIds, $assigneeId);
        return $response;
    }

    /**
     * Operation postEnterpriseIdMilestonesWithHttpInfo
     *
     * 新建里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $title 里程碑标题 (required)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MilestoneDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdMilestonesWithHttpInfo($enterpriseId, $title, $dueDate, $accessToken = null, $startDate = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneDetail';
        $request = $this->postEnterpriseIdMilestonesRequest($enterpriseId, $title, $dueDate, $accessToken, $startDate, $description, $programId, $projectIds, $assigneeId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MilestoneDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdMilestonesAsync
     *
     * 新建里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $title 里程碑标题 (required)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdMilestonesAsync($enterpriseId, $title, $dueDate, $accessToken = null, $startDate = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null)
    {
        return $this->postEnterpriseIdMilestonesAsyncWithHttpInfo($enterpriseId, $title, $dueDate, $accessToken, $startDate, $description, $programId, $projectIds, $assigneeId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdMilestonesAsyncWithHttpInfo
     *
     * 新建里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $title 里程碑标题 (required)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdMilestonesAsyncWithHttpInfo($enterpriseId, $title, $dueDate, $accessToken = null, $startDate = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneDetail';
        $request = $this->postEnterpriseIdMilestonesRequest($enterpriseId, $title, $dueDate, $accessToken, $startDate, $description, $programId, $projectIds, $assigneeId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdMilestones'
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  string $title 里程碑标题 (required)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdMilestonesRequest($enterpriseId, $title, $dueDate, $accessToken = null, $startDate = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdMilestones'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling postEnterpriseIdMilestones'
            );
        }
        // verify the required parameter 'dueDate' is set
        if ($dueDate === null || (is_array($dueDate) && count($dueDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dueDate when calling postEnterpriseIdMilestones'
            );
        }

        $resourcePath = '/{enterprise_id}/milestones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($dueDate !== null) {
            $formParams['due_date'] = ObjectSerializer::toFormValue($dueDate);
        }
        // form params
        if ($startDate !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($startDate);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($projectIds !== null) {
            $formParams['project_ids'] = ObjectSerializer::toFormValue($projectIds);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdMilestonesMilestoneId
     *
     * 编辑里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 里程碑标题 (optional)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $stateEvent 关闭或重新开启里程碑 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     * @param  int $top 是否置顶 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\MilestoneDetail
     */
    public function putEnterpriseIdMilestonesMilestoneId($enterpriseId, $milestoneId, $accessToken = null, $title = null, $dueDate = null, $startDate = null, $stateEvent = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null, $top = null)
    {
        list($response) = $this->putEnterpriseIdMilestonesMilestoneIdWithHttpInfo($enterpriseId, $milestoneId, $accessToken, $title, $dueDate, $startDate, $stateEvent, $description, $programId, $projectIds, $assigneeId, $top);
        return $response;
    }

    /**
     * Operation putEnterpriseIdMilestonesMilestoneIdWithHttpInfo
     *
     * 编辑里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 里程碑标题 (optional)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $stateEvent 关闭或重新开启里程碑 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     * @param  int $top 是否置顶 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\MilestoneDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdMilestonesMilestoneIdWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null, $title = null, $dueDate = null, $startDate = null, $stateEvent = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null, $top = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneDetail';
        $request = $this->putEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken, $title, $dueDate, $startDate, $stateEvent, $description, $programId, $projectIds, $assigneeId, $top);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\MilestoneDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdMilestonesMilestoneIdAsync
     *
     * 编辑里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 里程碑标题 (optional)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $stateEvent 关闭或重新开启里程碑 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     * @param  int $top 是否置顶 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdMilestonesMilestoneIdAsync($enterpriseId, $milestoneId, $accessToken = null, $title = null, $dueDate = null, $startDate = null, $stateEvent = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null, $top = null)
    {
        return $this->putEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken, $title, $dueDate, $startDate, $stateEvent, $description, $programId, $projectIds, $assigneeId, $top)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo
     *
     * 编辑里程碑
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 里程碑标题 (optional)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $stateEvent 关闭或重新开启里程碑 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     * @param  int $top 是否置顶 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdMilestonesMilestoneIdAsyncWithHttpInfo($enterpriseId, $milestoneId, $accessToken = null, $title = null, $dueDate = null, $startDate = null, $stateEvent = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null, $top = null)
    {
        $returnType = '\GiteeEnterprise\Model\MilestoneDetail';
        $request = $this->putEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken, $title, $dueDate, $startDate, $stateEvent, $description, $programId, $projectIds, $assigneeId, $top);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdMilestonesMilestoneId'
     *
     * @param  int $enterpriseId 企业ID (required)
     * @param  int $milestoneId 里程碑ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 里程碑标题 (optional)
     * @param  string $dueDate 里程碑结束日期如：2020-08-13 (optional)
     * @param  string $startDate 里程碑开始日期如：2020-08-13 (optional)
     * @param  string $stateEvent 关闭或重新开启里程碑 (optional)
     * @param  string $description 里程碑描述 (optional)
     * @param  int $programId 关联项目ID (optional)
     * @param  string $projectIds 关联仓库ID, 以,分隔的字符串 (optional)
     * @param  int $assigneeId 里程碑负责人ID (optional)
     * @param  int $top 是否置顶 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdMilestonesMilestoneIdRequest($enterpriseId, $milestoneId, $accessToken = null, $title = null, $dueDate = null, $startDate = null, $stateEvent = null, $description = null, $programId = null, $projectIds = null, $assigneeId = null, $top = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdMilestonesMilestoneId'
            );
        }
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null || (is_array($milestoneId) && count($milestoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $milestoneId when calling putEnterpriseIdMilestonesMilestoneId'
            );
        }

        $resourcePath = '/{enterprise_id}/milestones/{milestone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'milestone_id' . '}',
                ObjectSerializer::toPathValue($milestoneId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($dueDate !== null) {
            $formParams['due_date'] = ObjectSerializer::toFormValue($dueDate);
        }
        // form params
        if ($startDate !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($startDate);
        }
        // form params
        if ($stateEvent !== null) {
            $formParams['state_event'] = ObjectSerializer::toFormValue($stateEvent);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($programId !== null) {
            $formParams['program_id'] = ObjectSerializer::toFormValue($programId);
        }
        // form params
        if ($projectIds !== null) {
            $formParams['project_ids'] = ObjectSerializer::toFormValue($projectIds);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($top !== null) {
            $formParams['top'] = ObjectSerializer::toFormValue($top);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
