<?php
/**
 * GroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee Enterprise SDK for PHP
 *
 * OpenAPI spec version: 0.1.343
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupId
     *
     * 删除企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdGroupsGroupId($enterpriseId, $groupId, $accessToken = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $this->deleteEnterpriseIdGroupsGroupIdWithHttpInfo($enterpriseId, $groupId, $accessToken, $password, $validateType, $smsCaptcha);
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdWithHttpInfo
     *
     * 删除企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdGroupsGroupIdWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken, $password, $validateType, $smsCaptcha);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdAsync
     *
     * 删除企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdGroupsGroupIdAsync($enterpriseId, $groupId, $accessToken = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        return $this->deleteEnterpriseIdGroupsGroupIdAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $password, $validateType, $smsCaptcha)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdAsyncWithHttpInfo
     *
     * 删除企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdGroupsGroupIdAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken, $password, $validateType, $smsCaptcha);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdGroupsGroupId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdGroupsGroupId'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling deleteEnterpriseIdGroupsGroupId'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($validateType !== null) {
            $queryParams['validate_type'] = ObjectSerializer::toQueryValue($validateType);
        }
        // query params
        if ($smsCaptcha !== null) {
            $queryParams['sms_captcha'] = ObjectSerializer::toQueryValue($smsCaptcha);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdMembers
     *
     * 移除团队成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id，多个成员id通过英文逗号分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdGroupsGroupIdMembers($enterpriseId, $groupId, $accessToken = null, $userIds = null)
    {
        $this->deleteEnterpriseIdGroupsGroupIdMembersWithHttpInfo($enterpriseId, $groupId, $accessToken, $userIds);
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdMembersWithHttpInfo
     *
     * 移除团队成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id，多个成员id通过英文逗号分隔 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdGroupsGroupIdMembersWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $userIds = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken, $userIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdMembersAsync
     *
     * 移除团队成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id，多个成员id通过英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdGroupsGroupIdMembersAsync($enterpriseId, $groupId, $accessToken = null, $userIds = null)
    {
        return $this->deleteEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $userIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo
     *
     * 移除团队成员
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id，多个成员id通过英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $userIds = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken, $userIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdGroupsGroupIdMembers'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id，多个成员id通过英文逗号分隔 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken = null, $userIds = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdGroupsGroupIdMembers'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling deleteEnterpriseIdGroupsGroupIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['user_ids'] = ObjectSerializer::toQueryValue($userIds);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdGroups
     *
     * 获取企业团队列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  int $programId 项目id (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $scope admin: 获取用户管理的团队 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Group[]
     */
    public function getEnterpriseIdGroups($enterpriseId, $accessToken = null, $qt = null, $sort = null, $programId = null, $direction = null, $search = null, $scope = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdGroupsWithHttpInfo($enterpriseId, $accessToken, $qt, $sort, $programId, $direction, $search, $scope, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdGroupsWithHttpInfo
     *
     * 获取企业团队列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  int $programId 项目id (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $scope admin: 获取用户管理的团队 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdGroupsWithHttpInfo($enterpriseId, $accessToken = null, $qt = null, $sort = null, $programId = null, $direction = null, $search = null, $scope = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group[]';
        $request = $this->getEnterpriseIdGroupsRequest($enterpriseId, $accessToken, $qt, $sort, $programId, $direction, $search, $scope, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Group[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdGroupsAsync
     *
     * 获取企业团队列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  int $programId 项目id (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $scope admin: 获取用户管理的团队 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsAsync($enterpriseId, $accessToken = null, $qt = null, $sort = null, $programId = null, $direction = null, $search = null, $scope = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdGroupsAsyncWithHttpInfo($enterpriseId, $accessToken, $qt, $sort, $programId, $direction, $search, $scope, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdGroupsAsyncWithHttpInfo
     *
     * 获取企业团队列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  int $programId 项目id (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $scope admin: 获取用户管理的团队 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $qt = null, $sort = null, $programId = null, $direction = null, $search = null, $scope = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group[]';
        $request = $this->getEnterpriseIdGroupsRequest($enterpriseId, $accessToken, $qt, $sort, $programId, $direction, $search, $scope, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdGroups'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间) (optional)
     * @param  int $programId 项目id (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $search 搜索字符串 (optional)
     * @param  string $scope admin: 获取用户管理的团队 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdGroupsRequest($enterpriseId, $accessToken = null, $qt = null, $sort = null, $programId = null, $direction = null, $search = null, $scope = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdGroups'
            );
        }

        $resourcePath = '/{enterprise_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupId
     *
     * 获取团队详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\GroupDetail
     */
    public function getEnterpriseIdGroupsGroupId($enterpriseId, $groupId, $accessToken = null, $qt = null)
    {
        list($response) = $this->getEnterpriseIdGroupsGroupIdWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt);
        return $response;
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdWithHttpInfo
     *
     * 获取团队详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\GroupDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdGroupsGroupIdWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\GroupDetail';
        $request = $this->getEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken, $qt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\GroupDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdAsync
     *
     * 获取团队详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdAsync($enterpriseId, $groupId, $accessToken = null, $qt = null)
    {
        return $this->getEnterpriseIdGroupsGroupIdAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdAsyncWithHttpInfo
     *
     * 获取团队详情
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null)
    {
        $returnType = '\GiteeEnterprise\Model\GroupDetail';
        $request = $this->getEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken, $qt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdGroupsGroupId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken = null, $qt = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdGroupsGroupId'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getEnterpriseIdGroupsGroupId'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdComplement
     *
     * 获取某一仓库不在本组织的仓库成员列表
     *
     * @param  int $projectId 仓库 ID (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  int $groupId groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectMemberList[]
     */
    public function getEnterpriseIdGroupsGroupIdComplement($projectId, $enterpriseId, $groupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdGroupsGroupIdComplementWithHttpInfo($projectId, $enterpriseId, $groupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdComplementWithHttpInfo
     *
     * 获取某一仓库不在本组织的仓库成员列表
     *
     * @param  int $projectId 仓库 ID (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectMemberList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdGroupsGroupIdComplementWithHttpInfo($projectId, $enterpriseId, $groupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectMemberList[]';
        $request = $this->getEnterpriseIdGroupsGroupIdComplementRequest($projectId, $enterpriseId, $groupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectMemberList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdComplementAsync
     *
     * 获取某一仓库不在本组织的仓库成员列表
     *
     * @param  int $projectId 仓库 ID (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdComplementAsync($projectId, $enterpriseId, $groupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdGroupsGroupIdComplementAsyncWithHttpInfo($projectId, $enterpriseId, $groupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdComplementAsyncWithHttpInfo
     *
     * 获取某一仓库不在本组织的仓库成员列表
     *
     * @param  int $projectId 仓库 ID (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdComplementAsyncWithHttpInfo($projectId, $enterpriseId, $groupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectMemberList[]';
        $request = $this->getEnterpriseIdGroupsGroupIdComplementRequest($projectId, $enterpriseId, $groupId, $accessToken, $search, $countWithoutSearch, $multiSearch, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdGroupsGroupIdComplement'
     *
     * @param  int $projectId 仓库 ID (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdGroupsGroupIdComplementRequest($projectId, $enterpriseId, $groupId, $accessToken = null, $search = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling getEnterpriseIdGroupsGroupIdComplement'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdGroupsGroupIdComplement'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getEnterpriseIdGroupsGroupIdComplement'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/complement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($countWithoutSearch !== null) {
            $queryParams['count_without_search'] = ObjectSerializer::toQueryValue($countWithoutSearch);
        }
        // query params
        if ($multiSearch !== null) {
            $queryParams['multi_search'] = ObjectSerializer::toQueryValue($multiSearch);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdGroupMembers
     *
     * 获取团队成员列表（根组形式）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\RootGroupMember[]
     */
    public function getEnterpriseIdGroupsGroupIdGroupMembers($enterpriseId, $groupId, $accessToken = null, $qt = null, $accessLevel = null, $search = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdGroupsGroupIdGroupMembersWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $accessLevel, $search, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdGroupMembersWithHttpInfo
     *
     * 获取团队成员列表（根组形式）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\RootGroupMember[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdGroupsGroupIdGroupMembersWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $accessLevel = null, $search = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\RootGroupMember[]';
        $request = $this->getEnterpriseIdGroupsGroupIdGroupMembersRequest($enterpriseId, $groupId, $accessToken, $qt, $accessLevel, $search, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\RootGroupMember[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdGroupMembersAsync
     *
     * 获取团队成员列表（根组形式）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdGroupMembersAsync($enterpriseId, $groupId, $accessToken = null, $qt = null, $accessLevel = null, $search = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdGroupsGroupIdGroupMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $accessLevel, $search, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdGroupMembersAsyncWithHttpInfo
     *
     * 获取团队成员列表（根组形式）
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdGroupMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $accessLevel = null, $search = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\RootGroupMember[]';
        $request = $this->getEnterpriseIdGroupsGroupIdGroupMembersRequest($enterpriseId, $groupId, $accessToken, $qt, $accessLevel, $search, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdGroupsGroupIdGroupMembers'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  int $accessLevel 报告者:15,观察者:25,开发者:30,管理员:40 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdGroupsGroupIdGroupMembersRequest($enterpriseId, $groupId, $accessToken = null, $qt = null, $accessLevel = null, $search = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdGroupsGroupIdGroupMembers'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getEnterpriseIdGroupsGroupIdGroupMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/group_members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($accessLevel !== null) {
            $queryParams['access_level'] = ObjectSerializer::toQueryValue($accessLevel);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdMembers
     *
     * 获取企业团队下的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope not_in: 获取不在本组织的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Member[]
     */
    public function getEnterpriseIdGroupsGroupIdMembers($enterpriseId, $groupId, $accessToken = null, $qt = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdGroupsGroupIdMembersWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdMembersWithHttpInfo
     *
     * 获取企业团队下的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope not_in: 获取不在本组织的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Member[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdGroupsGroupIdMembersWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Member[]';
        $request = $this->getEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken, $qt, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Member[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdMembersAsync
     *
     * 获取企业团队下的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope not_in: 获取不在本组织的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdMembersAsync($enterpriseId, $groupId, $accessToken = null, $qt = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo
     *
     * 获取企业团队下的成员列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope not_in: 获取不在本组织的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Member[]';
        $request = $this->getEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken, $qt, $search, $sort, $direction, $scope, $countWithoutSearch, $multiSearch, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdGroupsGroupIdMembers'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $scope not_in: 获取不在本组织的企业成员 (optional)
     * @param  bool $countWithoutSearch 是否返回不带搜索条件的数量 (optional)
     * @param  bool $multiSearch 是否开启多关键字筛选 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken = null, $qt = null, $search = null, $sort = null, $direction = null, $scope = null, $countWithoutSearch = null, $multiSearch = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdGroupsGroupIdMembers'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getEnterpriseIdGroupsGroupIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($countWithoutSearch !== null) {
            $queryParams['count_without_search'] = ObjectSerializer::toQueryValue($countWithoutSearch);
        }
        // query params
        if ($multiSearch !== null) {
            $queryParams['multi_search'] = ObjectSerializer::toQueryValue($multiSearch);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdProjects
     *
     * 企业团队下仓库列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 全部(all), 非fork的(not_fork), 只看fork的(only_fork), 我fork的(my_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 last_push_at: 最近push时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Project[]
     */
    public function getEnterpriseIdGroupsGroupIdProjects($enterpriseId, $groupId, $accessToken = null, $qt = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdGroupsGroupIdProjectsWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdProjectsWithHttpInfo
     *
     * 企业团队下仓库列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 全部(all), 非fork的(not_fork), 只看fork的(only_fork), 我fork的(my_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 last_push_at: 最近push时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdGroupsGroupIdProjectsWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Project[]';
        $request = $this->getEnterpriseIdGroupsGroupIdProjectsRequest($enterpriseId, $groupId, $accessToken, $qt, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Project[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdProjectsAsync
     *
     * 企业团队下仓库列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 全部(all), 非fork的(not_fork), 只看fork的(only_fork), 我fork的(my_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 last_push_at: 最近push时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdProjectsAsync($enterpriseId, $groupId, $accessToken = null, $qt = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdGroupsGroupIdProjectsAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdGroupsGroupIdProjectsAsyncWithHttpInfo
     *
     * 企业团队下仓库列表
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 全部(all), 非fork的(not_fork), 只看fork的(only_fork), 我fork的(my_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 last_push_at: 最近push时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdGroupsGroupIdProjectsAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Project[]';
        $request = $this->getEnterpriseIdGroupsGroupIdProjectsRequest($enterpriseId, $groupId, $accessToken, $qt, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdGroupsGroupIdProjects'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 全部(all), 非fork的(not_fork), 只看fork的(only_fork), 我fork的(my_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 last_push_at: 最近push时间) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdGroupsGroupIdProjectsRequest($enterpriseId, $groupId, $accessToken = null, $qt = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdGroupsGroupIdProjects'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getEnterpriseIdGroupsGroupIdProjects'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($qt !== null) {
            $queryParams['qt'] = ObjectSerializer::toQueryValue($qt);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($creatorId !== null) {
            $queryParams['creator_id'] = ObjectSerializer::toQueryValue($creatorId);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($forkFilter !== null) {
            $queryParams['fork_filter'] = ObjectSerializer::toQueryValue($forkFilter);
        }
        // query params
        if ($outsourced !== null) {
            $queryParams['outsourced'] = ObjectSerializer::toQueryValue($outsourced);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdGroups
     *
     * 新建企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $path 团队 path (required)
     * @param  string $name 名称 (required)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (required)
     * @param  int $ownerId 负责人 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 简介 (optional)
     * @param  string $userIds 成员ids, 逗号隔开：1,2,3 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Group
     */
    public function postEnterpriseIdGroups($enterpriseId, $path, $name, $public, $ownerId, $accessToken = null, $description = null, $userIds = null)
    {
        list($response) = $this->postEnterpriseIdGroupsWithHttpInfo($enterpriseId, $path, $name, $public, $ownerId, $accessToken, $description, $userIds);
        return $response;
    }

    /**
     * Operation postEnterpriseIdGroupsWithHttpInfo
     *
     * 新建企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $path 团队 path (required)
     * @param  string $name 名称 (required)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (required)
     * @param  int $ownerId 负责人 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 简介 (optional)
     * @param  string $userIds 成员ids, 逗号隔开：1,2,3 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdGroupsWithHttpInfo($enterpriseId, $path, $name, $public, $ownerId, $accessToken = null, $description = null, $userIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group';
        $request = $this->postEnterpriseIdGroupsRequest($enterpriseId, $path, $name, $public, $ownerId, $accessToken, $description, $userIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdGroupsAsync
     *
     * 新建企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $path 团队 path (required)
     * @param  string $name 名称 (required)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (required)
     * @param  int $ownerId 负责人 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 简介 (optional)
     * @param  string $userIds 成员ids, 逗号隔开：1,2,3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdGroupsAsync($enterpriseId, $path, $name, $public, $ownerId, $accessToken = null, $description = null, $userIds = null)
    {
        return $this->postEnterpriseIdGroupsAsyncWithHttpInfo($enterpriseId, $path, $name, $public, $ownerId, $accessToken, $description, $userIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdGroupsAsyncWithHttpInfo
     *
     * 新建企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $path 团队 path (required)
     * @param  string $name 名称 (required)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (required)
     * @param  int $ownerId 负责人 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 简介 (optional)
     * @param  string $userIds 成员ids, 逗号隔开：1,2,3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdGroupsAsyncWithHttpInfo($enterpriseId, $path, $name, $public, $ownerId, $accessToken = null, $description = null, $userIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group';
        $request = $this->postEnterpriseIdGroupsRequest($enterpriseId, $path, $name, $public, $ownerId, $accessToken, $description, $userIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdGroups'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $path 团队 path (required)
     * @param  string $name 名称 (required)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (required)
     * @param  int $ownerId 负责人 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 简介 (optional)
     * @param  string $userIds 成员ids, 逗号隔开：1,2,3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdGroupsRequest($enterpriseId, $path, $name, $public, $ownerId, $accessToken = null, $description = null, $userIds = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdGroups'
            );
        }
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling postEnterpriseIdGroups'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdGroups'
            );
        }
        // verify the required parameter 'public' is set
        if ($public === null || (is_array($public) && count($public) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public when calling postEnterpriseIdGroups'
            );
        }
        // verify the required parameter 'ownerId' is set
        if ($ownerId === null || (is_array($ownerId) && count($ownerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ownerId when calling postEnterpriseIdGroups'
            );
        }

        $resourcePath = '/{enterprise_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($public !== null) {
            $formParams['public'] = ObjectSerializer::toFormValue($public);
        }
        // form params
        if ($ownerId !== null) {
            $formParams['owner_id'] = ObjectSerializer::toFormValue($ownerId);
        }
        // form params
        if ($userIds !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($userIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdGroupsGroupIdMembers
     *
     * 添加团队成员
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $masterIds 管理员 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $developerIds 开发者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $viewerIds 观察者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $reporterIds 报告者 ID 列表, 多个使用英文 , 隔开 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\InviteGroupMember[]
     */
    public function postEnterpriseIdGroupsGroupIdMembers($enterpriseId, $groupId, $accessToken = null, $qt = null, $masterIds = null, $developerIds = null, $viewerIds = null, $reporterIds = null)
    {
        list($response) = $this->postEnterpriseIdGroupsGroupIdMembersWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $masterIds, $developerIds, $viewerIds, $reporterIds);
        return $response;
    }

    /**
     * Operation postEnterpriseIdGroupsGroupIdMembersWithHttpInfo
     *
     * 添加团队成员
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $masterIds 管理员 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $developerIds 开发者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $viewerIds 观察者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $reporterIds 报告者 ID 列表, 多个使用英文 , 隔开 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\InviteGroupMember[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdGroupsGroupIdMembersWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $masterIds = null, $developerIds = null, $viewerIds = null, $reporterIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\InviteGroupMember[]';
        $request = $this->postEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken, $qt, $masterIds, $developerIds, $viewerIds, $reporterIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\InviteGroupMember[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdGroupsGroupIdMembersAsync
     *
     * 添加团队成员
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $masterIds 管理员 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $developerIds 开发者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $viewerIds 观察者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $reporterIds 报告者 ID 列表, 多个使用英文 , 隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdGroupsGroupIdMembersAsync($enterpriseId, $groupId, $accessToken = null, $qt = null, $masterIds = null, $developerIds = null, $viewerIds = null, $reporterIds = null)
    {
        return $this->postEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $qt, $masterIds, $developerIds, $viewerIds, $reporterIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo
     *
     * 添加团队成员
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $masterIds 管理员 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $developerIds 开发者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $viewerIds 观察者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $reporterIds 报告者 ID 列表, 多个使用英文 , 隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdGroupsGroupIdMembersAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $qt = null, $masterIds = null, $developerIds = null, $viewerIds = null, $reporterIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\InviteGroupMember[]';
        $request = $this->postEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken, $qt, $masterIds, $developerIds, $viewerIds, $reporterIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdGroupsGroupIdMembers'
     *
     * @param  int $enterpriseId 企业id (required)
     * @param  string $groupId 团队id/path (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $qt path类型（查询参数为path）, 空则表示查询参数为id (optional)
     * @param  string $masterIds 管理员 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $developerIds 开发者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $viewerIds 观察者 ID 列表, 多个使用英文 , 隔开 (optional)
     * @param  string $reporterIds 报告者 ID 列表, 多个使用英文 , 隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdGroupsGroupIdMembersRequest($enterpriseId, $groupId, $accessToken = null, $qt = null, $masterIds = null, $developerIds = null, $viewerIds = null, $reporterIds = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdGroupsGroupIdMembers'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling postEnterpriseIdGroupsGroupIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($qt !== null) {
            $formParams['qt'] = ObjectSerializer::toFormValue($qt);
        }
        // form params
        if ($masterIds !== null) {
            $formParams['master_ids'] = ObjectSerializer::toFormValue($masterIds);
        }
        // form params
        if ($developerIds !== null) {
            $formParams['developer_ids'] = ObjectSerializer::toFormValue($developerIds);
        }
        // form params
        if ($viewerIds !== null) {
            $formParams['viewer_ids'] = ObjectSerializer::toFormValue($viewerIds);
        }
        // form params
        if ($reporterIds !== null) {
            $formParams['reporter_ids'] = ObjectSerializer::toFormValue($reporterIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdGroupsGroupId
     *
     * 更新企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (optional)
     * @param  int $ownerId 负责人 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Group
     */
    public function putEnterpriseIdGroupsGroupId($enterpriseId, $groupId, $accessToken = null, $userIds = null, $name = null, $description = null, $public = null, $ownerId = null)
    {
        list($response) = $this->putEnterpriseIdGroupsGroupIdWithHttpInfo($enterpriseId, $groupId, $accessToken, $userIds, $name, $description, $public, $ownerId);
        return $response;
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdWithHttpInfo
     *
     * 更新企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (optional)
     * @param  int $ownerId 负责人 id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdGroupsGroupIdWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $userIds = null, $name = null, $description = null, $public = null, $ownerId = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group';
        $request = $this->putEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken, $userIds, $name, $description, $public, $ownerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdAsync
     *
     * 更新企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (optional)
     * @param  int $ownerId 负责人 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdGroupsGroupIdAsync($enterpriseId, $groupId, $accessToken = null, $userIds = null, $name = null, $description = null, $public = null, $ownerId = null)
    {
        return $this->putEnterpriseIdGroupsGroupIdAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken, $userIds, $name, $description, $public, $ownerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdAsyncWithHttpInfo
     *
     * 更新企业团队
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (optional)
     * @param  int $ownerId 负责人 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdGroupsGroupIdAsyncWithHttpInfo($enterpriseId, $groupId, $accessToken = null, $userIds = null, $name = null, $description = null, $public = null, $ownerId = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group';
        $request = $this->putEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken, $userIds, $name, $description, $public, $ownerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdGroupsGroupId'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  int $groupId 团队 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员 id (optional)
     * @param  string $name 名称 (optional)
     * @param  string $description 简介 (optional)
     * @param  int $public 类型, 0:内部，1:公开，2:外包 (optional)
     * @param  int $ownerId 负责人 id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdGroupsGroupIdRequest($enterpriseId, $groupId, $accessToken = null, $userIds = null, $name = null, $description = null, $public = null, $ownerId = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdGroupsGroupId'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling putEnterpriseIdGroupsGroupId'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($userIds !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($userIds);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($public !== null) {
            $formParams['public'] = ObjectSerializer::toFormValue($public);
        }
        // form params
        if ($ownerId !== null) {
            $formParams['owner_id'] = ObjectSerializer::toFormValue($ownerId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdMembersAccessLevel
     *
     * 变更团队成员角色
     *
     * @param  string $userIds 用户 ID (required)
     * @param  int $accessLevel 团队成员角色 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  int $groupId groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\GroupMember[]
     */
    public function putEnterpriseIdGroupsGroupIdMembersAccessLevel($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken = null)
    {
        list($response) = $this->putEnterpriseIdGroupsGroupIdMembersAccessLevelWithHttpInfo($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken);
        return $response;
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdMembersAccessLevelWithHttpInfo
     *
     * 变更团队成员角色
     *
     * @param  string $userIds 用户 ID (required)
     * @param  int $accessLevel 团队成员角色 (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\GroupMember[], HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdGroupsGroupIdMembersAccessLevelWithHttpInfo($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\GroupMember[]';
        $request = $this->putEnterpriseIdGroupsGroupIdMembersAccessLevelRequest($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\GroupMember[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdMembersAccessLevelAsync
     *
     * 变更团队成员角色
     *
     * @param  string $userIds 用户 ID (required)
     * @param  int $accessLevel 团队成员角色 (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdGroupsGroupIdMembersAccessLevelAsync($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken = null)
    {
        return $this->putEnterpriseIdGroupsGroupIdMembersAccessLevelAsyncWithHttpInfo($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdGroupsGroupIdMembersAccessLevelAsyncWithHttpInfo
     *
     * 变更团队成员角色
     *
     * @param  string $userIds 用户 ID (required)
     * @param  int $accessLevel 团队成员角色 (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdGroupsGroupIdMembersAccessLevelAsyncWithHttpInfo($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\GroupMember[]';
        $request = $this->putEnterpriseIdGroupsGroupIdMembersAccessLevelRequest($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdGroupsGroupIdMembersAccessLevel'
     *
     * @param  string $userIds 用户 ID (required)
     * @param  int $accessLevel 团队成员角色 (required)
     * @param  int $enterpriseId (required)
     * @param  int $groupId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdGroupsGroupIdMembersAccessLevelRequest($userIds, $accessLevel, $enterpriseId, $groupId, $accessToken = null)
    {
        // verify the required parameter 'userIds' is set
        if ($userIds === null || (is_array($userIds) && count($userIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userIds when calling putEnterpriseIdGroupsGroupIdMembersAccessLevel'
            );
        }
        // verify the required parameter 'accessLevel' is set
        if ($accessLevel === null || (is_array($accessLevel) && count($accessLevel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accessLevel when calling putEnterpriseIdGroupsGroupIdMembersAccessLevel'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdGroupsGroupIdMembersAccessLevel'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling putEnterpriseIdGroupsGroupIdMembersAccessLevel'
            );
        }

        $resourcePath = '/{enterprise_id}/groups/{group_id}/members/access_level';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($userIds !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($userIds);
        }
        // form params
        if ($accessLevel !== null) {
            $formParams['access_level'] = ObjectSerializer::toFormValue($accessLevel);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
