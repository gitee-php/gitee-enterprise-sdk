<?php
/**
 * ProgramsApi
 * PHP version 5
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.334
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GiteeEnterprise\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GiteeEnterprise\ApiException;
use GiteeEnterprise\Configuration;
use GiteeEnterprise\HeaderSelector;
use GiteeEnterprise\ObjectSerializer;

/**
 * ProgramsApi Class Doc Comment
 *
 * @category Class
 * @package  GiteeEnterprise
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramId
     *
     * 删除项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $deleteMilestones 是否删除里程碑 (optional)
     * @param  bool $deleteIssues 是否删除任务 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProgramsProgramId($programId, $enterpriseId, $accessToken = null, $deleteMilestones = null, $deleteIssues = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $this->deleteEnterpriseIdProgramsProgramIdWithHttpInfo($programId, $enterpriseId, $accessToken, $deleteMilestones, $deleteIssues, $password, $validateType, $smsCaptcha);
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdWithHttpInfo
     *
     * 删除项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $deleteMilestones 是否删除里程碑 (optional)
     * @param  bool $deleteIssues 是否删除任务 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProgramsProgramIdWithHttpInfo($programId, $enterpriseId, $accessToken = null, $deleteMilestones = null, $deleteIssues = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdRequest($programId, $enterpriseId, $accessToken, $deleteMilestones, $deleteIssues, $password, $validateType, $smsCaptcha);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdAsync
     *
     * 删除项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $deleteMilestones 是否删除里程碑 (optional)
     * @param  bool $deleteIssues 是否删除任务 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdAsync($programId, $enterpriseId, $accessToken = null, $deleteMilestones = null, $deleteIssues = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        return $this->deleteEnterpriseIdProgramsProgramIdAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $deleteMilestones, $deleteIssues, $password, $validateType, $smsCaptcha)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdAsyncWithHttpInfo
     *
     * 删除项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $deleteMilestones 是否删除里程碑 (optional)
     * @param  bool $deleteIssues 是否删除任务 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $deleteMilestones = null, $deleteIssues = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdRequest($programId, $enterpriseId, $accessToken, $deleteMilestones, $deleteIssues, $password, $validateType, $smsCaptcha);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProgramsProgramId'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $deleteMilestones 是否删除里程碑 (optional)
     * @param  bool $deleteIssues 是否删除任务 (optional)
     * @param  string $password 用户密码 (optional)
     * @param  string $validateType 验证方式 (optional)
     * @param  string $smsCaptcha 短信验证码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProgramsProgramIdRequest($programId, $enterpriseId, $accessToken = null, $deleteMilestones = null, $deleteIssues = null, $password = null, $validateType = null, $smsCaptcha = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling deleteEnterpriseIdProgramsProgramId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProgramsProgramId'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($deleteMilestones !== null) {
            $queryParams['delete_milestones'] = ObjectSerializer::toQueryValue($deleteMilestones);
        }
        // query params
        if ($deleteIssues !== null) {
            $queryParams['delete_issues'] = ObjectSerializer::toQueryValue($deleteIssues);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($validateType !== null) {
            $queryParams['validate_type'] = ObjectSerializer::toQueryValue($validateType);
        }
        // query params
        if ($smsCaptcha !== null) {
            $queryParams['sms_captcha'] = ObjectSerializer::toQueryValue($smsCaptcha);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdGroupsGroupId
     *
     * 移出项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $groupId 团队 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProgramsProgramIdGroupsGroupId($programId, $groupId, $enterpriseId, $accessToken = null)
    {
        $this->deleteEnterpriseIdProgramsProgramIdGroupsGroupIdWithHttpInfo($programId, $groupId, $enterpriseId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdGroupsGroupIdWithHttpInfo
     *
     * 移出项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $groupId 团队 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProgramsProgramIdGroupsGroupIdWithHttpInfo($programId, $groupId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdGroupsGroupIdRequest($programId, $groupId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdGroupsGroupIdAsync
     *
     * 移出项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $groupId 团队 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdGroupsGroupIdAsync($programId, $groupId, $enterpriseId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdProgramsProgramIdGroupsGroupIdAsyncWithHttpInfo($programId, $groupId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdGroupsGroupIdAsyncWithHttpInfo
     *
     * 移出项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $groupId 团队 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdGroupsGroupIdAsyncWithHttpInfo($programId, $groupId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdGroupsGroupIdRequest($programId, $groupId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProgramsProgramIdGroupsGroupId'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $groupId 团队 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProgramsProgramIdGroupsGroupIdRequest($programId, $groupId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling deleteEnterpriseIdProgramsProgramIdGroupsGroupId'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling deleteEnterpriseIdProgramsProgramIdGroupsGroupId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProgramsProgramIdGroupsGroupId'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/groups/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdMembersMemberUserId
     *
     * 移出项目下成员
     *
     * @param  int $programId 项目 id (required)
     * @param  int $memberUserId 成员id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProgramsProgramIdMembersMemberUserId($programId, $memberUserId, $enterpriseId, $accessToken = null)
    {
        $this->deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdWithHttpInfo($programId, $memberUserId, $enterpriseId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdWithHttpInfo
     *
     * 移出项目下成员
     *
     * @param  int $programId 项目 id (required)
     * @param  int $memberUserId 成员id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdWithHttpInfo($programId, $memberUserId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdRequest($programId, $memberUserId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdAsync
     *
     * 移出项目下成员
     *
     * @param  int $programId 项目 id (required)
     * @param  int $memberUserId 成员id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdAsync($programId, $memberUserId, $enterpriseId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdAsyncWithHttpInfo($programId, $memberUserId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdAsyncWithHttpInfo
     *
     * 移出项目下成员
     *
     * @param  int $programId 项目 id (required)
     * @param  int $memberUserId 成员id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdAsyncWithHttpInfo($programId, $memberUserId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdRequest($programId, $memberUserId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProgramsProgramIdMembersMemberUserId'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $memberUserId 成员id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProgramsProgramIdMembersMemberUserIdRequest($programId, $memberUserId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling deleteEnterpriseIdProgramsProgramIdMembersMemberUserId'
            );
        }
        // verify the required parameter 'memberUserId' is set
        if ($memberUserId === null || (is_array($memberUserId) && count($memberUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberUserId when calling deleteEnterpriseIdProgramsProgramIdMembersMemberUserId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProgramsProgramIdMembersMemberUserId'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/members/{member_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($memberUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'member_user_id' . '}',
                ObjectSerializer::toPathValue($memberUserId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdProjectsProjectId
     *
     * 移出项目下仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  int $projectId 仓库id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEnterpriseIdProgramsProgramIdProjectsProjectId($programId, $projectId, $enterpriseId, $accessToken = null)
    {
        $this->deleteEnterpriseIdProgramsProgramIdProjectsProjectIdWithHttpInfo($programId, $projectId, $enterpriseId, $accessToken);
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdProjectsProjectIdWithHttpInfo
     *
     * 移出项目下仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  int $projectId 仓库id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnterpriseIdProgramsProgramIdProjectsProjectIdWithHttpInfo($programId, $projectId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdProjectsProjectIdRequest($programId, $projectId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdProjectsProjectIdAsync
     *
     * 移出项目下仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  int $projectId 仓库id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdProjectsProjectIdAsync($programId, $projectId, $enterpriseId, $accessToken = null)
    {
        return $this->deleteEnterpriseIdProgramsProgramIdProjectsProjectIdAsyncWithHttpInfo($programId, $projectId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnterpriseIdProgramsProgramIdProjectsProjectIdAsyncWithHttpInfo
     *
     * 移出项目下仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  int $projectId 仓库id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnterpriseIdProgramsProgramIdProjectsProjectIdAsyncWithHttpInfo($programId, $projectId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteEnterpriseIdProgramsProgramIdProjectsProjectIdRequest($programId, $projectId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnterpriseIdProgramsProgramIdProjectsProjectId'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $projectId 仓库id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnterpriseIdProgramsProgramIdProjectsProjectIdRequest($programId, $projectId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling deleteEnterpriseIdProgramsProgramIdProjectsProjectId'
            );
        }
        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling deleteEnterpriseIdProgramsProgramIdProjectsProjectId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling deleteEnterpriseIdProgramsProgramIdProjectsProjectId'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/projects/{project_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdPrograms
     *
     * 获取项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $type 筛选不同类型的项目列表。我参与的: joined; 我负责的: assigned; 我创建的: created; 我星标的: only_star (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 users_count: 成员数 projects_count: 仓库数 issues_count: 任务数 accessed_at: 访问时间 name: 项目名称) (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     * @param  string $category 项目类别（all: 所有，common: 普通，kanban: 看板）, 支持多种类型，以,分隔，如：common,kanban (optional)
     * @param  string $assigneeIds 项目负责人 ID，多个负责人使用英文 , 隔开 (optional)
     * @param  int $issueTypeId 任务类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramList[]
     */
    public function getEnterpriseIdPrograms($enterpriseId, $accessToken = null, $type = null, $sort = null, $priorityTopped = null, $direction = null, $status = null, $category = null, $assigneeIds = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProgramsWithHttpInfo($enterpriseId, $accessToken, $type, $sort, $priorityTopped, $direction, $status, $category, $assigneeIds, $issueTypeId, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsWithHttpInfo
     *
     * 获取项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $type 筛选不同类型的项目列表。我参与的: joined; 我负责的: assigned; 我创建的: created; 我星标的: only_star (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 users_count: 成员数 projects_count: 仓库数 issues_count: 任务数 accessed_at: 访问时间 name: 项目名称) (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     * @param  string $category 项目类别（all: 所有，common: 普通，kanban: 看板）, 支持多种类型，以,分隔，如：common,kanban (optional)
     * @param  string $assigneeIds 项目负责人 ID，多个负责人使用英文 , 隔开 (optional)
     * @param  int $issueTypeId 任务类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsWithHttpInfo($enterpriseId, $accessToken = null, $type = null, $sort = null, $priorityTopped = null, $direction = null, $status = null, $category = null, $assigneeIds = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramList[]';
        $request = $this->getEnterpriseIdProgramsRequest($enterpriseId, $accessToken, $type, $sort, $priorityTopped, $direction, $status, $category, $assigneeIds, $issueTypeId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsAsync
     *
     * 获取项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $type 筛选不同类型的项目列表。我参与的: joined; 我负责的: assigned; 我创建的: created; 我星标的: only_star (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 users_count: 成员数 projects_count: 仓库数 issues_count: 任务数 accessed_at: 访问时间 name: 项目名称) (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     * @param  string $category 项目类别（all: 所有，common: 普通，kanban: 看板）, 支持多种类型，以,分隔，如：common,kanban (optional)
     * @param  string $assigneeIds 项目负责人 ID，多个负责人使用英文 , 隔开 (optional)
     * @param  int $issueTypeId 任务类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsAsync($enterpriseId, $accessToken = null, $type = null, $sort = null, $priorityTopped = null, $direction = null, $status = null, $category = null, $assigneeIds = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProgramsAsyncWithHttpInfo($enterpriseId, $accessToken, $type, $sort, $priorityTopped, $direction, $status, $category, $assigneeIds, $issueTypeId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsAsyncWithHttpInfo
     *
     * 获取项目列表
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $type 筛选不同类型的项目列表。我参与的: joined; 我负责的: assigned; 我创建的: created; 我星标的: only_star (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 users_count: 成员数 projects_count: 仓库数 issues_count: 任务数 accessed_at: 访问时间 name: 项目名称) (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     * @param  string $category 项目类别（all: 所有，common: 普通，kanban: 看板）, 支持多种类型，以,分隔，如：common,kanban (optional)
     * @param  string $assigneeIds 项目负责人 ID，多个负责人使用英文 , 隔开 (optional)
     * @param  int $issueTypeId 任务类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsAsyncWithHttpInfo($enterpriseId, $accessToken = null, $type = null, $sort = null, $priorityTopped = null, $direction = null, $status = null, $category = null, $assigneeIds = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramList[]';
        $request = $this->getEnterpriseIdProgramsRequest($enterpriseId, $accessToken, $type, $sort, $priorityTopped, $direction, $status, $category, $assigneeIds, $issueTypeId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdPrograms'
     *
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $type 筛选不同类型的项目列表。我参与的: joined; 我负责的: assigned; 我创建的: created; 我星标的: only_star (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 updated_at: 更新时间 users_count: 成员数 projects_count: 仓库数 issues_count: 任务数 accessed_at: 访问时间 name: 项目名称) (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     * @param  string $category 项目类别（all: 所有，common: 普通，kanban: 看板）, 支持多种类型，以,分隔，如：common,kanban (optional)
     * @param  string $assigneeIds 项目负责人 ID，多个负责人使用英文 , 隔开 (optional)
     * @param  int $issueTypeId 任务类型 ID (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsRequest($enterpriseId, $accessToken = null, $type = null, $sort = null, $priorityTopped = null, $direction = null, $status = null, $category = null, $assigneeIds = null, $issueTypeId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($priorityTopped !== null) {
            $queryParams['priority_topped'] = ObjectSerializer::toQueryValue($priorityTopped);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($assigneeIds !== null) {
            $queryParams['assignee_ids'] = ObjectSerializer::toQueryValue($assigneeIds);
        }
        // query params
        if ($issueTypeId !== null) {
            $queryParams['issue_type_id'] = ObjectSerializer::toQueryValue($issueTypeId);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsMine
     *
     * 获取用户最近浏览的项目集合
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programIds 项目的 id 列表，如有多个用逗号分割。eg: 1,2,3 (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramList[]
     */
    public function getEnterpriseIdProgramsMine($enterpriseId, $accessToken = null, $programIds = null, $status = null)
    {
        list($response) = $this->getEnterpriseIdProgramsMineWithHttpInfo($enterpriseId, $accessToken, $programIds, $status);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsMineWithHttpInfo
     *
     * 获取用户最近浏览的项目集合
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programIds 项目的 id 列表，如有多个用逗号分割。eg: 1,2,3 (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsMineWithHttpInfo($enterpriseId, $accessToken = null, $programIds = null, $status = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramList[]';
        $request = $this->getEnterpriseIdProgramsMineRequest($enterpriseId, $accessToken, $programIds, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsMineAsync
     *
     * 获取用户最近浏览的项目集合
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programIds 项目的 id 列表，如有多个用逗号分割。eg: 1,2,3 (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsMineAsync($enterpriseId, $accessToken = null, $programIds = null, $status = null)
    {
        return $this->getEnterpriseIdProgramsMineAsyncWithHttpInfo($enterpriseId, $accessToken, $programIds, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsMineAsyncWithHttpInfo
     *
     * 获取用户最近浏览的项目集合
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programIds 项目的 id 列表，如有多个用逗号分割。eg: 1,2,3 (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsMineAsyncWithHttpInfo($enterpriseId, $accessToken = null, $programIds = null, $status = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramList[]';
        $request = $this->getEnterpriseIdProgramsMineRequest($enterpriseId, $accessToken, $programIds, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsMine'
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $programIds 项目的 id 列表，如有多个用逗号分割。eg: 1,2,3 (optional)
     * @param  string $status 项目状态（0:开始 1:暂停 2:关闭）, 逗号分隔,如: 0,1 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsMineRequest($enterpriseId, $accessToken = null, $programIds = null, $status = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsMine'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/mine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($programIds !== null) {
            $queryParams['program_ids'] = ObjectSerializer::toQueryValue($programIds);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramId
     *
     * 获取项目详情
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramWithCollection[]
     */
    public function getEnterpriseIdProgramsProgramId($programId, $enterpriseId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdWithHttpInfo($programId, $enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdWithHttpInfo
     *
     * 获取项目详情
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramWithCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramWithCollection[]';
        $request = $this->getEnterpriseIdProgramsProgramIdRequest($programId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramWithCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdAsync
     *
     * 获取项目详情
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdAsync($programId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdAsyncWithHttpInfo($programId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdAsyncWithHttpInfo
     *
     * 获取项目详情
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramWithCollection[]';
        $request = $this->getEnterpriseIdProgramsProgramIdRequest($programId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramId'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdRequest($programId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramId'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdComponents
     *
     * 获取项目组件信息
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramComponent[]
     */
    public function getEnterpriseIdProgramsProgramIdComponents($programId, $enterpriseId, $accessToken = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdComponentsWithHttpInfo($programId, $enterpriseId, $accessToken);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdComponentsWithHttpInfo
     *
     * 获取项目组件信息
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramComponent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdComponentsWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramComponent[]';
        $request = $this->getEnterpriseIdProgramsProgramIdComponentsRequest($programId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramComponent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdComponentsAsync
     *
     * 获取项目组件信息
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdComponentsAsync($programId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdComponentsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdComponentsAsyncWithHttpInfo
     *
     * 获取项目组件信息
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdComponentsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramComponent[]';
        $request = $this->getEnterpriseIdProgramsProgramIdComponentsRequest($programId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdComponents'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdComponentsRequest($programId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdComponents'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdComponents'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdEvents
     *
     * 获取项目下动态列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $scope 项目范围：所有，仓库，任务，外部，我的 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Event[]
     */
    public function getEnterpriseIdProgramsProgramIdEvents($programId, $enterpriseId, $accessToken = null, $startDate = null, $endDate = null, $scope = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdEventsWithHttpInfo($programId, $enterpriseId, $accessToken, $startDate, $endDate, $scope, $page, $perPage, $prevId, $limit);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdEventsWithHttpInfo
     *
     * 获取项目下动态列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $scope 项目范围：所有，仓库，任务，外部，我的 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdEventsWithHttpInfo($programId, $enterpriseId, $accessToken = null, $startDate = null, $endDate = null, $scope = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        $returnType = '\GiteeEnterprise\Model\Event[]';
        $request = $this->getEnterpriseIdProgramsProgramIdEventsRequest($programId, $enterpriseId, $accessToken, $startDate, $endDate, $scope, $page, $perPage, $prevId, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdEventsAsync
     *
     * 获取项目下动态列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $scope 项目范围：所有，仓库，任务，外部，我的 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdEventsAsync($programId, $enterpriseId, $accessToken = null, $startDate = null, $endDate = null, $scope = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdEventsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $startDate, $endDate, $scope, $page, $perPage, $prevId, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdEventsAsyncWithHttpInfo
     *
     * 获取项目下动态列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $scope 项目范围：所有，仓库，任务，外部，我的 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdEventsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $startDate = null, $endDate = null, $scope = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        $returnType = '\GiteeEnterprise\Model\Event[]';
        $request = $this->getEnterpriseIdProgramsProgramIdEventsRequest($programId, $enterpriseId, $accessToken, $startDate, $endDate, $scope, $page, $perPage, $prevId, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdEvents'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业id (https://gitee.com/api/v8/swagger#/getList 的返回值的 id) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $startDate 查询的起始时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $endDate 查询的结束时间。(格式：yyyy-mm-dd) (optional)
     * @param  string $scope 项目范围：所有，仓库，任务，外部，我的 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     * @param  int $prevId 上一次动态列表中最小动态 ID (返回列表不包含该ID记录) (optional)
     * @param  int $limit 每次获取动态的条数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdEventsRequest($programId, $enterpriseId, $accessToken = null, $startDate = null, $endDate = null, $scope = null, $page = '1', $perPage = null, $prevId = null, $limit = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdEvents'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdEvents'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($startDate !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($prevId !== null) {
            $queryParams['prev_id'] = ObjectSerializer::toQueryValue($prevId);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdGroups
     *
     * 获取项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Group[]
     */
    public function getEnterpriseIdProgramsProgramIdGroups($programId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdGroupsWithHttpInfo($programId, $enterpriseId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdGroupsWithHttpInfo
     *
     * 获取项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdGroupsWithHttpInfo($programId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group[]';
        $request = $this->getEnterpriseIdProgramsProgramIdGroupsRequest($programId, $enterpriseId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Group[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdGroupsAsync
     *
     * 获取项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdGroupsAsync($programId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdGroupsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdGroupsAsyncWithHttpInfo
     *
     * 获取项目下的团队
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdGroupsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Group[]';
        $request = $this->getEnterpriseIdProgramsProgramIdGroupsRequest($programId, $enterpriseId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdGroups'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdGroupsRequest($programId, $enterpriseId, $accessToken = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdGroups'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdGroups'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdIssues
     *
     * 获取项目下的任务列表
     *
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $kanbanColumnId 看板栏ID (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue[]
     */
    public function getEnterpriseIdProgramsProgramIdIssues($programId, $enterpriseId, $accessToken = null, $kanbanColumnId = null, $kanbanIds = null, $projectId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdIssuesWithHttpInfo($programId, $enterpriseId, $accessToken, $kanbanColumnId, $kanbanIds, $projectId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdIssuesWithHttpInfo
     *
     * 获取项目下的任务列表
     *
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $kanbanColumnId 看板栏ID (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdIssuesWithHttpInfo($programId, $enterpriseId, $accessToken = null, $kanbanColumnId = null, $kanbanIds = null, $projectId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdProgramsProgramIdIssuesRequest($programId, $enterpriseId, $accessToken, $kanbanColumnId, $kanbanIds, $projectId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdIssuesAsync
     *
     * 获取项目下的任务列表
     *
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $kanbanColumnId 看板栏ID (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdIssuesAsync($programId, $enterpriseId, $accessToken = null, $kanbanColumnId = null, $kanbanIds = null, $projectId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdIssuesAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $kanbanColumnId, $kanbanIds, $projectId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanColumnIds, $sort, $direction, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdIssuesAsyncWithHttpInfo
     *
     * 获取项目下的任务列表
     *
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $kanbanColumnId 看板栏ID (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdIssuesAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $kanbanColumnId = null, $kanbanIds = null, $projectId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdProgramsProgramIdIssuesRequest($programId, $enterpriseId, $accessToken, $kanbanColumnId, $kanbanIds, $projectId, $milestoneId, $state, $onlyRelatedMe, $assigneeId, $authorId, $collaboratorIds, $createdAt, $finishedAt, $planStartedAt, $deadline, $search, $filterChild, $issueStateIds, $issueTypeId, $labelIds, $priority, $scrumSprintIds, $scrumVersionIds, $kanbanColumnIds, $sort, $direction, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdIssues'
     *
     * @param  string $programId 项目 id（可多选，用英文逗号分隔） (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $kanbanColumnId 看板栏ID (optional)
     * @param  string $kanbanIds 看板id(可多选，用英文逗号分隔) (optional)
     * @param  string $projectId 仓库 id (optional)
     * @param  string $milestoneId 里程碑 id（可多选，用英文逗号分隔） (optional)
     * @param  string $state 任务状态属性，可多选，用逗号分隔。（开启：open 关闭：closed 拒绝：rejected 进行中: progressing） (optional)
     * @param  string $onlyRelatedMe 是否仅列出与授权用户相关的任务（0: 否 1: 是） (optional)
     * @param  string $assigneeId 负责人 id (optional)
     * @param  string $authorId 创建者 id (optional)
     * @param  string $collaboratorIds 协作者。(,分隔的id字符串) (optional)
     * @param  string $createdAt 创建时间，格式：(区间)yyyymmddTHH:MM:SS+08:00-yyyymmddTHH:MM:SS+08:00，（指定某日期）yyyymmddTHH:MM:SS+08:00，（小于指定日期）&lt;yyyymmddTHH:MM:SS+08:00，（大于指定日期）&gt;yyyymmddTHH:MM:SS+08:00 (optional)
     * @param  string $finishedAt 任务完成日期，格式同上 (optional)
     * @param  string $planStartedAt 计划开始时间，(格式：yyyy-mm-dd) (optional)
     * @param  string $deadline 任务截止日期，(格式：yyyy-mm-dd) (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $filterChild 是否过滤子任务(0: 否, 1: 是) (optional)
     * @param  string $issueStateIds 任务状态id，多选，用英文逗号分隔。 (optional)
     * @param  string $issueTypeId 任务类型 (optional)
     * @param  string $labelIds 标签 id（可多选，用英文逗号分隔） (optional)
     * @param  string $priority 优先级（可多选，用英文逗号分隔） (optional)
     * @param  string $scrumSprintIds 迭代id(可多选，用英文逗号分隔) (optional)
     * @param  string $scrumVersionIds 版本id(可多选，用英文逗号分隔) (optional)
     * @param  string $kanbanColumnIds 看板栏id(可多选，用英文逗号分隔) (optional)
     * @param  string $sort 排序字段(created_at、updated_at、deadline、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdIssuesRequest($programId, $enterpriseId, $accessToken = null, $kanbanColumnId = null, $kanbanIds = null, $projectId = null, $milestoneId = null, $state = null, $onlyRelatedMe = null, $assigneeId = null, $authorId = null, $collaboratorIds = null, $createdAt = null, $finishedAt = null, $planStartedAt = null, $deadline = null, $search = null, $filterChild = null, $issueStateIds = null, $issueTypeId = null, $labelIds = null, $priority = null, $scrumSprintIds = null, $scrumVersionIds = null, $kanbanColumnIds = null, $sort = null, $direction = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdIssues'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdIssues'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($kanbanColumnId !== null) {
            $queryParams['kanban_column_id'] = ObjectSerializer::toQueryValue($kanbanColumnId);
        }
        // query params
        if ($kanbanIds !== null) {
            $queryParams['kanban_ids'] = ObjectSerializer::toQueryValue($kanbanIds);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($milestoneId !== null) {
            $queryParams['milestone_id'] = ObjectSerializer::toQueryValue($milestoneId);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($onlyRelatedMe !== null) {
            $queryParams['only_related_me'] = ObjectSerializer::toQueryValue($onlyRelatedMe);
        }
        // query params
        if ($assigneeId !== null) {
            $queryParams['assignee_id'] = ObjectSerializer::toQueryValue($assigneeId);
        }
        // query params
        if ($authorId !== null) {
            $queryParams['author_id'] = ObjectSerializer::toQueryValue($authorId);
        }
        // query params
        if ($collaboratorIds !== null) {
            $queryParams['collaborator_ids'] = ObjectSerializer::toQueryValue($collaboratorIds);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }
        // query params
        if ($planStartedAt !== null) {
            $queryParams['plan_started_at'] = ObjectSerializer::toQueryValue($planStartedAt);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($filterChild !== null) {
            $queryParams['filter_child'] = ObjectSerializer::toQueryValue($filterChild);
        }
        // query params
        if ($issueStateIds !== null) {
            $queryParams['issue_state_ids'] = ObjectSerializer::toQueryValue($issueStateIds);
        }
        // query params
        if ($issueTypeId !== null) {
            $queryParams['issue_type_id'] = ObjectSerializer::toQueryValue($issueTypeId);
        }
        // query params
        if ($labelIds !== null) {
            $queryParams['label_ids'] = ObjectSerializer::toQueryValue($labelIds);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($scrumSprintIds !== null) {
            $queryParams['scrum_sprint_ids'] = ObjectSerializer::toQueryValue($scrumSprintIds);
        }
        // query params
        if ($scrumVersionIds !== null) {
            $queryParams['scrum_version_ids'] = ObjectSerializer::toQueryValue($scrumVersionIds);
        }
        // query params
        if ($kanbanColumnIds !== null) {
            $queryParams['kanban_column_ids'] = ObjectSerializer::toQueryValue($kanbanColumnIds);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdMembers
     *
     * 获取项目下的成员列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $flattenGroupMember 是否展开团队成员 (optional, default to true)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Member[]
     */
    public function getEnterpriseIdProgramsProgramIdMembers($programId, $enterpriseId, $accessToken = null, $search = null, $sort = null, $direction = null, $flattenGroupMember = 'true', $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdMembersWithHttpInfo($programId, $enterpriseId, $accessToken, $search, $sort, $direction, $flattenGroupMember, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdMembersWithHttpInfo
     *
     * 获取项目下的成员列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $flattenGroupMember 是否展开团队成员 (optional, default to true)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Member[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdMembersWithHttpInfo($programId, $enterpriseId, $accessToken = null, $search = null, $sort = null, $direction = null, $flattenGroupMember = 'true', $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Member[]';
        $request = $this->getEnterpriseIdProgramsProgramIdMembersRequest($programId, $enterpriseId, $accessToken, $search, $sort, $direction, $flattenGroupMember, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Member[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdMembersAsync
     *
     * 获取项目下的成员列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $flattenGroupMember 是否展开团队成员 (optional, default to true)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdMembersAsync($programId, $enterpriseId, $accessToken = null, $search = null, $sort = null, $direction = null, $flattenGroupMember = 'true', $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdMembersAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $search, $sort, $direction, $flattenGroupMember, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdMembersAsyncWithHttpInfo
     *
     * 获取项目下的成员列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $flattenGroupMember 是否展开团队成员 (optional, default to true)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdMembersAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $search = null, $sort = null, $direction = null, $flattenGroupMember = 'true', $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Member[]';
        $request = $this->getEnterpriseIdProgramsProgramIdMembersRequest($programId, $enterpriseId, $accessToken, $search, $sort, $direction, $flattenGroupMember, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdMembers'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $search 搜索关键字 (optional)
     * @param  string $sort 排序字段(created_at: 创建时间 remark: 在企业的备注) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $flattenGroupMember 是否展开团队成员 (optional, default to true)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdMembersRequest($programId, $enterpriseId, $accessToken = null, $search = null, $sort = null, $direction = null, $flattenGroupMember = 'true', $page = '1', $perPage = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdMembers'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($flattenGroupMember !== null) {
            $queryParams['flatten_group_member'] = ObjectSerializer::toQueryValue($flattenGroupMember);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdOperateAuths
     *
     * 获取项目的操作权限
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProgramsProgramIdOperateAuths($programId, $enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdProgramsProgramIdOperateAuthsWithHttpInfo($programId, $enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdOperateAuthsWithHttpInfo
     *
     * 获取项目的操作权限
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdOperateAuthsWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProgramsProgramIdOperateAuthsRequest($programId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdOperateAuthsAsync
     *
     * 获取项目的操作权限
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdOperateAuthsAsync($programId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdOperateAuthsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdOperateAuthsAsyncWithHttpInfo
     *
     * 获取项目的操作权限
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdOperateAuthsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProgramsProgramIdOperateAuthsRequest($programId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdOperateAuths'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdOperateAuthsRequest($programId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdOperateAuths'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdOperateAuths'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/operate_auths';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdProjects
     *
     * 获取项目下的仓库列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $programPipelineEnabled 是否开启项目流水线支持 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProjectsList[]
     */
    public function getEnterpriseIdProgramsProgramIdProjects($programId, $enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $programPipelineEnabled = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdProjectsWithHttpInfo($programId, $enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $programPipelineEnabled, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdProjectsWithHttpInfo
     *
     * 获取项目下的仓库列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $programPipelineEnabled 是否开启项目流水线支持 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProjectsList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdProjectsWithHttpInfo($programId, $enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $programPipelineEnabled = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectsList[]';
        $request = $this->getEnterpriseIdProgramsProgramIdProjectsRequest($programId, $enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $programPipelineEnabled, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProjectsList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdProjectsAsync
     *
     * 获取项目下的仓库列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $programPipelineEnabled 是否开启项目流水线支持 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdProjectsAsync($programId, $enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $programPipelineEnabled = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdProjectsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $programPipelineEnabled, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdProjectsAsyncWithHttpInfo
     *
     * 获取项目下的仓库列表
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $programPipelineEnabled 是否开启项目流水线支持 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdProjectsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $programPipelineEnabled = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProjectsList[]';
        $request = $this->getEnterpriseIdProgramsProgramIdProjectsRequest($programId, $enterpriseId, $accessToken, $scope, $search, $type, $status, $creatorId, $parentId, $forkFilter, $outsourced, $groupId, $sort, $direction, $programPipelineEnabled, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdProjects'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $scope 范围筛选 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $type 与我相关，created：我创建的，joined：我参与的，star: 我收藏的，template：模版仓库, personal_namespace: 企业下个人空间地址下的仓库 (optional)
     * @param  int $status 状态: 0: 开始，1: 暂停，2: 关闭 (optional)
     * @param  int $creatorId 负责人 (optional)
     * @param  int $parentId form_from仓库id (optional)
     * @param  string $forkFilter 非fork的(not_fork), 只看fork的(only_fork) (optional)
     * @param  int $outsourced 是否外包：0：内部，1：外包 (optional)
     * @param  int $groupId 团队id (optional)
     * @param  string $sort 排序字段(created_at、last_push_at) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  bool $programPipelineEnabled 是否开启项目流水线支持 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdProjectsRequest($programId, $enterpriseId, $accessToken = null, $scope = null, $search = null, $type = null, $status = null, $creatorId = null, $parentId = null, $forkFilter = null, $outsourced = null, $groupId = null, $sort = null, $direction = null, $programPipelineEnabled = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdProjects'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdProjects'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($creatorId !== null) {
            $queryParams['creator_id'] = ObjectSerializer::toQueryValue($creatorId);
        }
        // query params
        if ($parentId !== null) {
            $queryParams['parent_id'] = ObjectSerializer::toQueryValue($parentId);
        }
        // query params
        if ($forkFilter !== null) {
            $queryParams['fork_filter'] = ObjectSerializer::toQueryValue($forkFilter);
        }
        // query params
        if ($outsourced !== null) {
            $queryParams['outsourced'] = ObjectSerializer::toQueryValue($outsourced);
        }
        // query params
        if ($groupId !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($groupId);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($programPipelineEnabled !== null) {
            $queryParams['program_pipeline_enabled'] = ObjectSerializer::toQueryValue($programPipelineEnabled);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdPullRequests
     *
     * 获取项目下的 Pull Request
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Issue[]
     */
    public function getEnterpriseIdProgramsProgramIdPullRequests($programId, $enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $page = '1', $perPage = null)
    {
        list($response) = $this->getEnterpriseIdProgramsProgramIdPullRequestsWithHttpInfo($programId, $enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $page, $perPage);
        return $response;
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdPullRequestsWithHttpInfo
     *
     * 获取项目下的 Pull Request
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdPullRequestsWithHttpInfo($programId, $enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdProgramsProgramIdPullRequestsRequest($programId, $enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdPullRequestsAsync
     *
     * 获取项目下的 Pull Request
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdPullRequestsAsync($programId, $enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $page = '1', $perPage = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdPullRequestsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdPullRequestsAsyncWithHttpInfo
     *
     * 获取项目下的 Pull Request
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdPullRequestsAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\Issue[]';
        $request = $this->getEnterpriseIdProgramsProgramIdPullRequestsRequest($programId, $enterpriseId, $accessToken, $state, $scope, $authorId, $assigneeId, $testerId, $search, $sort, $direction, $groupId, $milestoneId, $labels, $labelIds, $canBeMerged, $projectId, $needStateCount, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdPullRequests'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId 企业 id (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state PR 状态 (optional)
     * @param  string $scope 范围筛选。指派我的: assigned_or_test，我创建或指派给我的: related_to_me，我参与仓库的PR: participate_in，草稿PR: draft (optional)
     * @param  string $authorId 筛选 PR 创建者 (optional)
     * @param  string $assigneeId 筛选 PR 审查者 (optional)
     * @param  string $testerId 筛选 PR 测试人员 (optional)
     * @param  string $search 搜索参数 (optional)
     * @param  string $sort 排序字段(created_at、closed_at、priority) (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  int $groupId 团队 id (optional)
     * @param  int $milestoneId 里程碑 id (optional)
     * @param  string $labels 标签名称。多个标签逗号(,)隔开 (optional)
     * @param  string $labelIds 标签ID,多个标签逗号(,)隔开 (optional)
     * @param  int $canBeMerged 是否可合并 (optional)
     * @param  int $projectId 仓库 id (optional)
     * @param  int $needStateCount 是否需要状态统计数 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdPullRequestsRequest($programId, $enterpriseId, $accessToken = null, $state = null, $scope = null, $authorId = null, $assigneeId = null, $testerId = null, $search = null, $sort = null, $direction = null, $groupId = null, $milestoneId = null, $labels = null, $labelIds = null, $canBeMerged = null, $projectId = null, $needStateCount = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdPullRequests'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdPullRequests'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($authorId !== null) {
            $queryParams['author_id'] = ObjectSerializer::toQueryValue($authorId);
        }
        // query params
        if ($assigneeId !== null) {
            $queryParams['assignee_id'] = ObjectSerializer::toQueryValue($assigneeId);
        }
        // query params
        if ($testerId !== null) {
            $queryParams['tester_id'] = ObjectSerializer::toQueryValue($testerId);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($groupId !== null) {
            $queryParams['group_id'] = ObjectSerializer::toQueryValue($groupId);
        }
        // query params
        if ($milestoneId !== null) {
            $queryParams['milestone_id'] = ObjectSerializer::toQueryValue($milestoneId);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($labelIds !== null) {
            $queryParams['label_ids'] = ObjectSerializer::toQueryValue($labelIds);
        }
        // query params
        if ($canBeMerged !== null) {
            $queryParams['can_be_merged'] = ObjectSerializer::toQueryValue($canBeMerged);
        }
        // query params
        if ($projectId !== null) {
            $queryParams['project_id'] = ObjectSerializer::toQueryValue($projectId);
        }
        // query params
        if ($needStateCount !== null) {
            $queryParams['need_state_count'] = ObjectSerializer::toQueryValue($needStateCount);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCount
     *
     * 获取项目下未被规划的工作项数量
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCount($programId, $enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountWithHttpInfo($programId, $enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountWithHttpInfo
     *
     * 获取项目下未被规划的工作项数量
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountRequest($programId, $enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountAsync
     *
     * 获取项目下未被规划的工作项数量
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountAsync($programId, $enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountAsyncWithHttpInfo($programId, $enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountAsyncWithHttpInfo
     *
     * 获取项目下未被规划的工作项数量
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountRequest($programId, $enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCount'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCountRequest($programId, $enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCount'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsProgramIdWithoutPlanedIssuesCount'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/without_planed_issues_count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnterpriseIdProgramsUnset
     *
     * 获取未立项项目
     *
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEnterpriseIdProgramsUnset($enterpriseId, $accessToken = null)
    {
        $this->getEnterpriseIdProgramsUnsetWithHttpInfo($enterpriseId, $accessToken);
    }

    /**
     * Operation getEnterpriseIdProgramsUnsetWithHttpInfo
     *
     * 获取未立项项目
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnterpriseIdProgramsUnsetWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProgramsUnsetRequest($enterpriseId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEnterpriseIdProgramsUnsetAsync
     *
     * 获取未立项项目
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsUnsetAsync($enterpriseId, $accessToken = null)
    {
        return $this->getEnterpriseIdProgramsUnsetAsyncWithHttpInfo($enterpriseId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnterpriseIdProgramsUnsetAsyncWithHttpInfo
     *
     * 获取未立项项目
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnterpriseIdProgramsUnsetAsyncWithHttpInfo($enterpriseId, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getEnterpriseIdProgramsUnsetRequest($enterpriseId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnterpriseIdProgramsUnset'
     *
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnterpriseIdProgramsUnsetRequest($enterpriseId, $accessToken = null)
    {
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling getEnterpriseIdProgramsUnset'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/unset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdPrograms
     *
     * 新建项目
     *
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $category 项目类型(standard、scrum、kanban) (optional)
     * @param  string $projectIds 关联仓库ids，逗号隔开 (optional)
     * @param  bool $importProjectUsers 是否导入仓库成员 (optional)
     * @param  bool $importProjectIssues 是否导入仓库任务 (optional)
     * @param  bool $importProjectMilestones 是否导入仓库里程碑 (optional)
     * @param  string $userIds 成员ids，逗号隔开 (optional)
     * @param  string $groupIds 团队ids，逗号隔开 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Program
     */
    public function postEnterpriseIdPrograms($name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $category = null, $projectIds = null, $importProjectUsers = null, $importProjectIssues = null, $importProjectMilestones = null, $userIds = null, $groupIds = null)
    {
        list($response) = $this->postEnterpriseIdProgramsWithHttpInfo($name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $category, $projectIds, $importProjectUsers, $importProjectIssues, $importProjectMilestones, $userIds, $groupIds);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProgramsWithHttpInfo
     *
     * 新建项目
     *
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $category 项目类型(standard、scrum、kanban) (optional)
     * @param  string $projectIds 关联仓库ids，逗号隔开 (optional)
     * @param  bool $importProjectUsers 是否导入仓库成员 (optional)
     * @param  bool $importProjectIssues 是否导入仓库任务 (optional)
     * @param  bool $importProjectMilestones 是否导入仓库里程碑 (optional)
     * @param  string $userIds 成员ids，逗号隔开 (optional)
     * @param  string $groupIds 团队ids，逗号隔开 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Program, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProgramsWithHttpInfo($name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $category = null, $projectIds = null, $importProjectUsers = null, $importProjectIssues = null, $importProjectMilestones = null, $userIds = null, $groupIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program';
        $request = $this->postEnterpriseIdProgramsRequest($name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $category, $projectIds, $importProjectUsers, $importProjectIssues, $importProjectMilestones, $userIds, $groupIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Program',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProgramsAsync
     *
     * 新建项目
     *
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $category 项目类型(standard、scrum、kanban) (optional)
     * @param  string $projectIds 关联仓库ids，逗号隔开 (optional)
     * @param  bool $importProjectUsers 是否导入仓库成员 (optional)
     * @param  bool $importProjectIssues 是否导入仓库任务 (optional)
     * @param  bool $importProjectMilestones 是否导入仓库里程碑 (optional)
     * @param  string $userIds 成员ids，逗号隔开 (optional)
     * @param  string $groupIds 团队ids，逗号隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsAsync($name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $category = null, $projectIds = null, $importProjectUsers = null, $importProjectIssues = null, $importProjectMilestones = null, $userIds = null, $groupIds = null)
    {
        return $this->postEnterpriseIdProgramsAsyncWithHttpInfo($name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $category, $projectIds, $importProjectUsers, $importProjectIssues, $importProjectMilestones, $userIds, $groupIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProgramsAsyncWithHttpInfo
     *
     * 新建项目
     *
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $category 项目类型(standard、scrum、kanban) (optional)
     * @param  string $projectIds 关联仓库ids，逗号隔开 (optional)
     * @param  bool $importProjectUsers 是否导入仓库成员 (optional)
     * @param  bool $importProjectIssues 是否导入仓库任务 (optional)
     * @param  bool $importProjectMilestones 是否导入仓库里程碑 (optional)
     * @param  string $userIds 成员ids，逗号隔开 (optional)
     * @param  string $groupIds 团队ids，逗号隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsAsyncWithHttpInfo($name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $category = null, $projectIds = null, $importProjectUsers = null, $importProjectIssues = null, $importProjectMilestones = null, $userIds = null, $groupIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program';
        $request = $this->postEnterpriseIdProgramsRequest($name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $category, $projectIds, $importProjectUsers, $importProjectIssues, $importProjectMilestones, $userIds, $groupIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdPrograms'
     *
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $category 项目类型(standard、scrum、kanban) (optional)
     * @param  string $projectIds 关联仓库ids，逗号隔开 (optional)
     * @param  bool $importProjectUsers 是否导入仓库成员 (optional)
     * @param  bool $importProjectIssues 是否导入仓库任务 (optional)
     * @param  bool $importProjectMilestones 是否导入仓库里程碑 (optional)
     * @param  string $userIds 成员ids，逗号隔开 (optional)
     * @param  string $groupIds 团队ids，逗号隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProgramsRequest($name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $category = null, $projectIds = null, $importProjectUsers = null, $importProjectIssues = null, $importProjectMilestones = null, $userIds = null, $groupIds = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postEnterpriseIdPrograms'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdPrograms'
            );
        }

        $resourcePath = '/{enterprise_id}/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($outsourced !== null) {
            $formParams['outsourced'] = ObjectSerializer::toFormValue($outsourced);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = ObjectSerializer::toFormValue($color);
        }
        // form params
        if ($ident !== null) {
            $formParams['ident'] = ObjectSerializer::toFormValue($ident);
        }
        // form params
        if ($programExtraFieldsProgramFieldId !== null) {
            $formParams['program_extra_fields[program_field_id]'] = ObjectSerializer::toFormValue($programExtraFieldsProgramFieldId);
        }
        // form params
        if ($programExtraFieldsValue !== null) {
            $formParams['program_extra_fields[value]'] = ObjectSerializer::toFormValue($programExtraFieldsValue);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($projectIds !== null) {
            $formParams['project_ids'] = ObjectSerializer::toFormValue($projectIds);
        }
        // form params
        if ($importProjectUsers !== null) {
            $formParams['import_project_users'] = ObjectSerializer::toFormValue($importProjectUsers);
        }
        // form params
        if ($importProjectIssues !== null) {
            $formParams['import_project_issues'] = ObjectSerializer::toFormValue($importProjectIssues);
        }
        // form params
        if ($importProjectMilestones !== null) {
            $formParams['import_project_milestones'] = ObjectSerializer::toFormValue($importProjectMilestones);
        }
        // form params
        if ($userIds !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($userIds);
        }
        // form params
        if ($groupIds !== null) {
            $formParams['group_ids'] = ObjectSerializer::toFormValue($groupIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProgramsFilter
     *
     * 项目列表-支持自定义字段的筛选
     *
     * @param  string $property 排序的字段类型: 项目自定义字段-program_field, 表字段-table_field (required)
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $sortField 排序字段(created_at: 创建时间|updated_at: 更新时间|name: 项目名称|property为table_field时生效) (optional)
     * @param  int $programFieldId 项目自定义字段ID, property为program_field时需要填 (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $search 搜索关键词 (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsProgramFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsProgramFieldId 自定义字段id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramList[]
     */
    public function postEnterpriseIdProgramsFilter($property, $filterConditionsProperty, $enterpriseId, $accessToken = null, $direction = null, $sortField = null, $programFieldId = null, $priorityTopped = null, $search = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsProgramFieldType = null, $filterConditionsProgramFieldId = null, $page = '1', $perPage = null)
    {
        list($response) = $this->postEnterpriseIdProgramsFilterWithHttpInfo($property, $filterConditionsProperty, $enterpriseId, $accessToken, $direction, $sortField, $programFieldId, $priorityTopped, $search, $filterConditionsComparator, $filterConditionsValue, $filterConditionsProgramFieldType, $filterConditionsProgramFieldId, $page, $perPage);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProgramsFilterWithHttpInfo
     *
     * 项目列表-支持自定义字段的筛选
     *
     * @param  string $property 排序的字段类型: 项目自定义字段-program_field, 表字段-table_field (required)
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $sortField 排序字段(created_at: 创建时间|updated_at: 更新时间|name: 项目名称|property为table_field时生效) (optional)
     * @param  int $programFieldId 项目自定义字段ID, property为program_field时需要填 (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $search 搜索关键词 (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsProgramFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsProgramFieldId 自定义字段id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProgramsFilterWithHttpInfo($property, $filterConditionsProperty, $enterpriseId, $accessToken = null, $direction = null, $sortField = null, $programFieldId = null, $priorityTopped = null, $search = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsProgramFieldType = null, $filterConditionsProgramFieldId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramList[]';
        $request = $this->postEnterpriseIdProgramsFilterRequest($property, $filterConditionsProperty, $enterpriseId, $accessToken, $direction, $sortField, $programFieldId, $priorityTopped, $search, $filterConditionsComparator, $filterConditionsValue, $filterConditionsProgramFieldType, $filterConditionsProgramFieldId, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProgramsFilterAsync
     *
     * 项目列表-支持自定义字段的筛选
     *
     * @param  string $property 排序的字段类型: 项目自定义字段-program_field, 表字段-table_field (required)
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $sortField 排序字段(created_at: 创建时间|updated_at: 更新时间|name: 项目名称|property为table_field时生效) (optional)
     * @param  int $programFieldId 项目自定义字段ID, property为program_field时需要填 (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $search 搜索关键词 (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsProgramFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsProgramFieldId 自定义字段id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsFilterAsync($property, $filterConditionsProperty, $enterpriseId, $accessToken = null, $direction = null, $sortField = null, $programFieldId = null, $priorityTopped = null, $search = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsProgramFieldType = null, $filterConditionsProgramFieldId = null, $page = '1', $perPage = null)
    {
        return $this->postEnterpriseIdProgramsFilterAsyncWithHttpInfo($property, $filterConditionsProperty, $enterpriseId, $accessToken, $direction, $sortField, $programFieldId, $priorityTopped, $search, $filterConditionsComparator, $filterConditionsValue, $filterConditionsProgramFieldType, $filterConditionsProgramFieldId, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProgramsFilterAsyncWithHttpInfo
     *
     * 项目列表-支持自定义字段的筛选
     *
     * @param  string $property 排序的字段类型: 项目自定义字段-program_field, 表字段-table_field (required)
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $sortField 排序字段(created_at: 创建时间|updated_at: 更新时间|name: 项目名称|property为table_field时生效) (optional)
     * @param  int $programFieldId 项目自定义字段ID, property为program_field时需要填 (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $search 搜索关键词 (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsProgramFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsProgramFieldId 自定义字段id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsFilterAsyncWithHttpInfo($property, $filterConditionsProperty, $enterpriseId, $accessToken = null, $direction = null, $sortField = null, $programFieldId = null, $priorityTopped = null, $search = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsProgramFieldType = null, $filterConditionsProgramFieldId = null, $page = '1', $perPage = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramList[]';
        $request = $this->postEnterpriseIdProgramsFilterRequest($property, $filterConditionsProperty, $enterpriseId, $accessToken, $direction, $sortField, $programFieldId, $priorityTopped, $search, $filterConditionsComparator, $filterConditionsValue, $filterConditionsProgramFieldType, $filterConditionsProgramFieldId, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProgramsFilter'
     *
     * @param  string $property 排序的字段类型: 项目自定义字段-program_field, 表字段-table_field (required)
     * @param  string[] $filterConditionsProperty 筛选类型 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $direction 排序方向(asc: 升序 desc: 倒序) (optional)
     * @param  string $sortField 排序字段(created_at: 创建时间|updated_at: 更新时间|name: 项目名称|property为table_field时生效) (optional)
     * @param  int $programFieldId 项目自定义字段ID, property为program_field时需要填 (optional)
     * @param  bool $priorityTopped 是否按照置顶优先排序 (optional)
     * @param  string $search 搜索关键词 (optional)
     * @param  string[] $filterConditionsComparator 比较符 (optional)
     * @param  string[] $filterConditionsValue 值 (optional)
     * @param  string[] $filterConditionsProgramFieldType 自定义字段值类型 (optional)
     * @param  int[] $filterConditionsProgramFieldId 自定义字段id (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProgramsFilterRequest($property, $filterConditionsProperty, $enterpriseId, $accessToken = null, $direction = null, $sortField = null, $programFieldId = null, $priorityTopped = null, $search = null, $filterConditionsComparator = null, $filterConditionsValue = null, $filterConditionsProgramFieldType = null, $filterConditionsProgramFieldId = null, $page = '1', $perPage = null)
    {
        // verify the required parameter 'property' is set
        if ($property === null || (is_array($property) && count($property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property when calling postEnterpriseIdProgramsFilter'
            );
        }
        // verify the required parameter 'filterConditionsProperty' is set
        if ($filterConditionsProperty === null || (is_array($filterConditionsProperty) && count($filterConditionsProperty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filterConditionsProperty when calling postEnterpriseIdProgramsFilter'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProgramsFilter'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($direction !== null) {
            $formParams['direction'] = ObjectSerializer::toFormValue($direction);
        }
        // form params
        if ($sortField !== null) {
            $formParams['sort_field'] = ObjectSerializer::toFormValue($sortField);
        }
        // form params
        if ($programFieldId !== null) {
            $formParams['program_field_id'] = ObjectSerializer::toFormValue($programFieldId);
        }
        // form params
        if ($property !== null) {
            $formParams['property'] = ObjectSerializer::toFormValue($property);
        }
        // form params
        if ($priorityTopped !== null) {
            $formParams['priority_topped'] = ObjectSerializer::toFormValue($priorityTopped);
        }
        // form params
        if ($search !== null) {
            $formParams['search'] = ObjectSerializer::toFormValue($search);
        }
        // form params
        if ($filterConditionsProperty !== null) {
            $formParams['filter_conditions[property]'] = ObjectSerializer::toFormValue($filterConditionsProperty);
        }
        // form params
        if ($filterConditionsComparator !== null) {
            $formParams['filter_conditions[comparator]'] = ObjectSerializer::toFormValue($filterConditionsComparator);
        }
        // form params
        if ($filterConditionsValue !== null) {
            $formParams['filter_conditions[value]'] = ObjectSerializer::toFormValue($filterConditionsValue);
        }
        // form params
        if ($filterConditionsProgramFieldType !== null) {
            $formParams['filter_conditions[program_field_type]'] = ObjectSerializer::toFormValue($filterConditionsProgramFieldType);
        }
        // form params
        if ($filterConditionsProgramFieldId !== null) {
            $formParams['filter_conditions[program_field_id]'] = ObjectSerializer::toFormValue($filterConditionsProgramFieldId);
        }
        // form params
        if ($page !== null) {
            $formParams['page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($perPage !== null) {
            $formParams['per_page'] = ObjectSerializer::toFormValue($perPage);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdMembers
     *
     * 添加企业成员或团队进项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员ids，英文逗号(,)隔开: 1,2 (optional)
     * @param  string $groupIds 团队ids，英文逗号(,)隔开: 1,2 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Member
     */
    public function postEnterpriseIdProgramsProgramIdMembers($programId, $enterpriseId, $accessToken = null, $userIds = null, $groupIds = null)
    {
        list($response) = $this->postEnterpriseIdProgramsProgramIdMembersWithHttpInfo($programId, $enterpriseId, $accessToken, $userIds, $groupIds);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdMembersWithHttpInfo
     *
     * 添加企业成员或团队进项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员ids，英文逗号(,)隔开: 1,2 (optional)
     * @param  string $groupIds 团队ids，英文逗号(,)隔开: 1,2 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Member, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProgramsProgramIdMembersWithHttpInfo($programId, $enterpriseId, $accessToken = null, $userIds = null, $groupIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Member';
        $request = $this->postEnterpriseIdProgramsProgramIdMembersRequest($programId, $enterpriseId, $accessToken, $userIds, $groupIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Member',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdMembersAsync
     *
     * 添加企业成员或团队进项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员ids，英文逗号(,)隔开: 1,2 (optional)
     * @param  string $groupIds 团队ids，英文逗号(,)隔开: 1,2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsProgramIdMembersAsync($programId, $enterpriseId, $accessToken = null, $userIds = null, $groupIds = null)
    {
        return $this->postEnterpriseIdProgramsProgramIdMembersAsyncWithHttpInfo($programId, $enterpriseId, $accessToken, $userIds, $groupIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdMembersAsyncWithHttpInfo
     *
     * 添加企业成员或团队进项目
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员ids，英文逗号(,)隔开: 1,2 (optional)
     * @param  string $groupIds 团队ids，英文逗号(,)隔开: 1,2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsProgramIdMembersAsyncWithHttpInfo($programId, $enterpriseId, $accessToken = null, $userIds = null, $groupIds = null)
    {
        $returnType = '\GiteeEnterprise\Model\Member';
        $request = $this->postEnterpriseIdProgramsProgramIdMembersRequest($programId, $enterpriseId, $accessToken, $userIds, $groupIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProgramsProgramIdMembers'
     *
     * @param  int $programId 项目 id (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $userIds 成员ids，英文逗号(,)隔开: 1,2 (optional)
     * @param  string $groupIds 团队ids，英文逗号(,)隔开: 1,2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProgramsProgramIdMembersRequest($programId, $enterpriseId, $accessToken = null, $userIds = null, $groupIds = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling postEnterpriseIdProgramsProgramIdMembers'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProgramsProgramIdMembers'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($userIds !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($userIds);
        }
        // form params
        if ($groupIds !== null) {
            $formParams['group_ids'] = ObjectSerializer::toFormValue($groupIds);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdProjects
     *
     * 项目关联仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  string $addProjectIds 仓库ids (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $importProjectUsers 是否导入仓库成员 (optional, default to 1)
     * @param  int $importProjectIssues 是否导入仓库任务 (optional, default to 0)
     * @param  int $importProjectMilestones 是否导入仓库里程碑 (optional, default to 0)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Project
     */
    public function postEnterpriseIdProgramsProgramIdProjects($programId, $addProjectIds, $enterpriseId, $accessToken = null, $importProjectUsers = '1', $importProjectIssues = '0', $importProjectMilestones = '0')
    {
        list($response) = $this->postEnterpriseIdProgramsProgramIdProjectsWithHttpInfo($programId, $addProjectIds, $enterpriseId, $accessToken, $importProjectUsers, $importProjectIssues, $importProjectMilestones);
        return $response;
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdProjectsWithHttpInfo
     *
     * 项目关联仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  string $addProjectIds 仓库ids (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $importProjectUsers 是否导入仓库成员 (optional, default to 1)
     * @param  int $importProjectIssues 是否导入仓库任务 (optional, default to 0)
     * @param  int $importProjectMilestones 是否导入仓库里程碑 (optional, default to 0)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function postEnterpriseIdProgramsProgramIdProjectsWithHttpInfo($programId, $addProjectIds, $enterpriseId, $accessToken = null, $importProjectUsers = '1', $importProjectIssues = '0', $importProjectMilestones = '0')
    {
        $returnType = '\GiteeEnterprise\Model\Project';
        $request = $this->postEnterpriseIdProgramsProgramIdProjectsRequest($programId, $addProjectIds, $enterpriseId, $accessToken, $importProjectUsers, $importProjectIssues, $importProjectMilestones);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdProjectsAsync
     *
     * 项目关联仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  string $addProjectIds 仓库ids (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $importProjectUsers 是否导入仓库成员 (optional, default to 1)
     * @param  int $importProjectIssues 是否导入仓库任务 (optional, default to 0)
     * @param  int $importProjectMilestones 是否导入仓库里程碑 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsProgramIdProjectsAsync($programId, $addProjectIds, $enterpriseId, $accessToken = null, $importProjectUsers = '1', $importProjectIssues = '0', $importProjectMilestones = '0')
    {
        return $this->postEnterpriseIdProgramsProgramIdProjectsAsyncWithHttpInfo($programId, $addProjectIds, $enterpriseId, $accessToken, $importProjectUsers, $importProjectIssues, $importProjectMilestones)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postEnterpriseIdProgramsProgramIdProjectsAsyncWithHttpInfo
     *
     * 项目关联仓库
     *
     * @param  int $programId 项目 id (required)
     * @param  string $addProjectIds 仓库ids (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $importProjectUsers 是否导入仓库成员 (optional, default to 1)
     * @param  int $importProjectIssues 是否导入仓库任务 (optional, default to 0)
     * @param  int $importProjectMilestones 是否导入仓库里程碑 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postEnterpriseIdProgramsProgramIdProjectsAsyncWithHttpInfo($programId, $addProjectIds, $enterpriseId, $accessToken = null, $importProjectUsers = '1', $importProjectIssues = '0', $importProjectMilestones = '0')
    {
        $returnType = '\GiteeEnterprise\Model\Project';
        $request = $this->postEnterpriseIdProgramsProgramIdProjectsRequest($programId, $addProjectIds, $enterpriseId, $accessToken, $importProjectUsers, $importProjectIssues, $importProjectMilestones);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postEnterpriseIdProgramsProgramIdProjects'
     *
     * @param  int $programId 项目 id (required)
     * @param  string $addProjectIds 仓库ids (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $importProjectUsers 是否导入仓库成员 (optional, default to 1)
     * @param  int $importProjectIssues 是否导入仓库任务 (optional, default to 0)
     * @param  int $importProjectMilestones 是否导入仓库里程碑 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postEnterpriseIdProgramsProgramIdProjectsRequest($programId, $addProjectIds, $enterpriseId, $accessToken = null, $importProjectUsers = '1', $importProjectIssues = '0', $importProjectMilestones = '0')
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling postEnterpriseIdProgramsProgramIdProjects'
            );
        }
        // verify the required parameter 'addProjectIds' is set
        if ($addProjectIds === null || (is_array($addProjectIds) && count($addProjectIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addProjectIds when calling postEnterpriseIdProgramsProgramIdProjects'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling postEnterpriseIdProgramsProgramIdProjects'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($addProjectIds !== null) {
            $formParams['add_project_ids'] = ObjectSerializer::toFormValue($addProjectIds);
        }
        // form params
        if ($importProjectUsers !== null) {
            $formParams['import_project_users'] = ObjectSerializer::toFormValue($importProjectUsers);
        }
        // form params
        if ($importProjectIssues !== null) {
            $formParams['import_project_issues'] = ObjectSerializer::toFormValue($importProjectIssues);
        }
        // form params
        if ($importProjectMilestones !== null) {
            $formParams['import_project_milestones'] = ObjectSerializer::toFormValue($importProjectMilestones);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProgramsProgramId
     *
     * 更新项目
     *
     * @param  int $programId 项目 id (required)
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $issueModule 工作项组件模式 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\Program
     */
    public function putEnterpriseIdProgramsProgramId($programId, $name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $issueModule = null)
    {
        list($response) = $this->putEnterpriseIdProgramsProgramIdWithHttpInfo($programId, $name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $issueModule);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdWithHttpInfo
     *
     * 更新项目
     *
     * @param  int $programId 项目 id (required)
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $issueModule 工作项组件模式 (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\Program, HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProgramsProgramIdWithHttpInfo($programId, $name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $issueModule = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program';
        $request = $this->putEnterpriseIdProgramsProgramIdRequest($programId, $name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $issueModule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\Program',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdAsync
     *
     * 更新项目
     *
     * @param  int $programId 项目 id (required)
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $issueModule 工作项组件模式 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProgramsProgramIdAsync($programId, $name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $issueModule = null)
    {
        return $this->putEnterpriseIdProgramsProgramIdAsyncWithHttpInfo($programId, $name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $issueModule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdAsyncWithHttpInfo
     *
     * 更新项目
     *
     * @param  int $programId 项目 id (required)
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $issueModule 工作项组件模式 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProgramsProgramIdAsyncWithHttpInfo($programId, $name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $issueModule = null)
    {
        $returnType = '\GiteeEnterprise\Model\Program';
        $request = $this->putEnterpriseIdProgramsProgramIdRequest($programId, $name, $enterpriseId, $accessToken, $description, $assigneeId, $outsourced, $status, $color, $ident, $programExtraFieldsProgramFieldId, $programExtraFieldsValue, $issueModule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProgramsProgramId'
     *
     * @param  int $programId 项目 id (required)
     * @param  string $name 项目名称 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 项目简介 (optional)
     * @param  string $assigneeId 负责人ID (optional)
     * @param  bool $outsourced 项目类型:内部(false)/外包(true)项目 (optional)
     * @param  int $status 项目状态:（0:开始 1:暂停 2:关闭） (optional)
     * @param  string $color 颜色 (optional)
     * @param  string $ident 项目编号 (optional)
     * @param  int[] $programExtraFieldsProgramFieldId 项目自定义字段 id（项目字段设置列表的字段id） (optional)
     * @param  string[] $programExtraFieldsValue 自定义字段的值（options类型的字段传对应选项的id，使用 , 隔开，如\&quot;1,2,3\&quot;） (optional)
     * @param  string $issueModule 工作项组件模式 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProgramsProgramIdRequest($programId, $name, $enterpriseId, $accessToken = null, $description = null, $assigneeId = null, $outsourced = null, $status = null, $color = null, $ident = null, $programExtraFieldsProgramFieldId = null, $programExtraFieldsValue = null, $issueModule = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling putEnterpriseIdProgramsProgramId'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling putEnterpriseIdProgramsProgramId'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProgramsProgramId'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($assigneeId !== null) {
            $formParams['assignee_id'] = ObjectSerializer::toFormValue($assigneeId);
        }
        // form params
        if ($outsourced !== null) {
            $formParams['outsourced'] = ObjectSerializer::toFormValue($outsourced);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = ObjectSerializer::toFormValue($color);
        }
        // form params
        if ($ident !== null) {
            $formParams['ident'] = ObjectSerializer::toFormValue($ident);
        }
        // form params
        if ($programExtraFieldsProgramFieldId !== null) {
            $formParams['program_extra_fields[program_field_id]'] = ObjectSerializer::toFormValue($programExtraFieldsProgramFieldId);
        }
        // form params
        if ($programExtraFieldsValue !== null) {
            $formParams['program_extra_fields[value]'] = ObjectSerializer::toFormValue($programExtraFieldsValue);
        }
        // form params
        if ($issueModule !== null) {
            $formParams['issue_module'] = ObjectSerializer::toFormValue($issueModule);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdUpdateComponents
     *
     * 修改项目组件
     *
     * @param  int $programId 项目 id (required)
     * @param  string[] $componentsIdent 组件ident (required)
     * @param  bool[] $componentsEnabled 是否开启 (required)
     * @param  int $enterpriseId enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $componentsCondition 0为属于， 1为不属于 (optional)
     * @param  int[] $componentsRoleIdsRoleId 角色id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GiteeEnterprise\Model\ProgramComponent[]
     */
    public function putEnterpriseIdProgramsProgramIdUpdateComponents($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken = null, $componentsCondition = null, $componentsRoleIdsRoleId = null)
    {
        list($response) = $this->putEnterpriseIdProgramsProgramIdUpdateComponentsWithHttpInfo($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken, $componentsCondition, $componentsRoleIdsRoleId);
        return $response;
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdUpdateComponentsWithHttpInfo
     *
     * 修改项目组件
     *
     * @param  int $programId 项目 id (required)
     * @param  string[] $componentsIdent 组件ident (required)
     * @param  bool[] $componentsEnabled 是否开启 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $componentsCondition 0为属于， 1为不属于 (optional)
     * @param  int[] $componentsRoleIdsRoleId 角色id (optional)
     *
     * @throws \GiteeEnterprise\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GiteeEnterprise\Model\ProgramComponent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function putEnterpriseIdProgramsProgramIdUpdateComponentsWithHttpInfo($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken = null, $componentsCondition = null, $componentsRoleIdsRoleId = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramComponent[]';
        $request = $this->putEnterpriseIdProgramsProgramIdUpdateComponentsRequest($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken, $componentsCondition, $componentsRoleIdsRoleId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GiteeEnterprise\Model\ProgramComponent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdUpdateComponentsAsync
     *
     * 修改项目组件
     *
     * @param  int $programId 项目 id (required)
     * @param  string[] $componentsIdent 组件ident (required)
     * @param  bool[] $componentsEnabled 是否开启 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $componentsCondition 0为属于， 1为不属于 (optional)
     * @param  int[] $componentsRoleIdsRoleId 角色id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProgramsProgramIdUpdateComponentsAsync($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken = null, $componentsCondition = null, $componentsRoleIdsRoleId = null)
    {
        return $this->putEnterpriseIdProgramsProgramIdUpdateComponentsAsyncWithHttpInfo($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken, $componentsCondition, $componentsRoleIdsRoleId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putEnterpriseIdProgramsProgramIdUpdateComponentsAsyncWithHttpInfo
     *
     * 修改项目组件
     *
     * @param  int $programId 项目 id (required)
     * @param  string[] $componentsIdent 组件ident (required)
     * @param  bool[] $componentsEnabled 是否开启 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $componentsCondition 0为属于， 1为不属于 (optional)
     * @param  int[] $componentsRoleIdsRoleId 角色id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putEnterpriseIdProgramsProgramIdUpdateComponentsAsyncWithHttpInfo($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken = null, $componentsCondition = null, $componentsRoleIdsRoleId = null)
    {
        $returnType = '\GiteeEnterprise\Model\ProgramComponent[]';
        $request = $this->putEnterpriseIdProgramsProgramIdUpdateComponentsRequest($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken, $componentsCondition, $componentsRoleIdsRoleId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putEnterpriseIdProgramsProgramIdUpdateComponents'
     *
     * @param  int $programId 项目 id (required)
     * @param  string[] $componentsIdent 组件ident (required)
     * @param  bool[] $componentsEnabled 是否开启 (required)
     * @param  int $enterpriseId (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int[] $componentsCondition 0为属于， 1为不属于 (optional)
     * @param  int[] $componentsRoleIdsRoleId 角色id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putEnterpriseIdProgramsProgramIdUpdateComponentsRequest($programId, $componentsIdent, $componentsEnabled, $enterpriseId, $accessToken = null, $componentsCondition = null, $componentsRoleIdsRoleId = null)
    {
        // verify the required parameter 'programId' is set
        if ($programId === null || (is_array($programId) && count($programId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $programId when calling putEnterpriseIdProgramsProgramIdUpdateComponents'
            );
        }
        // verify the required parameter 'componentsIdent' is set
        if ($componentsIdent === null || (is_array($componentsIdent) && count($componentsIdent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $componentsIdent when calling putEnterpriseIdProgramsProgramIdUpdateComponents'
            );
        }
        // verify the required parameter 'componentsEnabled' is set
        if ($componentsEnabled === null || (is_array($componentsEnabled) && count($componentsEnabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $componentsEnabled when calling putEnterpriseIdProgramsProgramIdUpdateComponents'
            );
        }
        // verify the required parameter 'enterpriseId' is set
        if ($enterpriseId === null || (is_array($enterpriseId) && count($enterpriseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterpriseId when calling putEnterpriseIdProgramsProgramIdUpdateComponents'
            );
        }

        $resourcePath = '/{enterprise_id}/programs/{program_id}/update_components';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($programId !== null) {
            $resourcePath = str_replace(
                '{' . 'program_id' . '}',
                ObjectSerializer::toPathValue($programId),
                $resourcePath
            );
        }
        // path params
        if ($enterpriseId !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise_id' . '}',
                ObjectSerializer::toPathValue($enterpriseId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($componentsIdent !== null) {
            $formParams['components[ident]'] = ObjectSerializer::toFormValue($componentsIdent);
        }
        // form params
        if ($componentsEnabled !== null) {
            $formParams['components[enabled]'] = ObjectSerializer::toFormValue($componentsEnabled);
        }
        // form params
        if ($componentsCondition !== null) {
            $formParams['components[condition]'] = ObjectSerializer::toFormValue($componentsCondition);
        }
        // form params
        if ($componentsRoleIdsRoleId !== null) {
            $formParams['components[role_ids][role_id]'] = ObjectSerializer::toFormValue($componentsRoleIdsRoleId);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
